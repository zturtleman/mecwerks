<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257863640"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257863640"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257863640"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257863640"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial20.shtml"><< Prev</a> |
	Tutorial 21 |
	<a href="tutorial22.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>
  
   <!-- BEGIN LEFT NAVBAR MENU --> 
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;		
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->
	
	
	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top> 


<center> 
<font face="Verdana, Arial" size="2" color="#eeeeee">


<b><font color="#C05F00" size=5>
TUTORIAL 21 - Scrolling Credits</b>
</font>by <b><a href="mailto:iainmcgin@barrysworld.co.uk">Iain
McGinniss</a></b></center>
<p align="left">When you have finished you mod, it is often a good idea to leave
the user with a good final sequence which will help them to remember all that
they have played, how much they have enjoyed it, and give a lasting impression
of just how good (or how bad) your mod was. The ordinary exit sequence in the iD
code is a bland affair, just a simple black screen with the &quot;iD Software
is:&quot; screen. The secondary problem for your mod is that you will want to
have you and your team's names in this final sequence, yet still have the iD
software credits there to pay homage to the geniuses who helped create this
beautiful engine for us all to play with.</p>
<p align="left">And so, the best solution for this sort of thing is a
cinema-style scrolling credits sequence. Film producers discovered from a very
early stage that using either switching screens with a few seconds delay in
between, or a more elegant scrolling credits sequence that they could elongate
the final moments of their films for the viewers and also display the full
credits list for the entire project. While this has become wildly out of hand
with movies with people such as the hydration-engineer (coffee maker) and
sanitary technician (cleaner) appearing on the credits, the idea is still sound:
with suitable music the credits can round off a film quite nicely. This also
works quite well for games, and a prime example that most of you will remember
if you were around in the Quake 2 days was action quake, where a scrolling
credits sequence and the theme to the A-Team was added. This, as far as I can
tell, was the first mod that used such a sequence and when I think about it, it
brings back all the memories of the glorious head-shots on my best friends.</p>
<p align="left">Anyway, enough of the background knowledge. To the code!</p>

<font color="#E07F44"><H4>
1. CODING THE SCROLLING CREDITS
</H4></font>

<p>For the credits code, we need a versatile piece of code and an easy-to-modify
data set that contains all of our credits in sequential order, from top to
bottom. As this is a menu-based piece of code, it is placed within the UI
project of the source, and for our purposes we will edit the <font color="#00ff00">ui_credits.c</font>
file. The thing is though, none of the code that currently exists in the file is
of any real use to us, so into the recycle bin it goes. We will start from
scratch, and work our way up. So, clean out the ui_credits.c file and put in the
following...</p>

<font face="Verdana, Arial" size="3" color="#ffffcc">
<pre><font color="#ff6060">// INCLUDE FILES
#include &quot;ui_local.h&quot;

// CONSTANT DEFINITIONS

#define SCROLLSPEED	2.00 // The scrolling speed in pixels per second.
                          // modify as appropriate for our credits
// #define BACKGROUND_SHADER 
// uncomment this to use a background shader, otherwise a solid color
// defined in the vec4_t &quot;color_background&quot; is filled to the screen
                            
// STRUCTURES

typedef struct {
	menuframework_s	menu;
} creditsmenu_t;

static creditsmenu_t	s_credits;

int starttime; // game time at which credits are started
float mvolume; // records the original music volume level, as we will
               // modify it for the credits

// change this to change the background colour on credits
vec4_t color_background	        = {0.00, 0.35, 0.69, 1.00};
// these are just example colours that are used in credits[] 
vec4_t color_headertext			= {0.53, 0.77, 1.00, 1.00};
vec4_t color_maintext			= {1.00, 1.00, 1.00, 1.00};

qhandle_t	BackgroundShader; // definition of the background shader pointer
</font>
</pre>
</font>

Okay, so I'll explain these variables before we go any further. SCROLLSPEED is a
float that defines the rate at which the words travel up the screen, so by
changing this you can have a fast set of credits (if you have a lot of team
members) or a slow set of credits (if you want to burn your name into the
player's head). BACKGROUND_SHADER is a constant that tells the code whether or
not we want to render a shader (an animated texture) onto the background, or
just a plain color. While a shader can produce very dramatic effects when
combined with good artwork and a solid understanding of blending techniques,
this can be very costly in terms of performance and so if we only need a plain
color, we should just draw as such (filling a solid color into the background
before drawing the credits). The creditsmenu_t structure is just taken from the
old code (so it was not entirely useless). The vec4_t colours are used to
describe the text in our credits sequence as you will see below, and
BackgroundShader is a quake pointer to the shader as cached by the Q3 Engine.
Now, we get to the important stuff:

<font face="Verdana, Arial" size="3" color="#ffffcc">
<pre><font color="#ff6060">typedef struct
{
	char *string;
	int style;
	vec4_t *colour;
} cr_line;

cr_line credits[] = { // edit this as necessary for your credits
	
{ &quot;Scrolling Credits Sequence&quot;, UI_CENTER|UI_BIGFONT|UI_PULSE, &amp;color_headertext },
{ &quot;Design by Iain McGinniss&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;Special Thanks To:&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;ID Software&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;Code 3 Arena&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;The Gamespy Network&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;iD Software is:&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;Programming:&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;John Carmack, John Cash&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;Art:&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;Adrian Carmack, Kevin Cloud,&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;Paul Steed, Kenneth Scott&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;Game Designer:&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;Graeme Devine&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;Level Design:&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;Tim Willits, Christian Antkow&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;Paul Jaquays&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;CEO:&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;Todd Hollenshead&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;Director of Business Development:&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;Katherine Anna Kang&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },
{ &quot;&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_blue },
{ &quot;Biz Assist and id mom:&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_headertext },
{ &quot;Donna Jackson&quot;, UI_CENTER|UI_SMALLFONT, &amp;color_maintext },

  {NULL}
};</font></pre>
</font>

<P>Okay, let's cover this section. This is the actual definition of the 
structure that will contain a single line of text on the credits (cr_line), 
which contains the string, the formatting of the characters and the color of the 
line (in full RGBA form). This structure is then used to create a full array of 
all the lines in the credits sequence (credits[]). If you are at least 
reasonably competent with the C language then this kind of structure use should 
be routine for you.</P>
<P>For the formatting, we are using the standard iD enumerated constants of the 
form UI_*. Here is a full list and what they will do to the text:</P>
<P><FONT color=#00ff00>UI_LEFT</FONT> - Align to the left of the 
screen.<BR><FONT color=#00ff00>UI_CENTER</FONT> - Align to the center.<BR><FONT 
color=#00ff00>UI_RIGHT</FONT> - Align to the right of the screen.<BR><FONT 
color=#00ff00>UI_FORMATMASK</FONT> - Not sure... I'm sure if you search for it 
being used in other sections of the UI code it's use will become clear.<BR><FONT 
color=#00ff00>UI_SMALLFONT</FONT> - Small font.<BR><FONT 
color=#00ff00>UI_BIGFONT</FONT> - Big font.<BR><FONT 
color=#00ff00>UI_GIANTFONT</FONT> - Giant font.<BR><FONT 
color=#00ff00>UI_DROPSHADOW</FONT> - A drop shadow is created behind the 
text.<BR><FONT color=#00ff00>UI_BLINK</FONT> - The text blinks.<BR><FONT 
color=#00ff00>UI_INVERSE</FONT> - The text is inverted? I've not tested this so 
I am not entirely sure.<BR><FONT color=#00ff00>UI_PULSE</FONT> - The text pulses 
(an example of this in the standard code is where the mouse pointer is moved 
over any menu item, and it pulses).</P>

      <p>              
    Now, we will do the actual coding for the credits (the really important
    part!):

<font face="Verdana, Arial" size="3" color="#ffffcc">
    <pre><font color="#ff6060">/*
=================
UI_CreditMenu_Key
=================
*/
static sfxHandle_t UI_CreditMenu_Key( int key ) {
	if( key &amp; K_CHAR_FLAG ) {
		return 0;
	}

	// pressing the escape key or clicking the mouse will exit
	// we also reset the music volume to the user's original
	// choice here,  by setting s_musicvolume to the stored var
	trap_Cmd_ExecuteText( EXEC_APPEND, 
                         va(&quot;s_musicvolume %f; quit\n&quot;, mvolume));
	return 0;
}

/*
=================
ScrollingCredits_Draw
This is the main drawing function for the credits. 
Most of the code is self-explanatory.
=================
*/
static void ScrollingCredits_Draw(void)
{
  int x = 320, y, n, ysize = 0, fadetime = 0;
  vec4_t fadecolour = { 0.00, 0.00, 0.00, 0.00 };

  // ysize is used to determine the entire length 
  // of the credits in pixels. 
  // We can then use this in further calculations
  if(!ysize) // ysize not calculated, so calculate it dammit!
  {
    // loop through entire credits array
    for(n = 0; n &lt;= sizeof(credits) - 1; n++) 
    {
      // it is a small character
      if(credits[n].style &amp; UI_SMALLFONT) 
      {
        // add small character height
        ysize += PROP_HEIGHT * PROP_SMALL_SIZE_SCALE;
        
      // it is a big character
      }else if(credits[n].style &amp; UI_BIGFONT) 
      {
        // add big character size
        ysize += PROP_HEIGHT;
        
      // it is a huge character
      }else if(credits[n].style &amp; UI_GIANTFONT) 
      {
        // add giant character size.
        ysize += PROP_HEIGHT * (1 / PROP_SMALL_SIZE_SCALE); 
      }
    }
  }

  // first, fill the background with the specified colour/shader
  // we are drawing a shader
#ifdef BACKGROUND_SHADER 
    UI_DrawHandlePic(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, BackgroundShader);
  
  // we are just filling a color
#else 
    UI_FillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, color_background);
#endif

  // let's draw the stuff
  // set initial y location
  y = 480 - SCROLLSPEED * (float)(uis.realtime - starttime) / 100;
  
  // loop through the entire credits sequence
  for(n = 0; n &lt;= sizeof(credits) - 1; n++)
  {
    // this NULL string marks the end of the credits struct
    if(credits[n].string == NULL) 
    {
      if(y &lt; -16) // credits sequence is completely off screen
      {
        trap_Cmd_ExecuteText( EXEC_APPEND, 
                         va(&quot;s_musicvolume %f; quit\n&quot;, mvolume));
        break; // end of credits
      }
      break;
    }
		
    if( strlen(credits[n].string) == 1) // spacer string, no need to draw
      continue;

    if( y &gt; -(PROP_HEIGHT * (1 / PROP_SMALL_SIZE_SCALE))) 
      // the line is within the visible range of the screen
      UI_DrawProportionalString(x, y, credits[n].string, 
                                credits[n].style, *credits[n].colour );
		
    // re-adjust y for next line
    if(credits[n].style &amp; UI_SMALLFONT)
    {
      y += PROP_HEIGHT * PROP_SMALL_SIZE_SCALE;
    }else if(credits[n].style &amp; UI_BIGFONT)
    {
      y += PROP_HEIGHT;
    }else if(credits[n].style &amp; UI_GIANTFONT)
    {
      y += PROP_HEIGHT * (1 / PROP_SMALL_SIZE_SCALE);
    }

    // if y is off the screen, break out of loop
    if (y &gt; 480)
    break;
  }
}

/*
===============
UI_CreditMenu
===============
*/
void UI_CreditMenu( void ) {
	memset( &amp;s_credits, 0 ,sizeof(s_credits) );

	s_credits.menu.draw = ScrollingCredits_Draw;
	s_credits.menu.key = UI_CreditMenu_Key;
	s_credits.menu.fullscreen = qtrue;
	UI_PushMenu ( &amp;s_credits.menu );

	starttime = uis.realtime; // record start time for credits to scroll properly
	mvolume = trap_Cvar_VariableValue( &quot;s_musicvolume&quot; );
	if(mvolume &lt; 0.5)
		trap_Cmd_ExecuteText( EXEC_APPEND, &quot;s_musicvolume 0.5\n&quot; );
	trap_Cmd_ExecuteText( EXEC_APPEND, &quot;music music/fla22k_02\n&quot; );

	// load the background shader
#ifdef BACKGROUND_SHADER
	BackgroundShader = 
	  trap_R_RegisterShaderNoMip(&quot;*YOURSHADER_HERE*&quot;);
#endif
}</font></pre>
</font>

Okay, that's a lot of code to absorb in one go. There are a lot of comments in 
there that explain the functionality. I suggest you read it in reverse 
order to get the full picture, read through UI_CreditMenu first, then 
ScrollingCredits_Draw, then UI_CreditMenu_Key. UI_CreditMenu is the 
initialisation section for the code, telling the Quake 3 Engine that we are now 
rendering our menu from this section of code, directing it to 
ScrollingCredits_Draw for drawing and to UI_CreditMenu_Key for the key handling. 
An important bit in UI_CreditMenu is just beyond "UI_PushMenu 
(&amp;s_credits.menu)" where the music is initialized, a key part of the goal we 
set out for ourselves. mvolume records the initial volume of the music from the 
client's configuration, then a decision is made on whether the music is too 
quiet or not. If it is, then we set it to a decent level so that the music will 
be heard by the client. The line

<font face="Verdana, Arial" size="3" color="#ffffcc">
<pre><font color="#ff6060">trap_Cmd_ExecuteText( EXEC_APPEND, &quot;music music/fla22k_02\n&quot; );</font></pre>
</font>

<P>is where the command is sent to the client's console to start the music. The 
music I have chosen for the credits is one of the standard tracks that are 
included with quake 3 arena, fla22k_02. Any of the tracks which are in the music 
directory of pak0.pk3 can be used, or even your own if you are not using some 
funky compression format (yes, that means no MP3's unfortunately. Harass John 
Carmack to add MP3 support to the engine!).</P>
<P>When the credits are finished or the user wants to quit out by pressing a
key, we want to reset the music volume to the user's default so next time they
play, they are not offended by the music blaring out during their mod
experience. This can easily be done by issuing a cvar change command onto the
console, just as if the user had typed it themselves. This is shown in the line</P>
<font face="Verdana, Arial" size="3" color="#ffffcc">
<pre><font color="#ff6060">trap_Cmd_ExecuteText( EXEC_APPEND, 
                         va(&quot;s_musicvolume %f; quit\n&quot;, mvolume));</font></pre>
</font>
<P>In both the ScrollingCredits_Draw function and the UI_CreditMenu_Key
function. All it does is type &quot;s_musicvolume &lt;uservolume&gt;;
quit&lt;ENTER KEY&gt;&quot; onto the console, which sets the music volume back
to the default and quits the game. Simple!</P>
<P>In the example code here I have disabled the background shader drawing,
basically because you will need to create your own shader file to render
whatever you want into the background. This is simple enough, just download the
shader documentation from iD software and read through, learn how to use the
blendfunc commands and so on. It's all about creativity, young padawan.</P>
<font color="#E07F44"><H4>
1. BEYOND THUNDERDROME...
</font>
</H4>
<font face="Verdana, Arial" size="2" color="#eeeeee">
<P>So that's it! When you compile this code alongside the rest of the UI project 
and load it up, you will have a fully functioning scrolling credits system (ooo!) 
which is very easy to modify. To add to the credits, just modify the credits[] 
array, adding new lines with the necessary formatting elements, set your colour 
and you're laughing. I've already used this code in 2 of my mods, and it works 
very well, I've had some nice comments from players about it...</P>
<P>This is not the end however. Homework time! To add to the full cinema feel, you could add 
FULL shader support to the code, meaning that animated images and suchlike can 
be added to the scrolling section of the code and so on. This can then be 
further modified by creating new text formatting modes to fit around graphics 
and so on. This would take a lot of work over the existing code, requiring 
coordinates and so on to be added to the credits[] array and new code to deal 
with this, but in the end you could have a very nice piece of code that you can 
be proud of, and hang up on the wall next to your PC GAMER posters (you do have
PC Gamer posters, right?).</P>
<P>Anyway, I hope you have all found this tutorial interesting and useful. To 
save all your typing, you can 
<a href="http://dl.fileplanet.com/dl/dl.asp?code3arena/scrolling_ui_credits.zip">
download the ui_credits.c file</a> for all the code 
modifications.<BR>Iain 
out...</P>

              
</font>              
    </font>              
    </td>			  
  </tr>
</table>
	<!-- END MAIN TABLE -->
				                
  </tr>
</table>
<p>

	<!-- BEGIN BOTTOM HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial20.shtml"><< Prev</a> |
	Tutorial 21 |
	<a href="tutorial22.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTOTM HEIRARCHY -->

</body>
</html>
