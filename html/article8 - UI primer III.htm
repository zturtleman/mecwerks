<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?258000328"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?258000328"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?258000328"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?258000328"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article7.shtml"><< Prev</a> |
	Article 8 |
	<a href="article9.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>
  
   <!-- BEGIN LEFT NAVBAR MENU --> 
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->


	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top>
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
ARTICLE 8 - UI Menu Primer III
</font></b><br>by <a href="mailto:hypothermia@planetquake.com">
<font color="#FF0000">H</font><font color="#FFFF00">y</font><font color="#CC33CC">p</font><font color="#3333FF">o</font><font color="#FFFFFF">Thermia</font></A></center>


<p>With a good understanding of how the menu system works
(<a href="article6.shtml">UI Menu Primer I</a>), and a look through the menu reference
(<a href="article7.shtml">UI Menu Primer II</a>), we're now in a good position
to look at the more advanced features of the menu interface. This article
assume that you've at least read through parts I and II.

<p>If you're contemplating doing some of the things described in this article
then it's assumed that you're savvy enough to be able to work through some
code. Be prepared to look through the source code to improve and polish
your understanding.

<p>Finally, we'll look at some of the things that go into good menu design,
concentrating mainly on pages of controls.

<br>&nbsp;

<font color="#E07F44"><H4>
1. Custom menu drawing
</H4></font>

<p>Custom menu drawing comes into its own when you're designing a new menu
(or modifying an existing one). When you want to draw a decorative piece of
art or title, then consider using this instead of creating a menu control
that's disabled (doesn't take any input).

<p>There is a limit to the number of controls on a page, if you're reaching
this limit then custom menu drawing might help you cut down on menu controls
that never take input. The alternative is increasing the number of controls
on a page - at the risk of creating excessive clutter.

<p>When it comes to drawing the menu on-screen we can intercept this by setting
the <b>draw</b> function pointer in your <b>menuframework_s</b> structure for that
menu. If this pointer is set then our menu drawing function
will be called instead of the default menu
drawing code. We must remember to call that default code ourselves, otherwise
any controls we've created won't be drawn.

<p>The default menu drawing code is called through <b>DrawMenu(menuframework_s*)</b>.
Any background drawing should be done before calling this function, similarly any drawing
done afterward will obscure what has been drawn by <b>DrawMenu()</b>.

<p>The <b>menu.draw</b> function must be of the following type:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
static void DrawFunctionName(void); // "static" recommended
</pre></font>

<p>and assigned when the menu controls are initialized. It's also a good idea to
cache any graphics that'll be drawn.

<br>&nbsp;

<font color="#E07F44"><H4>
1.1 Custom menu drawing: Example
</H4></font>

<p>The following example shows the bot menu background (a title and left/right brackets)
being drawn without using controls. Taken from <b>ui_addbots.c</b>:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
#define ART_BACKGROUND "menu/art/addbotframe"

typedef struct {
      menuframework_s menu;
      menubitmap_s arrows;

      // rest of structure snipped
} addBotsMenuInfo_t;

static addBotsMenuInfo_t	addBotsMenuInfo;


/*
=================
UI_AddBotsMenu_Draw
=================
*/
static void UI_AddBotsMenu_Draw( void ) {
   UI_DrawBannerString( 320, 16, "ADD BOTS",
        UI_CENTER, color_white );
   UI_DrawNamedPic( 320-233, 240-166,
        466, 332, ART_BACKGROUND );

   // standard menu drawing
   Menu_Draw( &addBotsMenuInfo.menu );
}
</pre></font>

<p>The <b>menu.draw</b> pointer was initialized with the following code
when each of the other controls were initialized:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
addBotsMenuInfo.menu.draw = UI_AddBotsMenu_Draw;
</pre></font>

<br>&nbsp;

<font color="#E07F44"><H4>
2. Updating a menu thats already been pushed
</H4></font>

<p>If you create a menu hierarchy with a parent and one or more child menus, you use
<b>UI_PushMenu()</b> to start display of the child, and <b>UI_PopMenu()</b> to
return to the parent. How do you update the parent menu when something 
relevent in a child has changed?

<p>You can't rely on the initialization process for the parent, because this is only called 
when the menu is created. When control pops to the parent menu it just picks up
from where it was last drawn. 

<p>Fortunately you can detect when this happens. The variable <b>uis.firstdraw</b>
is always set to <b>qtrue</b> when a menu page replaces a previously drawn menu. This 
happens during either the push that first activates the menu, or the pop that re-activates
the dormant menu. You can check for this during your custom draw routine: either 
for an individual control, or the entire menu.

<p>Note that this is late initialization. If you do a lot of data loading 
or manipulation as a result then this will cause significant delays in menu
transition. Sometimes you can't avoid this, but you should at least be 
aware of it.

<p>This now gives an additional place in which you can initialize data in 
controls. It should be used sparingly, and is best for fixing syncronization 
problems caused by data changes in child menus.

<p>While checking <b>uis.firstdraw</b> offers one method of updating a dormant
menu, Id have also implemented another. The single player game menu in 
<b>ui_splevel.c</b> provides a global function that forces re-initialization,
but deferred until the menu is next drawn. You can track how they did it by
the usage of <b>UI_SPLevelMenu_Reinit()</b> and the variable <b>levelMenuInfo.reinit</b>.
Notice that the use of <b>UI_PopMenu()</b> in this method means that
any info in your menu needs to be saved first.

<p>Use the method you're most comfortable with, or feel is most appropriate.

<br>&nbsp;

<font color="#E07F44"><H4>
3. Ownerdrawn controls
</H4></font>

<p>What happens if you want something other than the seven standard controls?

<p>Well, short of designing a control of your own from scratch, you can use an
existing control and modify how its drawn on screen. You'd best start
by choosing a control closest in behaviour to what you want. For example:
if you want to draw a clickable picture with some text, then you'd probably start with
the <b>menubitmap_s</b> control (it already draws a picture and is clickable).

<p>When each control is initialized you can set the data member
<b>generic.ownerdraw</b> to point to a function under your control.
By default the body of this ownerdraw function takes FULL responsibility
for drawing the control.

<p>The ownerdraw function must be of the following form:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// self points to the control being drawn
// and can be recast to the generic (menucommon_s*)
// or type of control.
// "static" qualifier recommended
static void OwnerDrawFunction( void *self )
</pre></font>

<p>Although there is a <b>QMF_OWNERDRAW</b> flag, it's not actually used. Just
set the function pointer <b>generic.ownerdraw</b> to your
<b>OwnerDrawFunction()</b>.

<br>&nbsp;

<font color="#E07F44"><H4>
3.1 Fleshing out an ownerdrawn control
</H4></font>

<p>If the control can be manipulated by the user then some kind of a "tactile"
feedback is required. This takes the form of a graphical highlight
(indicating one item from a choice), a "pulsing" effect to indicate
focus (that the control is currently selected), or a "greyed out" effect (showing
the control is disabled).

<p>The current state of the control can be accessed by looking at the
state of <b>generic.flags</b>. The following values are tactile and should be
handled as needed:
<p><b>QMF_GRAYED</b>,<b>QMF_PULSE</b>, <b>QMF_PULSEIFFOCUS</b>,
<b>QMF_HIGHLIGHT</b>, and <b>QMF_HIGHLIGHT_IF_FOCUS</b>.

<p>Controls have special behaviour when implementing the paired flags
(PULSE and HIGHLIGHT). It is also possible for a control to "pulse" or "highlight"
when only the permanent "IFFOCUS" flag is set. This happens when the mouse cursor
is over the control. Example 2.2 below shows how to detect this situation.

<p>Most of the default draw functions for each control has been "hidden" by
making the draw function "static". The two exceptions to this are
<b>Bitmap_Draw(menubitmap_s*)</b> and <b>ScrollList_Draw(menulist_s*)</b>,
probably because they're the most complex. Make sure you've initialized your
control so that these draw routines work "as expected".

<p>If you do want to access these "hidden" draw functions then you'll have to remove their
"static" qualifier, and add their declaration to <b>ui_local.h</b> in the section
describing things appearing in <b>ui_qmenu.c</b>.

<p>You can get a lot of good ideas by looking at how the existing 7 controls
are implemented. Take a wander through <b>ui_qmenu.c</b>.

<br>&nbsp;

<font color="#E07F44"><H4>
3.2 Ownerdraw example: Handling state flags
</H4></font>

<p>Although this is code from one of the 7 provided controls, it shows how
most of the state flags can be handled for the drawing of text. When you're
providing your own drawing routines you'll need to decide which of these you'll
be using, and how to implement them.

<p>This <b>menuaction_s</b> control isn't used within the source code
in its default form. It was supposed to provide a simple menu-like text
control, but was replaced by <b>menutext_s</b>.

<p>For the most part we are just converting the <b>QMF_*</b> flags into the
equivalent <b>UI_*</b> flags, choosing the appropriate colours,
and then calling the text drawing function at the right position on-screen.

<p>If you want to see how state flags can be handled for bitmaps then take
a look at the more complicated <b>Bitmap_Draw()</b> in <b>ui_qmenu.c</b>.

<p>The special consideration of the <b>QMF_PULSEIFFOCUS</b> type of
flag is explained below.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
Action_Draw
=================
*/
static void Action_Draw( menuaction_s *a )
{
      int		x, y;
      int		style;
      float*	color;

      style = 0;
      color = menu_text_color;
      if ( a->generic.flags & QMF_GRAYED )
      {
          color = text_color_disabled;
      }
      else if (( a->generic.flags & QMF_PULSEIFFOCUS ) &&
          ( a->generic.parent->cursor ==
          a->generic.menuPosition ))

      {
          color = text_color_highlight;
          style = UI_PULSE;
      }
      else if (( a->generic.flags & QMF_HIGHLIGHT_IF_FOCUS )
          && ( a->generic.parent->cursor ==
          a->generic.menuPosition ))
      {
          color = text_color_highlight;
      }
      else if ( a->generic.flags & QMF_BLINK )
      {
          style = UI_BLINK;
          color = text_color_highlight;
      }

      x = a->generic.x;
      y = a->generic.y;

      UI_DrawString( x, y, a->generic.name,
           UI_LEFT|style, color );

      if ( a->generic.parent->cursor ==
           a->generic.menuPosition )
      {
          // draw cursor
          UI_DrawChar( x - BIGCHAR_WIDTH, y, 13,
               UI_LEFT|UI_BLINK, color);
      }
}
</pre></font>

<p>There are pre-defined colours that correspond to the existing Q3 menu
colour scheme, they can be found in <b>ui_local.h</b>. I'd recommend that
you use them where possible, this makes a colour scheme easier to change.

<p>Notice how the control responds to the <b>QMF_PULSEIFFOCUS</b> flag. It
checks whether the cursor is over that control, and then provides a visual
("tactile") feedback to the user. For completeness it should give
<b>QMF_PULSE</b> the same effect (without checking the cursor).

<p>There is also a function <b>Menu_ItemAtCursor(menuframework_s*)</b>
that returns the current item under the cursor; this can be used in a
similar way, as the following code fragment shows:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// "t" can be any control data structure
menuaction_s* t;

// assign a safe value to "t" before using it

if( Menu_ItemAtCursor( t->generic.parent ) == t ) {
}

// which is identical to this:

if ( t->generic.parent->cursor ==
     t->generic.menuPosition ) {
}
</pre></font>



<br>&nbsp;

<font color="#E07F44"><H4>
3.3 Ownerdraw example: Choose a crosshair
</H4></font>

<p>One of the more involved owner drawn controls, this source code is taken
from <b>ui_preferences.c</b>. The usage of this control actually "mixes and
matches" controls and types... so pay attention.

<p>This is essentially a new
type of control. All the drawing and initialization is done outside the
standard seven controls in <b>ui_qmenu.c</b>.

<p>The effect that we're looking for is a control with named text that draws
the cursor graphic. When clicked upon it cycles through all the types of
cursor available.

<p>The first decision was whether a graphic control is modified to draw text
as well, or a text control is modified to draw graphics too. The "conceptual"
idea is a list that draws a graphic (instead of the text choices), so
<b>menubitmap_s</b> wasn't used.

<p>This leads to the control of choice as <b>menulist_s</b>, since we
are selecting one from a list of many:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct {
      // snipped...
      menulist_s crosshair;
      // snipped...
} preferences_t;

static preferences_t s_preferences;
</pre></font>

<p>So far, so good. What follows is where some of the confusion may arise.

<p>When we look at how the <b>crosshair</b> structure is initialized (below),
we see that it's defined as <b>MTYPE_TEXT</b>. This was done with the
<b>QMF_NODEFAULTINIT</b> flag set too, so we have to set the <b>generic</b> parameters ourselves.
This includes the mouse activated area bounded by <b>generic.top</b>, <b>generic.bottom</b>,
<b>generic.left</b>, and <b>generic.right</b>.

<p>Why do things this way? Well this helps while the page of controls is developed.
At the start you have a standard text control that acts as a
"placeholder" for the final owner draw version. You can chop and change the look
of the page until you're happy, without implementing (and possibly breaking)
the owner draw code. You also don't have to set up or use any part specific to the list
control.

<p>Later, when you move to the owner draw implementation,
you don't trigger any of the <b>menulist_s</b> code (there's
no list of text used, so using <b>MTYPE_TEXT</b> makes sure it's never assumed to
be present). Finally, the <b>crosshair.curvalue</b> variable is available
for storing the crosshair type.

<p>Make sure you understand what we have here: this is essentially a new
type of control. All of the drawing and initialization is done outside the
standard seven controls in <b>ui_qmenu.c</b>. So important an idea that it's
worth the second mention.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
y = 144;
s_preferences.crosshair.generic.type = MTYPE_TEXT;
s_preferences.crosshair.generic.flags =
     QMF_PULSEIFFOCUS|QMF_SMALLFONT|
     QMF_NODEFAULTINIT|QMF_OWNERDRAW;
s_preferences.crosshair.generic.x = PREFERENCES_X_POS;
s_preferences.crosshair.generic.y = y;
s_preferences.crosshair.generic.name = "Crosshair:";
s_preferences.crosshair.generic.callback = Preferences_Event;
s_preferences.crosshair.generic.ownerdraw = Crosshair_Draw;
s_preferences.crosshair.generic.id = ID_CROSSHAIR;
s_preferences.crosshair.generic.top = y - 4;
s_preferences.crosshair.generic.bottom = y + 20;
s_preferences.crosshair.generic.left = PREFERENCES_X_POS -
    ((strlen(s_preferences.crosshair.generic.name)+1)
    * SMALLCHAR_WIDTH);
s_preferences.crosshair.generic.right = PREFERENCES_X_POS + 48;
</pre></font>


<p>Now that we understand what we have here, this is how the control is drawn
on the screen. Some attention is given to whether the control is greyed or has
the focus. This only applies to the text... not the crosshair graphic.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
Crosshair_Draw
=================
*/
static void Crosshair_Draw( void *self ) {
   menulist_s *s;
   float *color;
   int x, y;
   int style;
   qboolean focus;

   s = (menulist_s *)self;
   x = s->generic.x;
   y = s->generic.y;

   style = UI_SMALLFONT;
   focus = (s->generic.parent->cursor ==
      s->generic.menuPosition);

   if ( s->generic.flags & QMF_GRAYED )
      color = text_color_disabled;
   else if ( focus )
   {
      color = text_color_highlight;
      style |= UI_PULSE;
   }
   else if ( s->generic.flags & QMF_BLINK )
   {
      color = text_color_highlight;
      style |= UI_BLINK;
   }
   else
      color = text_color_normal;

   if ( focus )
   {
      // draw cursor
      UI_FillRect( s->generic.left, s->generic.top,
            s->generic.right-s->generic.left+1,
            s->generic.bottom-s->generic.top+1,
            listbar_color );
      UI_DrawChar( x, y, 13, UI_CENTER|UI_BLINK|
            UI_SMALLFONT, color);
   }

   UI_DrawString( x - SMALLCHAR_WIDTH, y, s->generic.name,
      style|UI_RIGHT, color );
   if( !s->curvalue ) {
      return;
   }
   UI_DrawHandlePic( x + SMALLCHAR_WIDTH, y - 4, 24, 24,
      s_preferences.crosshairShader[s->curvalue] );
}
</pre></font>

<p>Notice the use of <b>s->curvalue</b> (in the last line of code)
to decide which crosshair to draw. The following code snippet is from the
event handler for the control. We have to update and wrap <b>curvalue</b>
for the correct behaviour when the control is clicked on. This would be done
for you in a <b>menulist_s</b> correctly identified as
<b>MTYPE_SPINCONTROL</b>.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
static void Preferences_Event( void* ptr, int notification ) {
   if( notification != QM_ACTIVATED ) {
         return;
   }

   switch( ((menucommon_s*)ptr)->id ) {
   case ID_CROSSHAIR:
         s_preferences.crosshair.curvalue++;
         if( s_preferences.crosshair.curvalue == NUM_CROSSHAIRS ) {
              s_preferences.crosshair.curvalue = 0;
         }
         trap_Cvar_SetValue( "cg_drawCrosshair",
              s_preferences.crosshair.curvalue );
         break;

         // code snipped...

   }
}
</pre></font>

<br>&nbsp;


<font color="#E07F44"><H4>
4. Using the status bar
</H4></font>


<p>If a control has any special behaviour, or takes special value(s), then consider
using a statusbar to inform/remind the user. This additional information
about a control will be displayed when the cursor hovers over the control, and makes
use of the <b>generic.statusbar</b> callback function.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
static void StatusBarFunction( void *self )
</pre></font>

<p>The pointer to <b>self</b> indicates the control that is drawing the
status bar. If you don't have access to the source control then
re-cast the pointer to <b>(menucommon_s*)</b> for the type of control in
<b>self->type</b>.

<p>The status bar function is repeatedly called each time the control is drawn
(which is as quickly as your graphics drivers will allow), and only if the cursor is over it;
so you shouldn't set anything permanent. The information drawn is usually
placed at the bottom of the screen.

<p>Use of the status bar function saves on creating a text control, and
also avoids invoking an ownerdrawn version of the control to detect the presence
of the cursor. Naturally, the area of the screen used by the status bar
text should be kept free of other controls.

<br>&nbsp;

<font color="#E07F44"><H4>
4.1 Status bar example
</H4></font>

<p>This example of a statusbar is taken from <b>ui_startserver2.c</b> where
a single player game is setup. It's displayed when the cursor is over the
timelimit or fraglimit controls. In this case the same status bar function is
used for both controls.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
ServerOptions_StatusBar
=================
*/
static void ServerOptions_StatusBar( void* ptr ) {
	UI_DrawString( 320, 440, "0 = NO LIMIT",
          UI_CENTER|UI_SMALLFONT, colorWhite );
}
</pre></font>

<p>The code for initializing the control looks like this:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
s_serveroptions.fraglimit.generic.type = MTYPE_FIELD;
s_serveroptions.fraglimit.generic.name = "Frag Limit:";
s_serveroptions.fraglimit.generic.flags =
     QMF_NUMBERSONLY|QMF_PULSEIFFOCUS|QMF_SMALLFONT;
s_serveroptions.fraglimit.generic.x = OPTIONS_X;
s_serveroptions.fraglimit.generic.y = y;
s_serveroptions.fraglimit.generic.statusbar =
     ServerOptions_StatusBar;
s_serveroptions.fraglimit.field.widthInChars = 3;
s_serveroptions.fraglimit.field.maxchars = 3;
</pre></font>

<br>&nbsp;


<font color="#E07F44"><H4>
5. Designing the menu
</H4></font>

<p>I'm not going to turn this into (much of) a lecture on good design: you don't want to
read that, and I'm not really qualified to give it. What I'll do is point
out a few things that <b>Id</b> have done,
how you can benefit from doing similar things, and that people do take an
impression away with them about good or bad interface design.

<p>'Nuf arm twisting.

<br>&nbsp;

<font color="#E07F44"><H4>
5.1 The good, the bad, and the just plain ugly
</H4></font>

<p>There are several things that jump out about the way <b>Id</b> have designed
their menus. The most obvious thing is that they're relatively uncluttered,
with a fair amount of open space.

<p>Take the two skirmish menu pages that help you setup a single or
multi-player game. They could have been squeezed onto one page... one complicated
and tightly packed page. Instead they've been split up over two pages, with controls
grouped together (and separate from each other) so you can see what's related to what.

<p>The first skirmish page chooses the map and type of game. For team games the second page
will add red/blue options for each of the bots/players. If this were all done
on one page then there'd be the added confusion of these fields vanishing and
re-appearing as the game type was cycled. Not exactly eye candy, now is it?

<p>For pages of controls that follow on from each other, there are always
buttons that take you forward and take you back. The button that takes
you back is in the lower left corner, while the one that takes you
forward is in the bottom right corner. Think of page turning in a book to
see the sense in this. You don't read books? Then think of the forward/back
buttons on your web browser.

<p>Related controls are almost always close together. This gives two benefits:
you show that they are related (duh!), and when they're changed the user needs
to move only a short distance to neighbours. Moving a long distance between
frequently changed controls is a pain in the wrist! You want to save your wrist
something else... right?

<p>When choosing one action makes another control redundant, then that redundant
control is hidden, disabled, or greyed out. This helps the user understand that
something isn't going to do anything. And lets face it, users like you for taking
decisions like that away from them.

<br>&nbsp;

<font color="#E07F44"><H4>
5.2 Back to pencil and paper
</H4></font>

<p>Just a quick tip for those who are contemplating a new menu page full
of controls. I've found that you can design a 640x480 screen of controls on
an A4 page of squared paper (the kind that has squares about 5mmx5mm, you
probably did maths sums in school using paper like this).

<p>If you take each square as 16x16 pixels then the page is just about filled.
The small font gets two characters per square, the standard big font get one char
per square. Screen co-ordinates are then easily and accurately recovered, and you
have a hard copy of what you want the final menu page to look like.

<p>You can move controls around easily, and quickly see what does
and doesn't work. Once you've coded something there's a lot of effort
that might have to go to waste.

<br>&nbsp;

<font color="#E07F44"><H4>
6. Congratulations...
</H4></font>

<p>Phew! If you've got this far then you've read through a lot of stuff about
writing menu code. Thanks for the perseverance. I hope it's given you the infomation
you needed.

<p>If you've followed and understood then you should be able to write exactly
what you need for your mod in the way of menu code. Let me know if there's
anything that needs clarifying, or if I've missed something major.

<p>Cheers!

<p><a href="mailto:hypothermia@planetquake.com"><font color="#FF0000">H</font><font color="#FFFF00">y</font><font color="#CC33CC">p</font><font color="#3333FF">o</font><font color="#FFFFFF">Thermia</font></A>

      <p>
    </td>
  </tr>
</table>
	<!-- END MAIN TABLE -->

  </tr>
</table>
<p>

	<!-- BEGIN BOTTOMHEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article7.shtml"><< Prev</a> |
	Article 8 |
	<a href="article9.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTTOM HEIRARCHY -->

</body>
</html>
