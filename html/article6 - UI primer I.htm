<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257993078"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257993078"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257993078"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257993078"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article5.shtml"><< Prev</a> |
	Article 6 |
	<a href="article7.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>

   <!-- BEGIN LEFT NAVBAR MENU -->
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->


	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top>
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
ARTICLE 6 - UI Menu Primer I
</font></b><br>by <a href="mailto:hypothermia@planetquake.com"><font color="#FF0000">H</font><font color="#FFFF00">y</font><font color="#CC33CC">p</font><font color="#3333FF">o</font><font color="#FFFFFF">Thermia</font></A></center>

<p>We're going to take a look at the menu system that Quake 3 uses. If you've already
written programs for a windows based Operating System (Windows, MacOS etc.) then you'll find the
way that Id have written their menu system to be very familiar. Previous experience
of "GUI" (graphical user interface) programming isn't required however.

<p>These two primer articles should act as both introduction and reference on
creating menus, hopefully allowing you to dive in and make the menu tweaks that you need.

<p>The first primer (you're reading it!) describes how the menu system works, some
of the do's and don'ts of programming using the menu system, and most of the details on how
to setup a menu from scratch. After reading this first primer you should be able to
look at the menu source code with understanding.

<p>The <a href="article7.shtml">second part</a> provides a reference for all the
controls you can use in a menu or page of controls, helping
you understand how to get the most from them. In
<a href="article8.shtml">the third part</a> of this primer
we'll cover some of the more advanced things you can do with menus,
and talk about good menu design as well.
<br>&nbsp;

<font color="#E07F44"><H4>
1. Overview
</H4></font>

<p>The menu code is built into the user interface ("ui") source code, and can't be accessed
directly from the client game code ("cgame"), or the server game code ("game"). This isn't
really surprising as the server code can be running on a remote machine, and the client code
is concerned with the playing of the game itself.

<p>With the game running on a virtual machine on either Windows, Mac, or Linux,
then we can't have OS specific menu code. Id wrote their own menu system, the source
code for which is in <b>ui_qmenu.c</b>, with the associated data structures and defined
constants in <b>ui_local.h</b>. You can have a look there if something isn't covered
in this article, or if you just want to see the "nuts and bolts".

<p>The menu systems actually rolls together two "types" of menu. The first is a "traditional"
vertical list of options where you choose an action or get a new menu.
You also have a page of controls that can be twiddled with in any order until
it's set up as you want. Both types are supported, and are set up in the same way.

<p>Fortunately there are many examples throughout the <b>ui</b> code of how to use
individual controls, so if you want to copy something neat that's already in a menu
then you'll find most of the hard work already done for you.
<br>&nbsp;


<font color="#E07F44"><H4>
2. The basics
</H4></font>

<p>All menus behave in the same way: consisting of a list of passive and active controls
that are drawn on the screen. The "passive" controls are things like menu art or pictures,
while "active" controls can be selected, highlighted, or changed in value using the keyboard
or mouse.

<p>The menu is redrawn again and again, as quickly as your graphics drivers
will allow. Any changes made to a control will be seen immediately (without having
to ask for a screen redraw each time): so you can't draw something once and
expect it to remain on screen.

<p>To avoid nasty screen sizing problems all screen co-ordinates are based on a 640x480
resolution, with the origin (0,0) at the top left of the screen. The resizing is
done behind the scenes: fonts will scale automatically, and controls will
retain their relative positions.

<p>When something happens to a control an "event" is generated. This is an
opportunity for you to handle how a control behaves. The event is passed back to you
in the form of a message using a "callback" function. A callback function is forced
to use a specific combination of arguments: otherwise the code will crash. Don't worry if
you're not sure, examples will follow.

<p>When you're creating a menu from scratch there are several steps you need to take.
We'll look at each of these in more detail in the following sections:

<ul>
<li>Create static data for each control</li>
<li>Cache all graphical and sound data</li>
<li>Initialize menu controls</li>
<li>Display the menu</li>
<li>Process events on individual controls</li>
<li>Tie up loose ends</li>
</ul>

<p>If you're starting from scratch then you'll need to include the
<b>ui_local.h</b> header file to get access to the constants and data structures
used in a menu.

<br>&nbsp;

<font color="#E07F44"><H4>
3. Create static data for each control
</H4></font>

<p>Each control needs to have some data asociated with it: information on
its current position, its value, and how it will be drawn. As there's no malloc
system available we have to allocate space for this statically.

<p>There are 7 types of control provided for you, listed below. More details
on each control are given in <a href="article7.shtml">the second part of this primer</a>.

<ul>
<li>menufield_s</li>
<li>menuslider_s</li>
<li>menulist_s</li>
<li>menuaction_s</li>
<li>menuradiobutton_s</li>
<li>menubitmap_s</li>
<li>menutext_s</li>
</ul>

<p>The best way to organize this static data is to create a struct that
contains all the controls a menu uses. You get the benefit of putting
all the information in one place, making it easier to initialize.
This data structure is then created as a static variable, limiting direct
access to the data to that particular source code file.

<p>You can also put data into this structure that is used by the menu. Sound effects,
useful intermediate values, and graphics can be organized in this way.

<p>Each menu also needs a <b>menuframework_s</b> data structure. This acts as a unique
identifier and there MUST be one for each menu. Only one <b>menuframework_s</b> can be
active at any time. We'll see how it's used when we come to initialize the menu controls.

<p>This example is taken from <b>ui_spskill.c</b>:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct {
   // a menuframework_s is required for each menu
   menuframework_s	menu;

   menubitmap_s	art_frame;
   menutext_s		art_banner;

   menutext_s		item_baby;
   menutext_s		item_easy;
   menutext_s		item_medium;
   menutext_s		item_hard;
   menutext_s		item_nightmare;

   menubitmap_s	art_skillPic;
   menubitmap_s	item_back;
   menubitmap_s	item_fight;

   const char		*arenaInfo;
   qhandle_t		skillpics[5];
   sfxHandle_t		nightmareSound;
   sfxHandle_t		silenceSound;
} skillMenuInfo_t;

static skillMenuInfo_t	skillMenuInfo;
</pre></font>

<br>&nbsp;

<font color="#E07F44"><H4>
4. Caching all graphical and sound data
</H4></font>

<p>If you use any graphics or sounds in your menu (background graphics, map pictures, audio fx etc.)
then you'll need to cache them before initializing the menu. This ensures
they're in memory for usage, and minimizes disk access while the player is using
the menu. It's especially important if you create graphics for your menu rather than
using those provided by Id.

<p>It is better to put all the caching into it's own function. When Quake3 starts up
it trys to cache all graphics into memory by calling these caching functions. We'll
see later when we're <a href="#loose_ends">tying up some loose ends</a>
why we're doing this.

<p>This example shows how graphics and a sound effect are cached, again taken from
<b>ui_spskill.c</b>:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
#define ART_FRAME   "menu/art/cut_frame"
#define ART_MAP_COMPLETE1   "menu/art/level_complete1"

/*
=================
UI_SPSkillMenu_Cache
=================
*/
void UI_SPSkillMenu_Cache( void ) {
	trap_R_RegisterShaderNoMip( ART_FRAME );
     // code snipped...
	skillMenuInfo.skillpics[0] =
          trap_R_RegisterShaderNoMip( ART_MAP_COMPLETE1 );
     // code snipped...
	skillMenuInfo.nightmareSound =
          trap_S_RegisterSound( "sound/misc/nightmare.wav" );
     // code snipped...
}
</pre></font>

<p>The function <b>trap_R_RegisterShaderNoMip()</b> registers the graphic, and also
returns a unique handle/identifier called a shader. The graphics controls can draw either
a named graphic (as in ART_FRAME, used when the graphic is fixed) or a shader (when the
graphics can change). More on this when the <b>bitmap_s</b> control data structure
is explained later.

<p>By default the graphics files are JPEGs and a ".jpg" extension is added
(so <b>ART_FRAME</b> is actually <b>cut_frame.jpg</b>),
but you can also use TARGA files so long as you add the ".tga" extension. These
graphics and sounds are stored in the <b>pk3</b> files in <b>baseq3</b>. They have an internal
directory structure that must be used, otherwise the files won't be found.

<p>Sounds are cached in a similar fashion. They also return a unique identifying handle,
stored as a <b>sfxHandle_t</b>. This sound can be played by a call into
<b>trap_S_StartLocalSound()</b>.
<br>&nbsp;

<font color="#E07F44"><H4>
5. Initalizing menu controls
</H4></font>

<p>Initialization needs to be done each time the menu is prepared for display.
All of this can (and preferably should) be done in one function.

<p>It breaks up into three steps:

<ol>
<li>setting the <b>menuframework_s</b> according to the type of menu</li>
<li>setting the initial values of each control in the menu</li>
<li>registering each control in the <b>menuframework_s</b></li>
</ol>

<br>&nbsp;

<table border="1" width="80%" align=center>
<tr><td>
<font face="Verdana, Arial" size="2" color="#eeeeee">
<p><b>IMPORTANT:</b> The static data for the controls should be set to zero with a <b>memset()</b>
so that reasonable default values are setup. You will get unexpected behaviour
if you don't do this each time you initialize the controls.

<p>Using the earlier example struct it's as easy as:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
memset(&skillMenuInfo, 0, sizeof(skillMenuInfo_t));
</pre></font>

<p>Take a look at <b>UI_SPSkillMenu_Init()</b> in <b>ui_spskill.c</b> to see this
in action.
</td></tr>
</table>

<br>&nbsp;


<font color="#E07F44"><H4>
5.1. Initializing menu controls: menuframework_s
</H4></font>


<p>The <nobr><b>menuframework_s menu</b></nobr> structure is initialized by setting
the three values <b>menu.fullscreen</b>, <b>menu.wrapAround</b>, and <b>menu.draw</b>.

<p><font color="#E07F44"><b>menu.fullscreen</b> (you must set this value)</font> <br>
Set this to <b>qtrue</b> if you want the menu to take full control of the screen. Any game
being played will be paused in the client. You should also use this for a menu like the
main intro where no game is being played at all.

<p>When set to <b>qfalse</b> the background action will continue. Use this if the menu
will be displayed while playing a multiplayer game. The player will stand still and the
action will continue in the background while the menu is used.

<p>If your menu needs a dual role (pauses action in single player and continues in multiplayer)
then the following code fragment will be useful:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
uiClientState_t	cstate;

trap_GetClientState( &cstate );
if ( cstate.connState >= CA_CONNECTED ) {
    s_confirm.menu.fullscreen = qfalse;
}
else {
    s_confirm.menu.fullscreen = qtrue;
}
</pre></font>

Change <b>s_confirm</b> to match your struct variable name.

<p><font color="#E07F44"><b>menu.wrapAround</b> (you must set this value)</font> <br>
If set to <b>qtrue</b> the menu will not appear to have a "first" or "last" item
when using keyboard navigation. Use this value for menus that are like
"traditional" lists, usually when up/down is a sensible way to move between items.
It is important that the controls are registered in the order in which the
cursor will move between them.

<p>When set to <b>qfalse</b> the keyboard navigation will not move beyond the first or last item
on the list. Use this when the "menu" is more like a page of controls than a list.

<p><font color="#E07F44"><b>menu.draw</b> (set only if required)</font> <br>
A pointer to a function that allows you to draw additional items without
adding (and initializing) controls. Any graphics that you draw here should also be cached.
This is covered in more detail in the <a href="article7.shtml">second part of this primer</a>.

<br>&nbsp;

<font color="#E07F44"><H4>
5.2. Initializing menu controls: individual controls
</H4></font>

<p>Individual controls are setup according to their type. Each control has
a core set of data that must be initialized, refered to as the "generic" data.
In some cases the data has a behaviour specific to that control.

<p>Each control structure includes the generic data as the first item, so
we are guaranteed that a pointer to the control can always be re-cast as a
pointer to the generic data. This example is typical of all the controls:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
   menucommon_s generic;  // always first
   char* string;
   int style;
   float* color;
} menutext_s;
</pre></font>

<p>The generic data structure looks like this:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
   int type;
   const char *name;
   int id;
   int x, y;
   int left;
   int top;
   int right;
   int bottom;
   menuframework_s *parent;
   int menuPosition;
   unsigned flags;

   void (*callback)( void *self, int event );
   void (*statusbar)( void *self );
   void (*ownerdraw)( void *self );
} menucommon_s;
</pre></font>

<p>At the very least you will have to initialize the following data:

<ul>
<li>type of control (<b>generic.type</b>)</li>
<li>position on screen (<b>generic.x</b>, <b>generic.y</b>)</li>
<li>behaviour flags, QMF_* (<b>generic.flags</b>)</li>
<li>some content, specific to the control</li>
</ul>

<p>If it can be interacted with, or changed in value, then the following also
need to be set:

<ul>
<li>pointer to a callback function that handles behaviour (<b>generic.callback</b>)</li>
<li>an identifier for the control (<b>generic.id</b>)</li>
</ul>

<p>For each control to be uniquely identified then the <b>generic.callback</b>
and <b>generic.id</b> <i>combination</i> needs to be unique. You can have a separate
callback function for each control, or use one callback function with unique values of
<b>id</b> for each control. Or a combination of the two, but never the same <b>id</b> for two controls using the
same <b>callback</b> function. This opens the possibility of the <b>id</b> value being
used for something else (like an array index).

<p>The <b>generic.callback</b> function must take the following form:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// choose an appropriate function name
// "ptr" is a pointer to the control, re-cast to
// (menucommon_s*) for access to the generic data
static void FunctionName_Event( void *ptr, int event )
</pre></font>

<p>Finally, the following can be set to enhance or change the behaviour
of the control:

<ul>
<li>a callback function that draws the control (<b>generic.ownerdraw</b>)</li>
<li>a callback function for modifying a statusbar (<b>generic.statusbar</b>)</li>
</ul>

<p>Use of these values are explained in more detail in
<a href="article7.shtml">the second part of this primer</a>.

<p>The following is an example of how a data structure is initialized, taken
from <b>ui_spskill.c</b>. The control type being filled is a
<b>menutext_s</b>, and there's a function <b>UI_SPSkillMenu_SkillEvent</b>
that handles what happens when the control is selected.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
#define ID_BABY 10

skillMenuInfo.item_baby.generic.type = MTYPE_PTEXT;
skillMenuInfo.item_baby.generic.flags =
     QMF_CENTER_JUSTIFY|QMF_PULSEIFFOCUS;
skillMenuInfo.item_baby.generic.x = 320;
skillMenuInfo.item_baby.generic.y = 170;
skillMenuInfo.item_baby.generic.callback =
     UI_SPSkillMenu_SkillEvent;
skillMenuInfo.item_baby.generic.id = ID_BABY;
skillMenuInfo.item_baby.string = "I Can Win";
skillMenuInfo.item_baby.color = color_red;
skillMenuInfo.item_baby.style = UI_CENTER;
</pre></font>

<p><br>&nbsp;

<font color="#E07F44"><H4>
5.3. Initializing menu controls, registering controls
</H4></font>

<p>Registering controls is the easiest part of the coding. You need to make a
one line function call to <b>Menu_AddItem()</b> for each control, refering to the unique
<b>menuframework_s</b> variable for your menu as well.

<p>If keyboard navigation is important (as in a "traditional" menu list) then
you have to register menu items in the order of navigation.

<p>This example shows <b>item_baby</b> being registered into the skill menu (again
taken from <b>ui_spskill.c</b>):

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
Menu_AddItem( &skillMenuInfo.menu, ( void * )&skillMenuInfo.item_baby );
</pre></font>

<br>&nbsp;


<font color="#E07F44"><H4>
6. Displaying the menu
</H4></font>

<p>Surprisingly there is very little you have to do to get the menu displayed.
Once the menu is fully initialized you just need to call <b>UI_PushMenu()</b>
using a pointer to your <b>menuframework_s</b>. The menu system then takes care of
setting up the screen, drawing the menu, and making sure that events are passed
back through the callback functions for you to act upon. You can push menus to
a maximum depth of <b>MAX_MENUDEPTH</b>, which by default is 8.


<p>When you're closing the menu down all you need to do is call
<b>UI_PopMenu()</b> and the previous menu will be displayed and given control.
This action is usually associated with a control that you put in the menu
(like a back button). Pressing the ESC key also has the same effect.

<p>If you need to close all menus (usually because you're in a sub-menu and "popping"
the menu isn't appropriate) then call <b>UI_ForceMenuOff()</b> instead. Use carefully because
you'll not have an active menu system anymore. Most useful when you're overlaying a menu
on a game in progress and need to close from a sub-menu.

<p>This code shows how straightforward it is to get the menu displayed.
Initialization by <b>UI_SPSkillMenu_Init()</b> encompasses all the graphics caching
and control init that has been previously discussed.

<p>If the menu is created through actions in another <b>ui</b> source file
then we have to add a function prototype to <b>ui_local.h</b>, and so we don't
use <b>static</b> functions.

<p>Taken from <b>ui_spskill.c</b> (I've added comments):

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
void UI_SPSkillMenu( const char *arenaInfo ) {
   // initialization
   UI_SPSkillMenu_Init();
   skillMenuInfo.arenaInfo = arenaInfo;

   // menu registered for displayed
   UI_PushMenu( &skillMenuInfo.menu );

   // force this menu item to be selected
   // and the default action
   Menu_SetCursorToItem( &skillMenuInfo.menu,
        &skillMenuInfo.item_fight );
}
</pre></font>

<br>&nbsp;

<font color="#E07F44"><H4>
7. Event processing
</H4></font>

<p>With all the hard work of getting your menu system set up you now have to
breathe life into it, make it behave as the user might expect; in other words "connecting
all the dots". This is done by handling the message events generated by
each control.

<p>For each control the events are passed through the function assigned to
<b>generic.callback</b>. This function has two arguments: a <b>void*</b> pointing
to the control generating the event, and an <b>int</b> describing what the event is.

<p>We can obtain the <b>generic.id</b> of the control by recasting the void pointer as a pointer to
the "generic" <b>menucommon_s</b> data struct that all controls use. We'll see this
in the example below.

<p>There are three possible events that can be generated: <b>QM_ACTIVATED</b>,
<b>QM_GOTFOCUS</b>, and <b>QM_LOSTFOCUS</b>. The first occurs every time there
is a change in the value of a control. The last two occur when a control gets or
loses "focus" (usually when it starts or stops "pulsing" as the current control).
For the most part you'll only use the <b>QM_ACTIVATED</b> event message.

<p>You can have as many event callback functions for your menu as you want. If you use
the <b>generic.id</b> of a control then it must be unique for that callback function. This
opens up the possibility of using the <b>generic.id</b> for another purpose (like an index
to an array of data).

<p>The example code comes from <b>ui_demo2.c</b>, a menu showing all the
recorded demos that can be played back (additional comments are my own).

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
===============
Demos_MenuEvent
===============
*/
static void Demos_MenuEvent( void *ptr, int event ) {
   // ignore QM_GOTFOCUS and QM_LOSTFOCUS
   if( event != QM_ACTIVATED ) {
       return;
   }
   switch( ((menucommon_s*)ptr)->id )  // get the id for the control
   {
      case ID_GO:
         UI_ForceMenuOff ();  // closes all open menus
         trap_Cmd_ExecuteText( EXEC_APPEND, va( "demo %s.dm3\n",
            s_demos.list.itemnames[s_demos.list.curvalue] ) );
         break;
      case ID_BACK:
         UI_PopMenu();  // returns to previous menu
         break;
      case ID_LEFT:
         ScrollList_Key( &s_demos.list, K_LEFTARROW );
         break;
      case ID_RIGHT:
         ScrollList_Key( &s_demos.list, K_RIGHTARROW );
         break;
   }
}
</pre></font>

<br>&nbsp;

<a name="loose_ends"></a><font color="#E07F44"><H4>
8. Tying up loose ends
</H4></font>

<p>There are surprisingly few loose ends to tie up. The lions share of the coding
effort is in initializing the menu and implementing the functionality. The few things
that you do need to look at are all outside the single source file you're editing.

<p>When creating a menu you have to cache the graphics. Quake3 tries to load all of these
graphics into memory during startup, so it's best if you put the caching into
a separate function (and not give it <b>static</b> scope). Find the function
<b>UI_Cache_f()</b> in <b>ui_atoms.c</b> and add a call to your caching function
here. You should also add your function prototype to <b>ui_local.h</b> as in
the following example:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
//
// ui_video.c
//
extern void UI_GraphicsOptionsMenu( void );
extern void GraphicsOptions_Cache( void );
extern void DriverInfo_Cache( void );
</pre></font>

<p>Notice that the function that gets the ball rolling by setting up the menu
(initializing it and making the call to <b>UI_PushMenu()</b>) is not static either.
The prototype should also be placed in <b>ui_local.h</b> so that other
source code files can "see" the function and use it to create the menu.


<a name="loose_ends"></a><font color="#E07F44"><H4>
9. To be continued...
</H4></font>

<p>This is the first part of the menu primer completed. Congratulations on
reaching this far! You should now be able to look at any piece of menu code
in the <b>ui</b>, understand how the menu is being setup, and how its behaviour
is controlled.

<p>The <a href="article7.shtml">second part of this primer</a> provides a reference
to all of the controls that are available for you to use. Most of the constant
values that you might need to use are also covered.


<p>The <a href="article8.shtml">third part</a> moves onto some more advanced topics such as ownerdrawn
controls and statusbars. There are some design tips for good menus as well.


      <p>
    </td>
  </tr>
</table>
	<!-- END MAIN TABLE -->

  </tr>
</table>
<p>

	<!-- BEGIN BOTTOMHEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article5.shtml"><< Prev</a> |
	Article 6 |
	<a href="article7.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTTOM HEIRARCHY -->

</body>
</html>
