<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0055)http://quakestyle.telefragged.com/quake3/tutorial14.htm -->
<HTML><HEAD><TITLE>Quake Style - Quake 3 Tutorials - Weapon Mods - Mega-Railgun</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<STYLE type=text/css>BODY {
	FONT-FAMILY: verdana
}
TABLE {
	FONT-FAMILY: verdana
}
TR {
	FONT-FAMILY: verdana
}
TD {
	FONT-FAMILY: verdana
}
INPUT {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
TEXTAREA {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
SELECT {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
OPTION {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
PRE {
	FONT-FAMILY: verdana; FONT-WEIGHT: bold
}
A {
	COLOR: #00ff00
}
A:hover {
	COLOR: white; TEXT-DECORATION: none
}
</STYLE>

<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY bgColor=black text=#ffff80><FONT size=1>
<DIV align=right>
<TABLE border=0 cellSpacing=0 cellborder="0">
  <TBODY>
  <TR>
    <TD align=middle><FONT size=1><B><FONT color=white>Quake Style - Quake 3 
      Tutorials</FONT><BR><FONT color=#bbcc77>Weapon Mods </FONT><FONT 
      color=#ff8000>- Mega-Railgun</FONT><BR>You can't hide behind walls no 
      more! </B></FONT></TD></TR></TBODY></TABLE></DIV><BR><!-- START TUTORIAL -->This 
has been rather fun to play around with! It's fairly easy, too. <BR><BR>Open up 
g_weapons.c and replace the entire weapon_railgun_fire function with this one: 
<BR>(change the #defines to anything you may find more appropriate, too) <BR><PRE><FONT size=1><FONT color=#00ffff>
/*
=================
weapon_railgun_fire
=================
*/
#define MAX_RAIL_HITS	4	// max people the rail can hit
#define MAX_RAIL_SHOTS	2	// ie. how many times through walls
#define RAIL_WALL_MAX	96	// how big a wall can be before it won't go through

void weapon_railgun_fire (gentity_t *ent, int count)
{
	vec3_t	end, oldmuzzle;
	trace_t	trace, trace2;
	gentity_t	*tent;
	gentity_t	*traceEnt;
	int			damage;
	int			radiusDamage;
	int			i;
	int			hits;
	int			unlinked;
	gentity_t	*unlinkedEntities[MAX_RAIL_HITS];

	count++;

	if (count &gt; MAX_RAIL_SHOTS)
	{
		// too many shots through walls!
		return;
	}

	damage = 100 * s_quadFactor;
	radiusDamage = 30 * s_quadFactor;

	VectorMA (muzzle, 8192, forward, end);

	// trace only against the solids, so the railgun will go through people
	unlinked = 0;
	hits = 0;
	do {
		trap_Trace (&amp;trace, muzzle, NULL, NULL, end, ent-&gt;s.number, MASK_SHOT );
		if ( trace.entityNum &gt;= ENTITYNUM_MAX_NORMAL ) {
			break;
		}
		traceEnt = &amp;g_entities[ trace.entityNum ];
		if ( traceEnt-&gt;takedamage )
		{
			if( LogAccuracyHit( traceEnt, ent ) )
			{
				hits++;
			}
			G_Damage (traceEnt, ent, ent, forward, trace.endpos, damage, 0, MOD_RAILGUN);
		}
		if ( trace.contents &amp; CONTENTS_SOLID ) {
			break;		// we hit something solid enough to stop the beam
		}
		// unlink this entity, so the next trace will go past it
		trap_UnlinkEntity( traceEnt );
		unlinkedEntities[unlinked] = traceEnt;
		unlinked++;
	} while ( unlinked &lt; MAX_RAIL_HITS );

	// link back in any entities we unlinked
	for ( i = 0; i &lt; unlinked; i++ ) {
		trap_LinkEntity( unlinkedEntities[i] );
	}

	// the final trace endpos will be the terminal point of the rail trail

	// snap the endpos to integers to save net bandwidth, but nudged towards the line
	SnapVectorTowards( trace.endpos, muzzle );

	// send railgun beam effect
	tent = G_TempEntity( trace.endpos, EV_RAILTRAIL );

	// set player number for custom colors on the railtrail
	tent-&gt;s.clientNum = ent-&gt;s.clientNum;

	VectorCopy( muzzle, tent-&gt;s.origin2 );
	// move origin a bit to come closer to the drawn gun muzzle
	VectorMA( tent-&gt;s.origin2, 4, right, tent-&gt;s.origin2 );
	VectorMA( tent-&gt;s.origin2, -1, up, tent-&gt;s.origin2 );

	// no explosion at end if SURF_NOIMPACT, but still make the trail
	if ( trace.surfaceFlags &amp; SURF_NOIMPACT ) {
		tent-&gt;s.eventParm = 255;	// don't make the explosion at the end
	} else {
		tent-&gt;s.eventParm = DirToByte( trace.plane.normal );
	}
	tent-&gt;s.clientNum = ent-&gt;s.clientNum;

	// give the shooter a reward sound if they have made two railgun hits in a row
	if ( hits == 0 )
	{
		// complete miss
		ent-&gt;client-&gt;accurateCount = 0;
	} else {
		// check for "impressive" reward sound
		ent-&gt;client-&gt;accurateCount += hits;
		if ( ent-&gt;client-&gt;accurateCount &gt;= 2 )
		{
			ent-&gt;client-&gt;accurateCount -= 2;
			ent-&gt;client-&gt;ps.persistant[PERS_REWARD_COUNT]++;
			ent-&gt;client-&gt;ps.persistant[PERS_REWARD] = REWARD_IMPRESSIVE;
			ent-&gt;client-&gt;ps.persistant[PERS_IMPRESSIVE_COUNT]++;
			// add the sprite over the player's head
			ent-&gt;client-&gt;ps.eFlags &amp;= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET );
			ent-&gt;client-&gt;ps.eFlags |= EF_AWARD_IMPRESSIVE;
			ent-&gt;client-&gt;rewardTime = level.time + REWARD_SPRITE_TIME;
		}
		ent-&gt;client-&gt;ps.persistant[PERS_ACCURACY_HITS]++;
	}

	// prepare for firing through the wall
	VectorCopy (muzzle, oldmuzzle);
	VectorCopy (trace.endpos, muzzle);
	VectorMA (muzzle, RAIL_WALL_MAX, forward, muzzle);                

	if ( !( trap_PointContents( muzzle, -1 ) &amp; CONTENTS_SOLID ) )
	{
		trap_Trace (&amp;trace2, muzzle, NULL, NULL, trace.endpos, ent-&gt;s.number, MASK_SHOT );
		VectorCopy (trace2.endpos, muzzle);

		weapon_railgun_fire( ent, count );
	}

	VectorCopy (oldmuzzle, muzzle);
}
</FONT>
</FONT></PRE><BR>Only one more line to change now. Scroll down a bit further, 
and edit the FireWeapon function. All we need to do here is make sure an inital 
value of 0 railgun shots (ie. through walls) is passed to weapon_railgun_fire. 
Add in the <FONT color=#00ffff><B>blue code</FONT></B> and take out the <FONT 
color=#ff00ff><B>old code</FONT></B>: <BR><PRE><FONT size=1>
/*
===============
FireWeapon
===============
*/
void FireWeapon( gentity_t *ent ) {
	if (ent-&gt;client-&gt;ps.powerups[PW_QUAD] ) {
		s_quadFactor = g_quadfactor.value;
	} else {
		s_quadFactor = 1;
	}

	// track shots taken for accuracy tracking.  Grapple is not a weapon and gauntet is just not tracked
	if( ent-&gt;s.weapon != WP_GRAPPLING_HOOK &amp;&amp; ent-&gt;s.weapon != WP_GAUNTLET ) {
		ent-&gt;client-&gt;ps.persistant[PERS_ACCURACY_SHOTS]++;
	}

	// set aiming directions
	AngleVectors (ent-&gt;client-&gt;ps.viewangles, forward, right, up);

	CalcMuzzlePoint ( ent, forward, right, up, muzzle );

	// fire the specific weapon
	switch( ent-&gt;s.weapon ) {
	case WP_GAUNTLET:
		Weapon_Gauntlet( ent );
		break;
	case WP_LIGHTNING:
		Weapon_LightningFire( ent );
		break;
	case WP_SHOTGUN:
		weapon_supershotgun_fire( ent );
		break;
	case WP_MACHINEGUN:
		if ( g_gametype.integer != GT_TEAM ) {
			Bullet_Fire( ent, MACHINEGUN_SPREAD, MACHINEGUN_DAMAGE );
		} else {
			Bullet_Fire( ent, MACHINEGUN_SPREAD, MACHINEGUN_TEAM_DAMAGE );
		}
		break;
	case WP_GRENADE_LAUNCHER:
		weapon_grenadelauncher_fire( ent );
		break;
	case WP_ROCKET_LAUNCHER:
		Weapon_RocketLauncher_Fire( ent );
		break;
	case WP_PLASMAGUN:
		Weapon_Plasmagun_Fire( ent );
		break;
	case WP_RAILGUN:
		<FONT color=#ff00ff>weapon_railgun_fire( ent );</FONT>
		<FONT color=#00ffff>weapon_railgun_fire( ent, 0 );</FONT>
		break;
	case WP_BFG:
		BFG_Fire( ent );
		break;
	case WP_GRAPPLING_HOOK:
		Weapon_GrapplingHook_Fire( ent );
		break;
	default:
// FIXME		G_Error( "Bad ent-&gt;s.weapon" );
		break;
	}
}
</FONT></PRE><BR>Well, have fun gibbing things through those thin Quake walls :) 
<!--- END TUTORIAL ---><BR><BR><FONT color=#ff8000><B>-- Credits:</B></FONT> 
<BR>&nbsp;&nbsp; Tutorial by <A 
href="mailto:samthorogood@yahoo.com"><B>(nobody)</B></A> <BR>&nbsp;&nbsp; Return 
to <A href="http://quakestyle.telefragged.com/tuts.shtml"><B>QS 
Tutorials</B></A> <BR><BR><FONT color=#ff8000><B>-- Important:</B></FONT> 
<BR>&nbsp;&nbsp; If you do use something from QuakeStyle in your mod, please 
give us credit. <BR>&nbsp;&nbsp; Our code is copyrighted, but we give permission 
to everyone to use it in any way they see fit, as long as we are recognized. 
</FONT></BODY></HTML>
