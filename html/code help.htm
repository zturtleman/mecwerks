<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0061)http://www.planetquake.com/code3arena/articles/article3.shtml -->
<HTML><HEAD><TITLE>Code3Arena</TITLE>
<META content="text/html; charset=iso-8859-1" http-equiv=Content-Type>
<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY background="code help_files/bg.gif" link=#c05f00 text=white vLink=#d16545><!-- BEGIN BANNER AD TABLE -->
<TABLE align=center background="code help_files/bg.gif" border=0 cellPadding=5 
cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD align=middle vAlign=top width="100%">
      <CENTER><A 
      href="http://adclick.gamespy.com/cgi-bin/adclick.exe/CID=00001a1f346ae9d200000000/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES" 
      target=_top><IMG alt="FIND OUT WHY UT OWNS!" border=0 
      src="code help_files/GT_utrl468x60_3_Jan00.gif"></A></CENTER></TD></TR></TBODY></TABLE><!-- END BANNER AD TABLE --><BR><!-- BEGIN LOGO IMAGE TABLE -->
<TABLE align=center bgColor=#000000 border=1 cellPadding=0 cellSpacing=0 
width="100%">
  <TBODY>
  <TR>
    <TD align=middle><IMG alt=Code3Arena border=0 height=150 
      src="code help_files/logo.gif" width=550> </TD></TR></TBODY></TABLE><!-- END LOGO IMAGE TABLE -->
<P><!-- BEGIN MAIN TABLE HERE-->
<TABLE align=center bgColor=#4b0202 border=0 cellPadding=0 cellSpacing=0 
width="100%">
  <TBODY>
  <TR><!-- BEGIN LEFT NAVBAR MENU *** REMOVED *** --><!-- BEGIN DIVIDER *** REMOVED *** --><!-- MAIN TEXT AREA -->
    <TD bgColor=#000000 vAlign=top>
      <TABLE bgColor=#000000 border=0 cellPadding=15 cellSpacing=10 width="100%" 
      valign="top">
        <TBODY>
        <TR>
          <TD vAlign=top><FONT color=#eeeeee face="Verdana, Arial" size=2>
            <CENTER><FONT color=#c05f00 size=5><B>ARTICLE 3 - Getting the most 
            from Quake3 C</B> </FONT><BR>by <A 
            href="mailto:quake3@eudoxus.demon.co.uk"><FONT 
            color=#ff0000>H</FONT><FONT color=#ffff00>y</FONT><FONT 
            color=#cc33cc>p</FONT><FONT color=#3333ff>o</FONT><FONT 
            color=#ffffff>Thermia</FONT></A></CENTER>
            <P>
            <P>This article is intended to help you get oriented on the Quake3 
            source code. Most of what is written here should already be known to 
            experienced and capable programmers. 
            <P>The Quake3 source is written so it will compile using ANSI C. 
            This is of great benefit to the mod developer community because 
            there are already excellent tools out there aimed at the 
            professional coder. However: there is no full implementation of the 
            standard library. 
            <P>There's too much code to provide an account of what everything 
            does. However, articles and tutorials here at Code3Arena should help 
            you get oriented on some more specific areas. 
            <P>You'll also find that many of the comments I've made are a matter 
            of personal style. There is no 'best' coding style in C, only flame 
            wars about it. There are, however, ways you can help yourself write 
            code that's easier to understand, debug, and change at a later date. 

            <P>There are some links to useful resources at the end of the page. 
            <BR>&nbsp; <FONT color=#e07f44>
            <H4>Getting started</H4></FONT>
            <P>The first and most important thing is to be able to compile the 
            code using your compiler and header files. If you've got Microsoft 
            Visual C++ then just open up the project and do a test compile. 
            You're up and running already. 
            <P>For those that have another compiler you might have to do some 
            extra work. I've already written a tutorial ("Compiling without 
            Microsoft Visual C++")that should get you off the ground. Don't 
            forget to check the Code3Arena downloads for solutions others have 
            already prepared for your compiler/platform. 
            <P>Now you have the ability to build the code, we'll start taking a 
            more detailed look. <BR>&nbsp; <FONT color=#e07f44>
            <H4>Program structure</H4></FONT>
            <P>The game code is split into three basic modules, source/ui, 
            source/game and source/cgame. Each of these contains the code for 
            the user interface (menus and stuff), the running of a game server, 
            and the display of the information from the server on your (client) 
            machine, respectively. 
            <P>Note that the game server (game) and client (cgame) are separate. 
            Both are required to play the game, but only the client <B>needs</B> 
            to be running on your machine. The server can run on a remote 
            machine (when you make an Internet connection) or on your own 
            machine (when you play single player against the bots). 
            <P>It's important to understand this model, as it dictates where you 
            need to make modifications. Trying to place a menu in the server 
            code (game) just doesn't make sense. At the very least you wouldn't 
            be able to use this menu while playing online. 
            <P>Each of these modules runs independently, and there are only 
            limited forms of communication between modules. <BR>&nbsp; <FONT 
            color=#e07f44>
            <H4>Source files and functions</H4></FONT>
            <P>Within each of these three modules there are a large number of 
            source code files. Each of these files implements a feature (or a 
            small group of related features) of the game. 
            <P>This helps considerably when you're trying to find your way 
            around the code. Almost all of the functions required to implement 
            that feature will be within that one source file. 
            <P>When adding new functions it's beneficial to name them with a 
            unique prefix for that source file. That way, if the function is 
            called from another source file, you have a good idea of where to 
            find it. For example: All the functions i ui_servers2.c are prefixed 
            with <B>ArenaSernvers_</B>, almost guaranteeing that the name won't 
            be duplicated elsewhere in the source. 
            <P>You'll find this hasn't been applied consistantly: a result of 
            more than one programmer working on the source. <BR>&nbsp; <FONT 
            color=#e07f44>
            <H4>Understand the code before making changes</H4></FONT>
            <P>While tinkering around in the code is fun, making a serious 
            modification requires a deeper understanding. Make sure you 
            understand the dependencies and relationships between variables and 
            functions. 
            <P>Strong clues can be found in the way data structures are used, 
            and (obviously) the names of the variables. Concentrate on a 
            function that implements a particular feature, and build up from 
            there. 
            <P>More clues can be found by the use of static functions and local 
            data, you know there are no modifications outside that source file. 
            <P>When you've made a modification and you're trying to debug it, 
            the effort made to understand the code will reap benefits. 
            <BR>&nbsp; <FONT color=#e07f44>
            <H4>C library functions</H4></FONT>
            <P>There is no (complete) C standard library for Quake3! 
            <P>If you use or need a function from the C standard library you'll 
            have to implement it yourself. There are definitions in 
            <B>q_shared.c</B> of functions that have the expected behaviour. 
            Each is prefixed by a <B>Q_</B> so I'll call them Q functions. Look 
            there first for library functions. 
            <P>There is also a subsetset of library functions implemented in 
            <B>bg_lib.c</B>. This file is only included when building for the 
            Quake3 Virtual Machine. It will assist while you make the transition 
            to the Q functions. 
            <P>If you appear to have any problems with standard C library calls 
            between your binaries and virtual machine bytecode then convert to 
            the Q functions used by the virtual machine. You'll then be getting 
            the same code. <BR>&nbsp; <FONT color=#e07f44>
            <H4>No malloc!</H4></FONT>
            <P>This is the most obvious omission from the C library. If you use 
            malloc like a crutch then you'll have to change your coding style. 
            <P>The omission is a Good Thing(tm). 
            <P>It forces coding using data that is static and/or part of the 
            stack. You now have to think about how much space you need for your 
            data in the worst case. In other words you have to think more about 
            the design of your program. 
            <P>It also means that the Virtual Machine is more stable: no bugged 
            bytecode QVM eating up memory on the server. 
            <P>Having said that, there are some algorithms that benefit from 
            "memory allocation". It's possible to provide your own malloc() like 
            behaviour, but this introduces a whole new class of bugs to worry 
            about. <BR>&nbsp; <FONT color=#e07f44>
            <H4>Calls into the Quake3 executable</H4></FONT>
            <P>There are some things that just need to be done as efficiently as 
            possible. This means a call into the executable. All of these 
            function names start with <B>trap_</B> and call the executable in 
            the <B>*_syscalls.c</B> files. 
            <P>The only way to learn what these functions can do for you is by 
            understanding the data structures passed, and how their data is 
            prepared and used within the source code. <BR>&nbsp; <FONT 
            color=#e07f44>
            <H4>Commenting your code</H4></FONT>
            <P>The most accurate documentation of the code is the code itself. 
            It documents every bug as yet undiscovered, and will automatically 
            document changes made to it. 
            <P>Unfortunately the code doesn't help you understand itself. 
            <P>Accurate and frequent comments on what you're doing (and how 
            you're doing it) will do wonders when you come to track down that 
            obscure bug whether 6 minutes or 6 months later. 
            <P>Just make sure they're <I>accurate</I> comments! <BR>&nbsp; <FONT 
            color=#e07f44>
            <H4>Struct-ureless code</H4></FONT>
            <P>When you use a data structure in C it needs to be referred to 
            using the keyword <B>struct</B>. There is a neat trick that allows 
            you to get around this and save typing, as well as annoying compiler 
            errors when you forget to put it in. 
            <P>Lets have a look at an example taken from <B>ui/servers2.c</B>: 
            <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>typedef struct servernode_s {
   char   adrstr[MAX_ADDRESSLENGTH];
   char   hostname[MAX_HOSTNAMELENGTH];
   char   mapname[MAX_MAPNAMELENGTH];
   int    numclients;
   int    maxclients;
   int    pingtime;
   int    gametype;
   int    nettype;
} servernode_t;
</PRE></FONT>
            <P>You can access the data type in one of two ways: <FONT 
            color=#ffffcc face="Verdana, Arial" size=3><PRE>struct servernode_s* servernodeptr;
</PRE></FONT>
            <P>or: <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>servernode_t* servernodeptr;
</PRE></FONT>
            <P>You choose! <BR>&nbsp; <FONT color=#e07f44>
            <H4>Use constants</H4></FONT>
            <P>If you're using a number to represent something that's used in 
            several places then you should <B>#define</B> it using a descriptive 
            name. Use that #def'd name instead of the number. 
            <P>If you need to come back to change the code then you have only 
            one dependancy to change. The #def'd name is also another way of 
            helping document your code. 
            <P>There are many, many examples of this all over the Quake3 Source. 
            In fact they don't write the code any other way. 
            <P>Get used to it. Now! <BR>&nbsp; <FONT color=#e07f44>
            <H4>Avoid globals: use static declaration</H4></FONT>
            <P>By putting too many data types and functions into header files 
            and making them global you risk a name clash. 
            <P>You can avoid this by defining the datatype in the source file 
            itself. The definition is only visible within that file, and there 
            will be no clashes with other data types or function names 
            elsewhere. 
            <P>For functions you can declare them <B>static</B>. This means they 
            can't be accessed from outside the source file they're defined in. 
            No possibility of names colliding. One other benefit: if you define 
            the function before it's first use then you don't need to declare 
            it's prototype. 
            <P>If you need a datatype or function declaration to be available in 
            more than one source file then use a header file. Put the 
            declaration in <B>q_shared.h</B> as a last resort. 
            <P>Under no circumstances should you refer to the same datatype or 
            function by using separate declarations in two different source 
            files. You'll get weird synchronization errors when you forget to 
            change one of them. <BR>&nbsp; <FONT color=#e07f44>
            <H4>American spelling</H4></FONT>
            <P>Those of you that use English (rather than American) will find 
            the spelling in the code is... different. 
            <P>Unfortunately this presents a problem. If you search the code for 
            keywords on a regular basis then you won't catch everything if 
            you've used English spelling only for your modifications. 
            <P>In order to help searches through the code, I'd suggest you 
            consider using American spelling only. Comments can use any spelling 
            you like! <BR>&nbsp; <FONT color=#e07f44>
            <H4>Resources for further reading</H4></FONT>
            <P>There are quite a few documents and news groups out there that 
            will help you get used to C coding. Note that they are oriented 
            towards a full implementation of ANSI C (libraries and all). 
            <P>A Meta-FAQ that covers just about most of the ground can be found 
            at the <A href="http://www.faqs.org/faqs/C-faq/">C-FAQ Index</A>. 
            <P>For those who are interested in writing code in a more efficient 
            way then I'd suggest looking at <A 
            href="http://reality.sgi.com/terada_nsg/Graphics/OpenGL/OGLonSGI/OpenGLonSGI-246.html">Optimizing 
            database rendering code</A>. 
            <P>Although it's aimed at implementing an efficient OpenGL driver, 
            its' application is more general. Use these techniques in a 
            performance critical section of code. Not all of them are guaranteed 
            to work on the Quake Virtual Machine, but you'll get a few good 
            ideas. 
            <P></P></FONT></TD></TR></TBODY></TABLE><!-- END MAIN TABLE --></TD></TR></TBODY></TABLE>
<P>
<TABLE bgColor=#000000 border=0 cellPadding=10 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD align=middle bgColor=#000000>[ <A 
      href="http://www.planetquake.com/code3arena/articles/article2.shtml"><B>&lt;&lt; 
      Prev</B></A> ] [ <A 
      href="http://www.planetquake.com/code3arena/index.shtml"><B>Home</B></A> ] 
      [ <A 
      href="http://www.planetquake.com/code3arena/articles/article4.shtml"><B>Next 
      &gt;&gt;</B></A> ] <BR><BR></TD></TR></TBODY></TABLE>
<P></P></BODY></HTML>
