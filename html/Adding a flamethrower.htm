<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META NAME="generator" CONTENT="NoteTab">
<TITLE>Tute 10 - Adding a flamethrower</TITLE>
</HEAD>
<body>

<br><HR WIDTH=100% SIZE=15 NOSHADE>
<tt>

<br>This tutorial was originally written by AssKicka at solidground@planetquake.com.
<br>
<br>Included here are personal notes made to deal with areas that were difficult to follow in the original tutorial due to for example differing version numbers.
<br>
<br>To get around the problem of differing numbers included the source code necessary to determine the where the changes need to be made will be included as well as a rough line number
<br>
<br>This version assumes that the following versions are being used:
<ul>
<li>1.31 point release
<li>1.29 source code
</ul>

Note 
<ul>
<li>When changing bg*.* x have to be recompiled.
<li>The code inserted here should not be between 
<pre>
#ifdef MISSIONPACK
.
.
.
#endif
</pre>
</ul>

Related sprites and models from solid ground 2.0 are here
<ul>
<li><A HREF="tute10/flamethr.tga";>flamethr.tga</A>
<li><A HREF="tute10/flamethrower.md3";>flamethrower.md3</A>
<li><A HREF="tute10/flamethrower_flash.md3";>flamethrower_flash.md3</A>
<li><A HREF="tute10/flamethrower_hand.md3";>flamethrower_hand.md3</A>
<li><A HREF="tute10/f_flamethrower.jpg";>f_flamethrower.jpg</A>
<li><A HREF="tute10/flameball.jpg";>flameball.jpg</A>
</ul>

<br><HR WIDTH=50% SIZE=15 NOSHADE>

<dl>
<dt><b>1.  Adding weapon and ammo definitions.</b>
<dd>
<br>Adding a flag
<br>file - bg_public.h
<br>line - 303
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>typedef enum {
   .
   .
   .<font color="#ff6060">
   WP_FLAME_THROWER, //tute10.1
   .</font>
   .
   .
} weapon_t;   
</pre></td></table>

<br>Adding a method of death flag
<br>file - bg_public.h
<br>line - 574
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
// means of death
typedef enum {
   .
   .
   .<font color="#ff6060">
   MOD_FLAME_THROWER, //tute10.2
   .</font>
   .
   .
} meansOfDeath_t;   
</pre></td></table>

<br>Adding the method of death string
<br>file - g_active.c
<br>line - 268
<br>note - the order does not matter because it is strings being passed or values already predefined
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
// these are just for logging, the client prints its own messages
char	*modNames[] = {
   .
   .
   .<font color="#ff6060">
	"MOD_FLAME_THROWER", //tute10.3</font>
   .	
   .
   .   
};   
</pre></td></table>

<br>Adding the inventory and model indexes
<br>file - inv.h
<br>line - anywhere in the file
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
<font color="#ff6060">#define INVENTORY_FLAMETHROWER 35 //tute10.4
#define MODELINDEX_FLAMETHROWER 36 //tute10.4</font>
</pre></td></table>

<br>Defining the flamethrower
<br>file - bg_misc.c
<br>line - near the other weapon definitions which look very similar
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
<font color="#ff6060">//tute10.5
/*
 *QUAKED weapon_flamethrower (.3 .3 1) (-16 -16 -16) (16 16 16) suspended
 */
{
   "weapon_flamethrower",
   "sound/misc/w_pkup.wav",

   {"models/weapons2/flamethrower/flamethrower.md3", 0, 0, 0},
   
   /* icon */     "icons/iconw_flame",   
   /* pickup */   "Flame Thrower", 20,IT_WEAPON,WP_FLAME_THROWER,   
   /* precache */ "",
   /* sounds */   ""
},
</font>
</pre></td></table>

<br>Defining the flamethrower ammo
<br>file - bg_misc.c
<br>line - near the other ammo definitions which look very similar
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
<font color="#ff6060">
//tute10.6
/*
 *QUAKED ammo_flame (.3 .3 1) (-16 -16 -16) (16 16 16) suspended
 */
{
   "ammo_flame",
   "sound/misc/am_pkup.wav",

   {"models/powerups/ammo/bfgam.md3", 0, 0, 0},
      
   /* icon */      "icons/icona_bfg",
   /* pickup */    "Flame Ammo",50,IT_AMMO,WP_FLAME_THROWER,
   /* precache */  "",
   /* sounds */    ""   
},
</font>
</pre></td></table>
</dd>
<br>
<dt><b>2. Setting the rate of fire</b>
<dd>
<br>file - bg_pmove.c
<br>line - anywhere as long as it does not replace the guantlet as a the default
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
/*
==============
PM_Weapon

Generates weapon events and modifes the weapon counter
==============
*/
static void PM_Weapon( void ) {
   .
   .
   .
   switch( pm->ps->weapon ) 
   {
	default:
	case WP_GAUNTLET:
		addTime = 400;
		break;<font color="#ff6060">
      	case WP_FLAME_THROWER: //tute10.7
		addTime = 40;</font>
	.
	.
	.
   }	
   .
   .
   .
}
</pre></td></table>
</dd>
<br>
<dt><b>3. Spawn the player with the flamethrower</b>
<dd>
<br>file - g_client.c
<br>line - as long as it is after the definition for the machinegun
<br>note - this replaces the machine gun as the starting weapon, so the player does not spawn with a machine gun
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
/*
===========
ClientSpawn

Called every time a client is placed fresh in the world:
after the first ClientBegin, and after each respawn
Initializes all non-persistant parts of playerState
============
*/
void ClientSpawn(gentity_t *ent) {
   .
   .
   .
   client->ps.stats[STAT_WEAPONS] = ( 1 << WP_MACHINEGUN );
	
   if ( g_gametype.integer == GT_TEAM ) 
   {
      client->ps.ammo[WP_MACHINEGUN] = 50;
   }
   else
   {
      client->ps.ammo[WP_MACHINEGUN] = 100;
   }
   <font color="#ff6060">
   //tute10.8
   //Spawn player with flame thrower
   client->ps.stats[STAT_WEAPONS] = ( 1 << WP_FLAME_THROWER );
   client->ps.ammo[WP_FLAME_THROWER] = 999;    </font>
   .
   .
   .
}   
</pre></td></table>

<br>Register the starting weapon
<br>file - g_items.c
<br>line - 776
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
/*
==============
ClearRegisteredItems
==============
*/
void ClearRegisteredItems( void ) {
   memset( itemRegistered, 0, sizeof( itemRegistered ) );

   // players always start with the base weapon
   RegisterItem( BG_FindItemForWeapon( WP_MACHINEGUN ) );
   RegisterItem( BG_FindItemForWeapon( WP_GAUNTLET ) );
   <font color="#ff6060">
   RegisterItem( BG_FindItemForWeapon( WP_FLAME_THROWER) );  //tute10.9</font>
   .
   .
   .
}      
</pre></td></table>
</dd>
<br>
<dt><b>4. Prevent the flamethrower from being dropped</b>
<dd>
<br>file - g_combat.c
<br>line - 72
<br>note 
<br>- not really needed but is included for educational purposes. 
<br>- The first part makes sure other weapons are dropped while the player is changing weapons, i.e. the player picks up the BFG and dies while the weapon is being activated. 
<br>-The second parts says if the weapon is bigger than a machine gun and the weapon is not a grappling hook and it's also not a flame thrower and the ammo for this item is more than 0 then drop the weapon.

<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
/*
=================
TossClientItems

Toss the weapon and powerups for the killed player
=================
*/
void TossClientItems( gentity_t *self ) {
   .
   .
   .
   //tute10.11
   if ( weapon == WP_MACHINEGUN || weapon == WP_GRAPPLING_HOOK <font color="#ff6060">|| weapon == WP_FLAME_THROWER</font>) 
   {
      if ( self->client->ps.weaponstate == WEAPON_DROPPING ) 
      {
         weapon = self->client->pers.cmd.weapon;
      }
      .
      .
      .
   }
   
   //tute10.11
   if ( weapon > WP_MACHINEGUN && weapon != WP_GRAPPLING_HOOK && weapon <font color="#ff6060">!= WP_FLAME_THROWER && self->client->ps.ammo[ weapon ] </font>) 
   {
	// find the item type for this weapon
	item = BG_FindItemForWeapon( weapon );

	// spawn the item
	Drop_Item( self, item, 0 );
   }
   .
   .
   .
}      
</pre></td></table>
</dd>
<br>
<dt><b>5.  Adding the flamethower fire functions</b>
<dd>
<br>file - g_weapons.c
<br>line - 840
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
/*
===============
FireWeapon
===============
*/
void FireWeapon( gentity_t *ent ) {
   .
   .
   .
   // fire the specific weapon
   switch( ent->s.weapon ) {
      .
      .
      .<font color="#ff6060">
      case WP_FLAME_THROWER :
         Weapon_fire_flame( ent );
         break;</font>
      .
      .
      .
   }
   .
   .
   .
}   
</pre></td></table>

<br>file - g_weapons.c
<br>line - 
<br>note -
<br>An entity "m" of type gentity_t is created and then the "fire_flame" function is called.  
<br>
<br>The "fire_flame" function is passed the the calling entity (ent), the starting point (muzzle) and the direction (forward). 
<br>
<br>The "fire_flame" function will spawn a new entity in the world and all the new entities information will be passed back to "m". 
<br>
<br>The damage/splashDamage is multiplied by the quad factor. damage and splashDamage are examples of the information passed back from the "fire_flame" function.
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
<font color="#ff6060">/*
=======================================================================
FLAME_THROWER
=======================================================================
*/
void Weapon_fire_flame (gentity_t *ent ) 
{
   gentity_t *m;

   m                = fire_flame(ent, muzzle, forward);
   m->damage       *= s_quadFactor;
   m->splashDamage *= s_quadFactor;
}</font>   
</pre></td></table>


<br>file - g_missle.c
<br>line - near the fire_plasma function
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
<font color="#ff6060">//*tute10.14
=================
fire_flame
=================
*/
gentity_t *fire_flame (gentity_t *self, vec3_t start, vec3_t dir) 
{
   gentity_t*bolt;

   VectorNormalize (dir);

   bolt = G_Spawn();
   bolt->classname = "flame";
   bolt->nextthink = level.time + 1500;
   bolt->think = G_ExplodeMissile;
   bolt->s.eType = ET_MISSILE;
   bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
   bolt->s.weapon = WP_FLAME_THROWER;
   bolt->r.ownerNum = self->s.number;
   bolt->parent = self;
   bolt->damage = 30;
   bolt->splashDamage = 25;
   bolt->splashRadius = 45;
   bolt->methodOfDeath = MOD_FLAME_THROWER;
   bolt->splashMethodOfDeath = MOD_PLASMA_SPLASH;
   bolt->clipmask = MASK_SHOT;
   bolt->s.pos.trType = TR_LINEAR;
   bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;// move a bit on the very first frame

   VectorCopy( start, bolt->s.pos.trBase );
   VectorScale( dir, 300, bolt->s.pos.trDelta );
   SnapVector( bolt->s.pos.trDelta );// save net bandwidth
   VectorCopy (start, bolt->r.currentOrigin);

   return bolt;
}</font>
</pre></td></table>

<br>file - 
<br>line - 
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
   <font color="#ff6060">
   
   </font>   
</pre></td></table>
</dd>
<br>

<dt><b>6.  Adding special effects and gfx for the flamethrower</b>
<dd>
<br>file - 
<br>line - 
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
   <font color="#ff6060">
   
   </font>   
</pre></td></table>

</dd>
<br>

<dt><b>7.  Adding adding weapon 11 to the menu</b>
<dd>
<br>file - 
<br>line - 
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
   <font color="#ff6060">
   
   </font>   
</pre></td></table>

</dd>
</dl>
<br><HR WIDTH=50% SIZE=15 NOSHADE>

<br>Recompile cgame, game and ui.
<br>
<br><HR WIDTH=100% SIZE=15 NOSHADE>
<!-----------------------------------------------------------------------------------------------------------------------------------------
<br>file - 
<br>line - 
<br><table width="100%" border=".01"  cellpadding="10"><td><pre>
   <font color="#ff6060">
   
   </font>   
</pre></td></table>
------------------------------------------------------------------------------------------------------------------------------------------>



<hr>
<I><small>
Disclaimer: <br>
This is a personal page published by the author. The ideas and
information expressed on it have not been approved or authorised by
Monash University either explicitly or impliedly.  In no event shall
Monash University be liable for any damages whatsoever resulting from
any action arising in connection with the use of this information or
its publication, including any action for infringement of copyright or
defamation.
</small></I>
<hr>

</body></html>
