<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257996687"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257996687"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257996687"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257996687"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article6.shtml"><< Prev</a> |
	Article 7 |
	<a href="article8.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>
  
   <!-- BEGIN LEFT NAVBAR MENU --> 
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->


	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top>
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
ARTICLE 7 - UI Menu Primer II
</font></b><br>by <a href="mailto:hypothermia@planetquake.com"><font color="#FF0000">H</font><font color="#FFFF00">y</font><font color="#CC33CC">p</font><font color="#3333FF">o</font><font color="#FFFFFF">Thermia</font></A></center>


<p>This second part of the menu primer builds on what we've already learnt about
the user interface ("ui") menu system. It provides a reference to all the controls,
how to use them, and the parameters used to set them up.

<p>There are plenty of examples of how these controls are used,
but you'll get the most benefit from this material if you've also read the first part
(<a href="article6.shtml">UI Menu Primer I</a>) and had a quick look at some of
the menu source code.

<p>In <a href="article8.shtml">the final part of this primer</a> we'll take a look at some of the more
advanced things you can do with menus, talk about how to go about designing a menu
from scratch, and make concrete use of the reference material here.

<br>&nbsp;

<font color="#E07F44"><H4>
1. Reference
</H4></font>

<p>Some of the more advanced menu features require a more detailed
understanding of the menu framework. This reference material will provide us
with the information we need to tackle things like owner drawn controls, and
avoids repetition.

<p>Remember that co-ordinates refer to a 640 by 480 screen, and are automatically
scaled to the true screen resolution when drawn.

<br>&nbsp;

<font color="#E07F44"><H4>
1.1 The <b>generic</b> data common to all controls
</H4></font>

<p>All controls carry the same set of common data, refered to as the "generic" data.
This data structure stores all the core essential information used to setup and maintain
a control.

<p>Here's the "generic" data structure:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
   int type;
   const char *name;
   int id;
   int x, y;
   int left;
   int top;
   int right;
   int bottom;
   menuframework_s *parent;
   int menuPosition;
   unsigned flags;

   void (*callback)( void *self, int event );
   void (*statusbar)( void *self );
   void (*ownerdraw)( void *self );
} menucommon_s;
</pre></font>

<p>Not all of these values need to be filled in, but some are essential.
Lets take a look at how these values are used.

<dl>
<dt><p><b>generic.type</b>
<dd>The type of control, must be filled in.

<dt><p><b>generic.name</b>
<dd>A text string used by the control, usually as a label.
Usage specific to the given control type.

<dt><p><b>generic.id</b>
<dd>A value used to identify the control. Should take
a unique value for each <b>generic.callback</b> function.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>Position of the control on screen, must be filled in.

<dt><p><b>generic.left</b>, <b>generic.top</b>, <b>generic.right</b>, <b>generic.bottom</b>
<dd>Bounding box for control, defining when mouse is over the control. Initialized for you
when <b>Menu_AddItem()</b> is called, but must be filled in if <b>QMF_NODEFAULTINIT</b>
flag is set.

<dt><p><b>generic.parent</b>
<dd>A pointer to the <b>menuframework_s</b> structure that identifies the menu being displayed.
Initialized for you when <b>Menu_AddItem()</b> is called.

<dt><p><b>generic.menuPosition</b>
<dd>A unique value for the control. Do not set or modify.

<dt><p><b>generic.flags</b>
<dd>Defines the behaviour of the control, as well as its current state. Must be initialized
before <b>Menu_AddItem()</b> is called. Some values can be modified as the control is used.

<dt><p><b>generic.callback</b>
<dd>A handling function for implementing the behaviour of a control. Must be
filled in if the control can accept input.

<dt><p><b>generic.statusbar</b>
<dd>Called if the control wants to draw something when the mouse cursor is
hovering over it.

<dt><p><b>generic.ownerdraw</b>
<dd>A handling function that allows a custom drawing behaviour for a control. Used
to extend or modify an existing control.
</dl>

<br>&nbsp;

<font color="#E07F44"><H4>
1.2 Control behaviour through <b>generic.flags</b>
</H4></font>

<p>These flag values can be used to define both the behaviour of the control,
as well as give information about its current state.

<p>The full list of 21 flags all begin with <b>QMF_</b> and can be
found in <b>ui_local.h</b>.

<p>The "Usage" column tells you how the flag is used. "Init" is for the permanent
behaviour of the control, and should only be set during initialization.
"State" describes the current (temporary) status of the control, it can
also be set during initialization.

<p>Some flags have an equivalent value that can be used when calling
text or graphics drawing functions, indicated in the "text effect" column. This
means that an owner drawn control doesn't need to implement the effect, it's
already there to be used.

<br>&nbsp;

<table border="1" cellpadding="8" width="90%">
<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
<b>generic.flag</b></td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Usage</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Text effect</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Comment</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_BLINK</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
State</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_BLINK</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Text flashes on and off, following a fixed period. There is no
transition between the on and off states.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_SMALLFONT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_SMALLFONT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
The text contents of the control will be drawn using a smaller screen font.
<p>By default text is drawn using a bigger font, in the text style UI_BIGFONT.
</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_LEFT_JUSTIFY</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_LEFT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Positioning of the control relative to the <b>generic.x</b>
and <b>generic.y</b> co-ordinates. Not all controls respond to
this value.

<p>Default value. Incompatible with QMF_CENTER_JUSTIFY and QMF_RIGHT_JUSTIFY.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_CENTER_JUSTIFY</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_CENTER</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Positioning of the control relative to the <b>generic.x</b>
and <b>generic.y</b> co-ordinates. Not all controls respond to
this value.

<p>Incompatible with QMF_LEFT_JUSTIFY and QMF_RIGHT_JUSTIFY.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_RIGHT_JUSTIFY</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_RIGHT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Positioning of the control relative to the <b>generic.x</b>
and <b>generic.y</b> co-ordinates. Not all controls respond to
this value.

<p>Incompatible with QMF_LEFT_JUSTIFY and QMF_CENTER_JUSTIFY.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_NUMBERSONLY</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Used for text input controls; it rejects all non-numbers.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_HIGHLIGHT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
State</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Control should be drawn with a brighter colour, giving it more
attention.

<p>Incompatible with QMF_PULSE.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_HIGHLIGHT_IF_FOCUS</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Control will be drawn in a brighter colour if it is the currently
selected control (has focus).

<p>Incompatible with QMF_PULSEIFFOCUS</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_PULSEIFFOCUS</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_PULSE</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
The control will cycle between bright and dim colours when it is the
currently selected control (has focus).

<p>An effective way to show which control is currently accepting
keyboard input and/or under the mouse cursor.

<p>Incompatible with QMF_HIGHLIGHT_IF_FOCUS.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_HASMOUSEFOCUS</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
State</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
An internal value used to indicate that the mouse cursor is over a control.
<p>Treat this flag as "read only", you should never need to change it.

<p>Use <b>Menu_SetcursorToItem()</b> instead to choose the active control once
they've all been registered.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_NOONOFFTEXT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Not used.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_MOUSEONLY</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Prevents the control from being accessed though keyboard
navigation.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_HIDDEN</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
State</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Prevents the control from being drawn onscreen.

<p>If you hide a control that can accept input then you must
use <b>QMF_INACTIVE</b> too.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_GRAYED</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
State</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
The control does not respond to input from the keyboard or mouse, and should be
drawn in a grey colour to indicate this.

<p>Implicitly includes QMF_INACTIVE.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_INACTIVE</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
State</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
The control does not respond to input from the keyboard or mouse. There
is no change expected in the visual appearance.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_NODEFAULTINIT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Prevents internal initialization of a control when <b>Menu_AddItem()</b>
is called.

<p>Use with caution. If you don't provide the full init yourself then you'll get
unexepected behaviour.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_OWNERDRAW</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Not used. Just set <b>generic.ownerdraw</b>.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_PULSE</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
State</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_PULSE</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Control should be drawn so it cycles between bright and dim colours.

<p>An effective way to show which control is currently accepting
keyboard input and/or under the mouse cursor.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_LOWERCASE</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Forces upper case keyboard input into lower case letters.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_UPPERCASE</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Init</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Forces lower case keyboard input into upper case letters.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
QMF_SILENT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
State</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
-</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Prevents a sound effect being played when a control is selected.</td>
</tr>


</table>

<br>&nbsp;

<font color="#E07F44"><H4>
1.3 The text effects
</H4></font>

<p>There are only a few text effects that you can use, they're described in
the table below.

<p>These flags are of use when you're using a <b>menutext_s</b> control, or
providing an ownerdraw custom text control.

<br>&nbsp;

<table border="1" cellpadding="8" width="90%">
<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Flag</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Usage</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_LEFT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Text is drawn starting at the (x,y) co-ordinates.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_CENTER</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Text is drawn so it is symmetric about the (x) co-ordinate.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_RIGHT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Text is drawn so it ends at the (x,y) co-ordinates.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_FORMATMASK</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
An internal value. Not for use in a text drawing function.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_SMALLFONT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
The text is drawn as a fixed width font of size <b>SMALLCHAR_WIDTH</b> (8),
<b>SMALLCHAR_HEIGHT</b> (16).</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_BIGFONT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
The text is drawn as a fixed width font of size <b>BIGCHAR_WIDTH</b> (16),
<b>BIGCHAR_HEIGHT</b> (16).</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_GIANTFONT</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
The text is drawn as a fixed width font of size <b>GIANTCHAR_WIDTH</b> (32),
<b>GIANTCHAR_HEIGHT</b> (48).</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_DROPSHADOW</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
A black shadow is drawn underneath the text giving it a raised effect.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_BLINK</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Text flashes on and off, following a fixed period. There is no
transition between the on and off states.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_INVERSE</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Only effective when calling <b>UI_DrawProportionalString()</b>, its usage
appears to have been changed from its "obvious" operation to a
reduction in colour intensity only.</td>
</tr>

<!--- new row --->

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
UI_PULSE</td>

<td><font face="Verdana, Arial" size="2" color="#eeeeee">
The text will cycle between bright and dim colours.</td>
</tr>

</table>

<br>&nbsp;

<a name="controls"></a><font color="#E07F44"><H4>
2. Reference: The 7 types of control
</H4></font>

<p>There are seven types of control available that can just be dropped into
a menu. This reference will tell you what parts of each control you need to
initialize. If you need to setup these controls yourself using <b>QMF_NODEFAULTINIT</b>
then you'll need to understand the remaining values as used by the control.

<ul>
<li>
<a href="#menufield">menufield_s</a> (for text input)</li>

<li>
<a href="#menuslider">menuslider_s</a> (a slider with thumb)</li>

<li>
<a href="#menulist">menulist_s</a> (choose from a list)</li>

<li>
<a href="#menuradiobutton">menuradiobutton_s</a> (an on/off state)</li>

<li>
<a href="#menubitmap">menubitmap_s</a> (draw a button or picture)</li>

<li>
<a href="#menutext">menutext_s</a> (draws text)</li>

<li>
<a href="#menuaction">menuaction_s</a> (big menu text)</li>

</ul>

<p>Each control includes an example from the source code so you can go look at
something that already works.

<p>Remember that the menu controls should have been initialized to zero using a
<b>memset()</b>, so you'll only need to touch the values you need to setup.

<p>If the <b>generic</b> structure contains some unusual setup values for that
particular control then they will be explained, otherwise refer to earlier description
of that structure.

<p>All text controls can use a smaller font by specifying <b>QMF_SMALLFONT</b>
for <b>generic.flags</b>.

<br>&nbsp;

<a name="menufield"></a><font color="#E07F44"><H4>
2.1 menufield_s (for text input)
</H4></font>

<p>This control accepts typed input. If the number of characters input exceeds
the screen width of the control then the text will be scrolled automatically
to make space on the right.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
   menucommon_s generic;
   mfield_t field;
} menufield_s;
</pre></font>


<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_FIELD</b>

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The top left corner of the text input part of the control

<dt><p><b>generic.name</b>
<dd>If set then this descriptive text will be drawn to the left
of the control. Adding this name does not move the control, the text input box
remains in the same place.

</dl>


<p>The <b>mfield_t</b> structure is given by:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct {
   int cursor;
   int scroll;
   int widthInChars;
   char buffer[MAX_EDIT_LINE];
   int maxchars;
} mfield_t;
</pre></font>

<dl>
<dt><p><b>field.widthInChars</b>
<dd>The size of the text input area (in characters) as drawn on the screen.
Any extra characters input will cause the text to scroll.
<p>Value must be set.

<dt><p><b>field.maxchars</b>
<dd>The maximum number of characters that can be stored in the buffer.
<p>If this value is not set then MAX_EDIT_LINE (256) is assumed.

<dt><p><b>field.buffer</b>
<dd>The text typed in by the user is stored here. It is always correctly '\0'
terminated.
</dl>

<p>This control also accepts the following keyboard input:

<p><table border="1" cellpadding="8">
<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Ctrl-C</td>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Clear the control of all text.</td>
</tr>

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Ctrl-V</td>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Paste text from the Operating System clipboard (Windows, Mac, Linux).</td>
</tr>

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Ctrl-H</td>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Backspace (deletes character to left of cursor)</td>
</tr>

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Ctrl-A</td>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Move to first character of text.</td>
</tr>

<tr>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Ctrl-E</td>
<td><font face="Verdana, Arial" size="2" color="#eeeeee">
Move to last character of text.</td>
</tr>

</table>


<p>Example: taken from <b>ui_specifyserver.c</b>, this is the text
input for the server address.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
s_specifyserver.domain.generic.type = MTYPE_FIELD;
s_specifyserver.domain.generic.name = "Address:";
s_specifyserver.domain.generic.flags =
     QMF_PULSEIFFOCUS|QMF_SMALLFONT;
s_specifyserver.domain.generic.x = 206;
s_specifyserver.domain.generic.y = 220;
s_specifyserver.domain.field.widthInChars = 38;
s_specifyserver.domain.field.maxchars = 80;
</pre></font>

<p><a href="#controls">Back to the list of controls</a>

<br>&nbsp;

<a name="menuslider"></a><font color="#E07F44"><H4>
2.2 menuslider_s (a slider with thumb)
</H4></font>

<p>The easiest way to think of this control is like a volume slider, allowing you
to select a value between the maximum and minimum allowed.
The current value is indicated by a button-like widget called a "thumb",
and this thumb can be dragged to select the value.

<p>Any text associated with this control is always drawn using the
<b>UI_SMALLFONT</b> style.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
   menucommon_s generic;

   float minvalue;
   float maxvalue;
   float curvalue;

   float range;
} menuslider_s;
</pre></font>

<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_SLIDER</b>.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The co-ordinates of the slider.

<dt><p><b>generic.name</b>
<dd>If set then this descriptive text will be drawn to the left
of the slider. Adding this name doesn't move the slider.

<dt><p><b>minvalue</b>
<dd>The minimum value allowed for the slider. Must be initialized, and
less than <b>maxvalue</b>.

<dt><p><b>maxvalue</b>
<dd>The maximum value allowed by the slider. Must be initialized.

<dt><p><b>curvalue</b>
<dd>The current position of the thumb, stores the value of the control.
Must be initialized.

</dl>

<p>By default the control allows any value between the minimum and maximum,
but it can be constrained through the <b>generic.callback</b> function. When a
<b>QM_ACTIVATED</b> event is generated for the control then the <b>curvalue</b>
can be adjusted.

<p>Keyboard input through the cursor keys increases or decreases
<b>curvalue</b> by one.

<p>Example: taken from <b>ui_sound.c</b>, this shows how the sound FX volume
slider is initialized.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
soundOptionsInfo.sfxvolume.generic.type = MTYPE_SLIDER;
soundOptionsInfo.sfxvolume.generic.name = "Effects Volume:";
soundOptionsInfo.sfxvolume.generic.flags =
     QMF_PULSEIFFOCUS|QMF_SMALLFONT;
soundOptionsInfo.sfxvolume.generic.callback =
     UI_SoundOptionsMenu_Event;
soundOptionsInfo.sfxvolume.generic.id = ID_EFFECTSVOLUME;
soundOptionsInfo.sfxvolume.generic.x = 400;
soundOptionsInfo.sfxvolume.generic.y = y;
soundOptionsInfo.sfxvolume.minvalue = 0;
soundOptionsInfo.sfxvolume.maxvalue = 10;
soundOptionsInfo.sfxvolume.curvalue =
     trap_Cvar_VariableValue( "s_volume" ) * 10;
</pre></font>

<p><a href="#controls">Back to the list of controls</a>

<br>&nbsp;


<a name="menulist"></a><font color="#E07F44"><H4>
2.3 menulist_s (choose from a list)
</H4></font>

<p>This control presents a list so that one item can be selected. There are
two types of list control, a "spin" control that takes up very little space on
screen, or a "list" control that displays a part of the list.

<p>The spin control is best used when there isn't much space on screen, and
there are only a few options to choose from. Clicking on the control moves to
the next value.

<p>The list control is more complicated: not only can it display more than one
column of information, but you'll also have to add additional buttons
controls to scroll the list.

<p>All text drawn with this control is in the <b>UI_SMALLFONT</b> style.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
   menucommon_s generic;

   int oldvalue;
   int curvalue;
   int numitems;
   int top;

   const char **itemnames;

   int width;
   int height;
   int columns;
   int seperation;
} menulist_s;
</pre></font>

<p>For the "spin" control:

<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_SPINCONTROL</b>.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The co-ordinates of the control. The top left corner of the
list value.

<dt><p><b>generic.name</b>
<dd>If set then this descriptive text will be drawn to the left
of the spin control (x,y) co-ordinates. Adding this name doesn't move the list
text.

<dt><p><b>itemnames</b>
<dd>This is the list of possible values that the control can take. It must
be an <b>array of const char*</b> with the last member being a NULL pointer
(see example below).

<dt><p><b>curvalue</b>
<dd>The currently selected value in the spin control. An index into the array
set in <b>itemnames</b>.

<dt><p><b>numitems</b>
<dd>The number of items in the spin control list. Do not initialize,
modify with caution.

</dl>

Example: the spin control taken from the server browser in
<b>ui_servers2.c</b>.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
static const char *master_items[] = {
	"Local",
	"Mplayer",
	"Internet",
	"Favorites",
	0
};

g_arenaservers.master.generic.type = MTYPE_SPINCONTROL;
g_arenaservers.master.generic.name = "Servers:";
g_arenaservers.master.generic.flags =
     QMF_PULSEIFFOCUS|QMF_SMALLFONT;
g_arenaservers.master.generic.callback =
     ArenaServers_Event;
g_arenaservers.master.generic.id = ID_MASTER;
g_arenaservers.master.generic.x = 320;
g_arenaservers.master.generic.y = y;
g_arenaservers.master.itemnames = master_items;
</pre></font>

<p><a href="#controls">Back to the list of controls</a>

<center><hr width="90%"></center>

<p>For the "list" control:

<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_SCROLLLIST</b>.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The co-ordinates of the control. The top left corner of the
list display area. Use <b>QMF_CENTER_JUSTIFY</b> to align symmetrically
about the y co-ordinate instead.

<dt><p><b>itemnames</b>
<dd>This is the list of possible values that the control can take. It must
be an <b>array of const char*</b> with the last member being a NULL pointer.

<dt><p><b>curvalue</b>
<dd>The currently selected value in the list. An index into the array
set in <b>itemnames</b>.

<dt><p><b>numitems</b>
<dd>The number of items displayed from the list. You must initialize
and update this value yourself.

<dt><p><b>columns</b>
<dd>The number of columns in the display list. Defaults to 1 if not initialized.

<dt><p><b>seperation</b>
<dd>The separation (in characters) between adjacent columns.

<dt><p><b>height</b>
<dd>The height of the column, given by the number of rows. Must be initialized.

</dl>

<p>Example: the listbox taken from the server browser in <b>ui_servers2.c</b>.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
g_arenaservers.list.generic.type = MTYPE_SCROLLLIST;
g_arenaservers.list.generic.flags =
     QMF_HIGHLIGHT_IF_FOCUS;
g_arenaservers.list.generic.id = ID_LIST;
g_arenaservers.list.generic.callback =
     ArenaServers_Event;
g_arenaservers.list.generic.x = 72;
g_arenaservers.list.generic.y = y;
g_arenaservers.list.width = MAX_LISTBOXWIDTH;
g_arenaservers.list.height = 11;
g_arenaservers.list.itemnames =
     (const char **)g_arenaservers.items;
</pre></font>

<p>and this is the code that scrolls the list when one of two bitmap buttons
is clicked:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
static void ArenaServers_Event( void* ptr, int event ) {
   int id;
   id = ((menucommon_s*)ptr)->id;

   // code snipped...

   switch( id ) {
   // code snipped...
   case ID_SCROLL_UP:
       ScrollList_Key( &g_arenaservers.list, K_UPARROW );
       break;

   case ID_SCROLL_DOWN:
       ScrollList_Key( &g_arenaservers.list, K_DOWNARROW );
       break;
   // code snipped...
   }
}
</pre></font>

<p>You can also use <b>K_PGUP</b> and <b>K_PGDN</b> to move an entire page up
or down (but not on a multi-column list). Move to the start and end of
the list with <b>K_HOME</b> and <b>K_END</b>. Use <b>K_LEFTARROW</b> and
<b>K_RIGHTARROW</b> to move a multi-column list left or right one column.

<p><a href="#controls">Back to the list of controls</a>

<br>&nbsp;

<a name="menuradiobutton"></a><font color="#E07F44"><H4>
2.4 menuradiobutton_s (an on/off state)
</H4></font>

<p>A simple control that only has an on/off state. It is really just a special
case of the spin control version of <b>menulist_s</b>, with minor graphical
differences, and hard coded text strings for the on/off values.

<p>The control is always drawn using the <b>UI_SMALLFONT</b> text, and with a
small "disc" between the descriptive name and the on/off text.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
	menucommon_s generic;
	int curvalue;
} menuradiobutton_s;
</pre></font>

<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_RADIOBUTTON</b>.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The co-ordinates of the control.

<dt><p><b>generic.name</b>
<dd>The descriptive text that will be drawn to the left of the control.

<dt><p><b>curvalue</b>
<dd>Zero if the control is "off", non-zero if displaying "on".

</dl>

<p>This example is taken from <b>ui_preferences.c</b>:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
s_preferences.identifytarget.generic.type =
     MTYPE_RADIOBUTTON;
s_preferences.identifytarget.generic.name = "Identify Target:";
s_preferences.identifytarget.generic.flags =
     QMF_PULSEIFFOCUS|QMF_SMALLFONT;
s_preferences.identifytarget.generic.callback =
     Preferences_Event;
s_preferences.identifytarget.generic.id = ID_IDENTIFYTARGET;
s_preferences.identifytarget.generic.x = PREFERENCES_X_POS;
s_preferences.identifytarget.generic.y = y;

s_preferences.identifytarget.curvalue =
   trap_Cvar_VariableValue( "cg_drawCrosshairNames" ) != 0;
</pre></font>

<p><a href="#controls">Back to the list of controls</a>

<br>&nbsp;

<a name="menubitmap"></a><font color="#E07F44"><H4>
2.5 menubitmap_s (draw a button or picture)
</H4></font>

<p>Used to draw a clickable button (or static picture) from a JPEG or TARGA
image file. A clickable button makes use of the <b>generic.calback</b>
function to respond to mouse and keyboard events, while a static picture has
<b>QMF_INACTIVE</b> set.

<p>When used as a button you must also set the graphic for the active state
(is selected and has the focus).

<p>If you want your graphics to have a "cut out", non-rectangular look
then you'll have to use TARGA images with a mask channel set. Refer to your
image editing program for more details (I use Micrografx Picture Publisher 8).

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
   menucommon_s generic;
   char* focuspic;
   char* errorpic;
   qhandle_t shader;
   qhandle_t focusshader;
   int width;
   int height;
   float* focuscolor;
} menubitmap_s;
</pre></font>

<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_BITMAP</b>.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The top left corner of the image/button by default.

<dt><p><b>generic.flags</b>
<dd>Set to <b>QMF_INACTIVE</b> for a static picture that doesn't respond to keyboard
or mouse input. You can still control how a static picture is drawn by setting flags
like <b>QMF_GREYED</b>, <b>QMF_PULSE</b>, or <b>QMF_HIGHLIGHT</b>.
For an active button this is done automatically in response to keyboard and mouse input.

<p>The alignment of the picture can be controlled with <b>QMF_LEFT_JUSTIFY</b>
(default), <b>QMF_CENTER_JUSTIFY</b>, and <b>QMF_RIGHT_JUSTIFY</b>.

<dt><p><b>generic.name</b>, <b>shader</b>
<dd>Set to the image filename and path relative to the mod directory that
contains the pk3 files. If the image is in a pk3 file then use that relative
path e.g. <b>"menu/art/accept_0"</b> could be in <b>baseq3/menu/art/</b> or
in the <b>menu/art/</b> directory of any pk3 file.

<p>By default the image has an extension of <b>.tga</b> (TARGA), but you
can also use <b>.jpg</b> (JPEG) explicitly.

<p>The <b>shader</b> is a unique way of identifying an image
registered through <b>trap_R_RegisterShaderNoMip()</b>. You only need to set
the <b>generic.name</b>, and <b>shader</b> will then be set for you. You can also
change the value of <b>shader</b> as you need, without updating <b>generic.name</b>
to match.

<p>If you need to change the name of the graphic drawn, then you must set
<b>shader</b> to zero as well. This forces a refresh of the shader, and you won't
need to call <b>trap_R_RegisterShaderNoMip()</b> for the image.

<dt><p><b>errorpic</b>
<dd>If for any reason the <b>generic.name</b> image can't be found or
loaded, then an attempt is made to load the <b>errorpic</b> instead. Following
the same naming convention as generic.name, this should be a reasonable default.

<p>You don't have to provide an error picture, but it's recommended when you might
not have control over the image you're trying to load (e.g. level pictures
from pk3 files, some map designers don't provide them).

<dt><p><b>focuspic</b>, <b>focusshader</b>, <b>focuscolor</b>
<dd>The image file drawn when the button has focus is stored in
<b>focuspic</b> (following the same format as <b>generic.name</b>). This image
is drawn over the <b>generic.name</b> image, not instead of it.

<p>A unique handle for the image shader is stored in <b>focusshader</b>. Behaviour
is identical to that of <b>shader</b>: set <focusshader</b> to zero to
force a refresh if <b>focuspic</b> changes.

<p>The <b>focuspic</b> will "pulse" in colour if <b>QMF_PULSE</b> is set, or if
<b>QMF_PULSEIFFOCUS</b> is set and the cursor is over the image. You can
change this colour by setting <b>focuscolor</b>.

<p>If <b>QMF_HIGHLIGHT</b> or <b>QMF_HIGHLIGHT_IF_FOCUS</b> are set then
the <b>focuspic</b> is drawn over the <b>generic.name</b> image. Its can also be
changed with <b>focuscolor</b>.

<p>Colour values are stored in a <b>vec4_t</b> which is an
array <b>float[4]</b>. <b>focuscolor[0]</b>, <b>focuscolor[1]</b> and
<b>focuscolor[2]</b> are the red, green and blue values respectively, taking
a value between 0.0 and 1.0. The fourth value <b>focuscolor[3]</b> is the
transparency: 1.0 means fully visible, 0.0 means not drawn.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// a pointer is stored in menubitmap_t, so color shouldn't
// be a temporary variable in a function.
static vec4_t color;
menubitmap_t bitmap;

color[0] = color[1] = color[2] = 1.0; // white
color[3] = 0.5; // transparency, dimmed

bitmap.focuscolor = color;
</pre></font>

<dt><p><b>width</b>, <b>height</b>
<dd>The width and height of the image, it also defines the size of the
active region sensitive to the mouse cursor. The image is scaled to fit into
this size, leading to distortion if the image aspect ratio isn't kept.

</dl>

<p>This example is from <b>ui_servers2.c</b>, and is typical of a
button.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
#define ART_BACK0 "menu/art/back_0"
#define ART_BACK1 "menu/art/back_1"

g_arenaservers.back.generic.type = MTYPE_BITMAP;
g_arenaservers.back.generic.name = ART_BACK0;
g_arenaservers.back.generic.flags =
     QMF_LEFT_JUSTIFY|QMF_PULSEIFFOCUS;
g_arenaservers.back.generic.callback =
     ArenaServers_Event;
g_arenaservers.back.generic.id = ID_BACK;
g_arenaservers.back.generic.x = 0;
g_arenaservers.back.generic.y = 480-64;
g_arenaservers.back.width = 128;
g_arenaservers.back.height = 64;
g_arenaservers.back.focuspic = ART_BACK1;
</pre></font>

<p><a href="#controls">Back to the list of controls</a>

<br>&nbsp;

<a name="menutext"></a><font color="#E07F44"><H4>
2.6 menutext_s (draws text)
</H4></font>

<p>This flexible control is used to draw text as part of a menu or page of
controls. There are three variants of this text control, so choose the appropriate
one for your needs.

<p>A "simple text" control just draws on the screen with the minimal amount
of additional options or processing. Each character occupies the same amount of
screen area, determined by the font size. It can't be clicked upon, and should be
used to provide information only. Set <b>generic.type</b> to <b>MTYPE_TEXT</b>
to use this control.

<p>To draw the text in a "banner style" then set <b>generic.type</b> to
<b>MTYPE_BTEXT</b>. The text will be drawn in a large style, with each character
occupying a proportional width rather than a fixed screen area. Use this type
of control for the text title of a page of controls. Like the <b>MTYPE_TEXT</b>
this control doesn't respond to keyboard or mouse input.

<p>The final type (set <b>generic.type</b> to <b>MTYPE_PTEXT</b>)
should be used as a "menu control" for the text in a list of menu options. It
responds to keyboard and mouse input and, like the banner text, uses a
proportional font width.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
   menucommon_s generic;
   char* string;
   int style;
   float* color;
} menutext_s;
</pre></font>


<p>For the "simple text" control:

<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_TEXT</b>.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The position of the text on-screen, can be modified by setting <b>style</b>
to <b>UI_CENTER</b> or <b>UI_RIGHT</b>.

<dt><p><b>generic.flags</b>
<dd>The value <b>QMF_GRAYED</b> is the only value that has an effect,
use <b>style</b> to control appearance.

<dt><p><b>generic.name</b>
<dd>The text here is placed in front of the text in <b>string</b>.

<dt><p><b>string</b>
<dd>The text that will be drawn in the fixed width font. The text in
<b>generic.name</b> will be drawn first, and this text then appended.

<dt><p><b>style</b>
<dd>The flags used to influence how the text is drawn.

<dt><p><b>color</b>
<dd>The colour in which the text will be drawn. Can be over-ridden by
<b>QMF_GRAYED</b>.

</dl>

<p>Example: taken from <b>ui_servers2.c</b>, a text control that gives
the information about the server browsing.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
g_arenaservers.status.generic.type = MTYPE_TEXT;
g_arenaservers.status.generic.x = 320;
g_arenaservers.status.generic.y = y;
g_arenaservers.status.string = statusbuffer;
g_arenaservers.status.style = UI_CENTER|UI_SMALLFONT;
g_arenaservers.status.color = menu_text_color;
</pre></font>

<p><a href="#controls">Back to the list of controls</a>

<center><hr width="90%"></center>

<p>For the "banner style" text control:

<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_BTEXT</b>.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The position of the text on-screen, can be modified by setting <b>style</b>
to <b>UI_CENTER</b> or <b>UI_RIGHT</b>.

<dt><p><b>generic.flags</b>
<dd>The value <b>QMF_GRAYED</b> is the only value that has an effect,
use <b>style</b> to control appearance.

<dt><p><b>string</b>
<dd>The text that will be drawn for the banner in a proportional font.

<dt><p><b>style</b>
<dd>The flags used to influence how the text is drawn. Any font size flags
are ignored.

<dt><p><b>color</b>
<dd>The colour in which the text will be drawn. Can be over-ridden by
<b>QMF_GRAYED</b>.

</dl>

<p>Example taken from <b>ui_playersettings.c</b>, the banner title
for the player model selection.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
s_playermodel.banner.generic.type = MTYPE_BTEXT;
s_playermodel.banner.generic.x = 320;
s_playermodel.banner.generic.y = 16;
s_playermodel.banner.string = "PLAYER MODEL";
s_playermodel.banner.color = color_white;
s_playermodel.banner.style = UI_CENTER;
</pre></font>

<p><a href="#controls">Back to the list of controls</a>

<center><hr width="90%"></center>

<p>For the "menu text" control:

<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_PTEXT</b>.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The position of the text on-screen, can be modified by setting
<b>QMF_CENTER_JUSTIFY</b> or <b>QMF_RIGHT_JUSTIFY</b>.

<dt><p><b>generic.flags</b>
<dd>Only a few flags are effective: <b>QMF_PULSEIFFOCUS</b>, <b>QMF_GRAYED</b>,
<b>QMF_CENTER_JUSTIFY</b>, and <b>QMF_RIGHT_JUSTIFY</b>. Other styles are
controlled through the <b>style</b> parameters.

<dt><p><b>string</b>
<dd>The text that will be drawn for the banner in a proportional font.

<dt><p><b>style</b>
<dd>The flags used to influence how the text is drawn. Font size flags work.
<p>If you use any of the <b>QMF_*_JUSTIFY</b> flags, then you must set the
matching <b>UI_*</b> flags, otherwise the text will be drawn in the wrong place.

<dt><p><b>color</b>
<dd>The colour in which the text will be drawn. Can be over-ridden by
<b>QMF_GRAYED</b>.

</dl>

<p>This example is take from <b>ui_ingame.c</b>, the menu available
when the ESC key is pressed when playing.

<p>Notice how the <b>style</b> value matches the <b>generic.flags</b>
setting of <b>QMF_CENTER_JUSTIFY</b>.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
s_ingame.addbots.generic.type = MTYPE_PTEXT;
s_ingame.addbots.generic.flags =
     QMF_CENTER_JUSTIFY|QMF_PULSEIFFOCUS;
s_ingame.addbots.generic.x = 320;
s_ingame.addbots.generic.y = y;
s_ingame.addbots.generic.id = ID_ADDBOTS;
s_ingame.addbots.generic.callback = InGame_Event;
s_ingame.addbots.string = "ADD BOTS";
s_ingame.addbots.color = color_red;
s_ingame.addbots.style = UI_CENTER|UI_SMALLFONT;
if( !trap_Cvar_VariableValue( "sv_running" ) ||
  !trap_Cvar_VariableValue( "bot_enable" ) ||
  (trap_Cvar_VariableValue( "g_gametype" ) == GT_SINGLE_PLAYER))
{
    s_ingame.addbots.generic.flags |= QMF_GRAYED;
}
</pre></font>

<p><a href="#controls">Back to the list of controls</a>

<br>&nbsp;

<a name="menuaction"></a><font color="#E07F44"><H4>
2.7 menuaction_s (big menu text)
</H4></font>

<p>Originally intended to be the control on choice for ingame menus, its
use has largely been replaced by the more flexible <b>menutext_s</b> control.
Text is drawn in a big font style, appropriate for main menus.

<p>It has been used extensively in the key setup menus, but in each case
has been over-ridden with custom ownerdrawn routines. For this reason there's
no example.

<p>Use of <b>menutext_s</b> is recommended instead.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct
{
   menucommon_s generic;
} menuaction_s;
</pre></font>

<dl>
<dt><p><b>generic.type</b>
<dd>Set to <b>MTYPE_ACTION</b>.

<dt><p><b>generic.x</b>, <b>generic.y</b>
<dd>The co-ordinates of the control. The top left corner of where the
text will be drawn.

<dt><p><b>generic.name</b>
<dd>The text that will be drawn using the UI_BIGFONT style.

</dl>

<p><a href="#controls">Back to the list of controls</a>

<br>&nbsp;

<font color="#E07F44"><H4>
3. To be continued...
</H4></font>

<p>With the reference material now out of the way we can look at some of
the more advanced ways of using the menu system. The
<a href="article8.shtml">final part of this primer</a> will look at
owner drawn controls, status bars, and give some design tips for menus as well.


      <p>
    </td>
  </tr>
</table>
	<!-- END MAIN TABLE -->

  </tr>
</table>
<p>

	<!-- BEGIN BOTTOMHEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article6.shtml"><< Prev</a> |
	Article 7 |
	<a href="article8.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTTOM HEIRARCHY -->

</body>
</html>
