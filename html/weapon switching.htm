<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257840375"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257840375"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257840375"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257840375"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial15.shtml"><< Prev</a> |
	Tutorial 16 |
	<a href="tutorial17.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>
  
   <!-- BEGIN LEFT NAVBAR MENU --> 
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;		
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->
	
	
	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top> 
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
TUTORIAL 16 - (Intelligent) Weapon Switching
</font></b><br>by <b><a href="mailto:warzone@planetquake.com">Mark "WarZone" Smeltzer</A></b></center><p>


This tutorial will allow each client that plays your mod to have their own customizable weapon switching. Quake2
had locked weapon precedences, but back in the days of the original Quake each player could choose their own
precedences. So in Quake2 the BFG was the "best" gun, then the rail gun, then hyperblaster, then rocket
launcher, etc. But in Quake you could choose your own order. <P>

<font color="#E07F44"><H4>
1. Quake3 Weapon Switching ?
</H4></font>

So what cool weapon switching features did Quake3 bring us? None; sadly. In Quake3 you have two options: auto
switch, and manual switch. Autoswitch means that any time you pick up a weapon you will automatically use it.
Even if you've got the BFG in hands and you pick up a shot gun you'll be forced to draw the shot gun. Talk about
lame... And manual switch is even worse! In manual mode it never forces you to draw a gun. So you have to
manually switch to the guns as you pick them up. <P>

Neither of the methods in Quake3 is acceptable to the hard core gamer. So we're going to do something about it :)<P>

This tutorial will show you how to implement Quake style weapon switching which is fully customizable on a per
user basis. Each user will have a cvar "cg_weaponOrder" that controls their weapon preferences. Let's get
started then... <P>

We'll be modifying the following files: <P>
<LI>     cg_weapons.c 
<LI>     cg_main.c 
<LI>     cg_local.h 
<LI>     cg_event.c 
<LI>     g_items.c 
<LI>     g_main.c 
<li>     bg_public.h
<P>

<font color="#E07F44"><H4>
2. Define some Global Variables and Function Prototypes
</H4></font>

First open cg_local.h and find the "cg_main.c" definitions:<P>

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
     // 
     // cg_main.c 
     // 
     const char *CG_ConfigString( int index ); 
     const char *CG_Argv( int arg ); 

     void QDECL CG_Printf( const char *msg, ... ); 
     void QDECL CG_Error( const char *msg, ... ); 

     void CG_StartMusic( void ); 

     void CG_UpdateCvars( void ); 

     int CG_CrosshairPlayer( void ); 
     int CG_LastAttacker( void ); 

<font color="#ff6060">     //WarZone 
     #define NUM_WEAPS 9 
     extern  int cg_weaponsCount; 
     extern  int weaponOrder[NUM_WEAPS]; 
     extern  int weaponRawOrder[NUM_WEAPS]; 
     int RateWeapon (int weapon); 
     int NextWeapon (int curr); 
     int PrevWeapon (int curr);</font>
</pre></font>

Save and close cg_local.h, we're done with that file. <P>

<font color="#E07F44"><H4>
3. Define a 'cvar'
</H4></font>

Now open cg_main.c and find the cvar definitions: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
     vmCvar_t cg_deferPlayers; 
     vmCvar_t cg_drawTeamOverlay; 
     vmCvar_t cg_teamOverlayUserinfo; 

<font color="#ff6060">     vmCvar_t cg_weaponOrder; //WarZone 
     int cg_weaponsCount = -1; //WarZone</font>
</pre></font>

Now find the cvar table: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
      { &cg_buildScript, "com_buildScript", "0", 0 }, // force loading of all possible
     data amd error on failures 
      { &cg_paused, "cl_paused", "0", CVAR_ROM }, 
      { &cg_blood, "com_blood", "1", CVAR_ARCHIVE }, 
      { &cg_syncronousClients, "g_syncronousClients", "0", 0 }, // communicated by systeminfo 
<font color="#ff6060">      { &cg_weaponOrder, "cg_weaponOrder", "1/2/3/4/5/6/7/8/9", CVAR_ARCHIVE }, //WarZone</font>
</pre></font>

Note: you might need to add a comma at the end of the cg_syncronousClients definition (I put that comma in cyan
but its hardly obvious). <P>

<font color="#E07F44"><H4>
4. Define our Utility Functions
</H4></font>

Now we're going to add the bulk of my new code. The new code will live right below the cvar table: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
      { &cg_buildScript, "com_buildScript", "0", 0 }, // force loading of all possible data amd error on failures

      { &cg_paused, "cl_paused", "0", CVAR_ROM }, 
      { &cg_blood, "com_blood", "1", CVAR_ARCHIVE }, 
      { &cg_syncronousClients, "g_syncronousClients", "0", 0 }, // communicated by systeminfo

      { &cg_weaponOrder, "cg_weaponOrder", "1/2/3/4/5/6/7/8/9", CVAR_ARCHIVE }, //WarZone

     }; 

     int  cvarTableSize = sizeof( cvarTable ) / sizeof( cvarTable[0] ); 

<font color="#ff6060">     //&lt;WarZone&gt; 
     int weaponOrder[NUM_WEAPS]; 
     int weaponRawOrder[NUM_WEAPS]; 

     int NextWeapon (int curr) 
     { 
       int i; 
       int w = -1; 

       for (i = 0; i &lt; NUM_WEAPS; i++) 
       { 
         if (weaponRawOrder[i] == curr) 
         { 
           w = i; 
           break; 
         } 
       } 

       if (w == -1) 
         return curr; //shouldn't happen 

       return weaponRawOrder[(w + 1) % NUM_WEAPS]; 
     } 

     int PrevWeapon (int curr) 
     { 
       int i; 
       int w = -1; 

       for (i = 0; i &lt; NUM_WEAPS; i++) 
       { 
         if (weaponRawOrder[i] == curr) 
         { 
           w = i; 
           break; 
         } 
       } 

       if (w == -1) 
         return curr; //shouldn't happen 

       return weaponRawOrder[w - 1 >= 0 ? w - 1 : NUM_WEAPS - 1]; 
     } 

     int RateWeapon (int weapon) 
     { 
       weapon--; 

       if (weapon > 8 || weapon &lt; 0) 
         return 0; //bad weapon 

       return weaponOrder[weapon]; 
     } 

     int contains(int *list, int size, int number) 
     { 
       int i; 

       for (i = 0; i &lt; size; i++) 
         if (list[i] == number) return 1; 

       return 0; 
     } 

     void UpdateWeaponOrder (void) 
     { 
       char *order = cg_weaponOrder.string; 
       char weapon[3]; 
       int i, start; 
       int tempOrder[NUM_WEAPS]; 
       int weapUsed[NUM_WEAPS]; 
       int temp; 

       weapon[1] = '\0'; 
       memset(tempOrder, 0, sizeof(tempOrder)); 
       memset(weapUsed, 0, sizeof(weapUsed)); 

       i = 0; 
       while (order != NULL && *order != '\0' && i &lt; NUM_WEAPS) 
       { 
         weapon[0] = *order; 
         order++; 

         if (*order != '\\' && *order != '/') 
         { 
           weapon[1] = *order; 
           weapon[2] = '\0'; 
           order++; 
         } else { 
           weapon[1] = '\0'; 
         } 

         if (*order != '\0') 
           order++; 

         temp = atoi( weapon ); 
         if (temp &lt; 1 || temp > NUM_WEAPS) 
         { 
           CG_Printf( "Error: %i is out of range. Ignoring..\n", temp ); 
         } 
         else if ( contains( tempOrder, sizeof(tempOrder)/sizeof(tempOrder[0]), temp ) )

         { 
           CG_Printf( "Error: %s (%i) already in list. Ignoring..\n",
             (BG_FindItemForWeapon( temp ))->pickup_name, temp );

         } else { 
           tempOrder[i] = temp; 
           weapUsed[temp - 1] = 1; 
           i++; 
         } 
       } 

       //error checking.. 
       start = 0; 
       for (i = 0; i &lt; NUM_WEAPS; i++) 
       { 
         if (weapUsed[i]) 
           continue; 
         CG_Printf( "Error: %s (%i) not in list. Adding it to front of the list..\n",
           (BG_FindItemForWeapon( i + 1 ))->pickup_name, i + 1 );

         weaponRawOrder[start++] = i + 1; 
       } 
       //build the raw order list 
       for (i = start; i &lt; NUM_WEAPS; i++) 
         weaponRawOrder[i] = tempOrder[i - start]; 

       //built the remaping table 
       for (i = 0; i &lt; NUM_WEAPS; i++) 
         weaponOrder[weaponRawOrder[i] - 1] = i + 1; 

     } 
     //&lt;/WarZone&gt;</font>
</pre></font>

Ok now let's talk about what that code does for a sec. We just added NextWeapon(), PrevWeapon(),
RateWeapon(), contains(), and UpdateWeaponOrder(). UpdateWeaponOrder() will be called everytime a player
modifies their weapon order. NextWeapon() and PrevWeapon() are used to cycle through the players' weapon
precendeces. RateWeapon() returns the "rating" of a weapon which is used to determine if a new weapon is
better than the one the player is already carrying. contains() is a simple helper function which returns true if a list
contains a certain value. <P>

<font color="#E07F44"><H4>
5. Respond to Client Weapon Order Changes
</H4></font>

Now find CG_UpdateCvars(): 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
     void CG_UpdateCvars( void ) { 
      int   i; 
      cvarTable_t *cv; 

      for ( i = 0, cv = cvarTable ; i &lt; cvarTableSize ; i++, cv++ ) { 
       trap_Cvar_Update( cv->vmCvar ); 
      } 

      // check for modications here 

      // If team overlay is on, ask for updates from the server.  If its off, 
      // let the server know so we don't receive it 
      if ( drawTeamOverlayModificationCount != cg_drawTeamOverlay.modificationCount ) {

       drawTeamOverlayModificationCount = cg_drawTeamOverlay.modificationCount; 

       if ( cg_drawTeamOverlay.integer > 0 ) { 
        trap_Cvar_Set( "teamoverlay", "1" ); 
       } else { 
        trap_Cvar_Set( "teamoverlay", "0" ); 
       } 
      } 

<font color="#ff6060">       //WarZone 
       if ( cg_weaponsCount != cg_weaponOrder.modificationCount ) 
       { 
         UpdateWeaponOrder(); 
         cg_weaponsCount = cg_weaponOrder.modificationCount; 
       } 
     }</font>
</pre></font>

That code will call UpdateWeaponOrder() whenever the cvar "cg_weaponOrder" is modified. <P>

Save and close cg_main.c, we're done with that file. <P>

Next open cg_weapons.c and find the function CG_DrawWeaponSelect(). You can either comment out, or delete
the old function. Replace it with this function instead: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
<font color="#ff6060">     void CG_DrawWeaponSelect( void ) { 
      int  i; 
      int  bits; 
      int  count; 
      int  weap; 
      int  x, y, w; 
      char *name; 
      float *color; 

      // don't display if dead 
      if ( cg.predictedPlayerState.stats[STAT_HEALTH] &lt;= 0 ) { 
        return; 
      } 

      color = CG_FadeColor( cg.weaponSelectTime, WEAPON_SELECT_TIME ); 
      if ( !color ) { 
        return; 
      } 
      trap_R_SetColor( color ); 

      // showing weapon select clears pickup item display, but not the blend blob 
      cg.itemPickupTime = 0; 

      // count the number of weapons owned 
      bits = cg.snap->ps.stats[ STAT_WEAPONS ]; 
      count = 0; 
      for ( i = 1 ; i &lt; NUM_WEAPS ; i++ ) { //WarZone 
        if ( bits & ( 1 &lt;&lt; i ) ) { 
          count++; 
        } 
      } 

      x = 320 - count * 20; 
      y = 380; 

      weap = weaponRawOrder[NUM_WEAPS - 1]; //WarZone -- select last weapon 
      for ( i = 0 ; i &lt; NUM_WEAPS ; i++ ) { //WarZone 
        weap = NextWeapon( weap ); 

        if ( !( bits & ( 1 &lt;&lt; weap ) ) ) { 
          continue; 
        } 

        CG_RegisterWeapon( weap ); 

        // draw weapon icon 
        CG_DrawPic( x, y, 32, 32, cg_weapons[weap].weaponIcon ); 

        // draw selection marker 
        if ( weap == cg.weaponSelect ) { 
          CG_DrawPic( x-4, y-4, 40, 40, cgs.media.selectShader ); 
        } 

        // no ammo cross on top 
        if ( !cg.snap->ps.ammo[ weap ] ) { 
          CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader ); 
        } 

        x += 40; 
      } 

      // draw the selected name 
      if ( cg_weapons[ cg.weaponSelect ].item ) { 
        name = cg_weapons[ cg.weaponSelect ].item->pickup_name; 
        if ( name ) { 
          w = CG_DrawStrlen( name ) * BIGCHAR_WIDTH; 
          x = ( SCREEN_WIDTH - w ) / 2; 
          CG_DrawBigStringColor(x, y - 22, name, color); 
        } 
      } 

      trap_R_SetColor( NULL ); 
     }</font>
</pre></font>

This new function will display the weapons' icons in the player's customized weapon order -- very cool : ) <P>

<font color="#E07F44"><H4>
6. Replace CG_NextWeapon_f() and CG_PrevWeapon_f
</H4></font>

Now scroll down a bit and replace the function CG_NextWeapon_f() with this function: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
<font color="#ff6060">     void CG_NextWeapon_f( void ) { 
      int  i; 
      int  original; 

      if ( !cg.snap ) { 
       return; 
      } 
      if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) { 
       return; 
      } 

      cg.weaponSelectTime = cg.time; 
      original = cg.weaponSelect; 

       for ( i = 0 ; i &lt; NUM_WEAPS ; i++ ) { //WarZone 
       cg.weaponSelect = NextWeapon( cg.weaponSelect ); //WarZone 

       if ( cg.weaponSelect == WP_GAUNTLET ) { 
        continue;  // never cycle to gauntlet 
       } 
       if ( CG_WeaponSelectable( cg.weaponSelect ) ) { 
        break; 
       } 
      } 
     }</font>
</pre></font>

This function taps into the NextWeapon() function we added to cg_main.c to select the next weapon from the
user's customized weapon order. <P>

Scroll down again and replace CG_PrevWeapon_f() with this function: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
<font color="#ff6060">     void CG_PrevWeapon_f( void ) { 
      int  i; 
      int  original; 

      if ( !cg.snap ) { 
       return; 
      } 
      if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) { 
       return; 
      } 

      cg.weaponSelectTime = cg.time; 
      original = cg.weaponSelect; 

      for ( i = 0 ; i &lt; NUM_WEAPS ; i++ ) { //WarZone 
       cg.weaponSelect = PrevWeapon( cg.weaponSelect ); //WarZone 

       if ( cg.weaponSelect == WP_GAUNTLET ) { 
        continue;  // never cycle to gauntlet 
       } 
       if ( CG_WeaponSelectable( cg.weaponSelect ) ) { 
        break; 
       } 
      } 
     }</font>
</pre></font>

This function taps into the PrevWeapon() function we added to cg_main.c to select the weapon before the current
weapon (not to be confused with "select the last weapon I was using" functionality) from the user's customized
weapon order. <P>

<font color="#E07F44"><H4>
7. Replace CG_OutOfAmmoChange()
</H4></font>

Keep scrolling down and replace CG_OutOfAmmoChange() with this function: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
<font color="#ff6060">     void CG_OutOfAmmoChange( void ) { 
       int  i; 
       int  weap; 

       cg.weaponSelectTime = cg.time; 
       weap = weaponRawOrder[NUM_WEAPS - 1]; //WarZone -- pick the best weapon they have 

       for ( i = 0 ; i &lt; NUM_WEAPS ; i++, weap = PrevWeapon( weap )) { 
         if ( CG_WeaponSelectable( weap ) ) { 
           if (weap != WP_GAUNTLET) 
           { 
             cg.weaponSelect = weap; 
             return; 
           } 
         } 
       } 

       cg.weaponSelect = WP_GAUNTLET; 
     } </font>
</pre></font>
      

This causes the best weapon the player has (accoring to their customized weapon order) to be selected. If no
suitable weapon is found, the Gauntlet will be selected. <P>

Save and close cg_weapons.c, we're done with that file. <P>

<font color="#E07F44"><H4>
8. Change CG_ItemPickup
</H4></font>

Next open cg_event.c and find the function CG_ItemPickup() and replace it with this one: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
<font color="#ff6060">     static void CG_ItemPickup( int itemNum, int isnewitem ) { //WarZone 
       cg.itemPickup = itemNum; 
       cg.itemPickupTime = cg.time; 
       cg.itemPickupBlendTime = cg.time; 
       // see if it should be the grabbed weapon 
       if ( bg_itemlist[itemNum].giType == IT_WEAPON && isnewitem ) //WarZone 
       { 
         // select it immediately 
         if ( cg_autoswitch.integer && bg_itemlist[itemNum].giTag != WP_MACHINEGUN ) { 
           if (RateWeapon( bg_itemlist[itemNum].giTag) > RateWeapon( cg.weaponSelect )) //WarZone 
           { 
             cg.weaponSelectTime = cg.time; 
             cg.weaponSelect = bg_itemlist[itemNum].giTag; 
           } 
         } 
       } 
     }</font>
</pre></font>

If you were paying attention just then, you'd have noticed that I changed the function header for CG_ItemPickup()
to include a new parameter "isnewitem". This is the part of the code where this modification switches from client
side only to include server side changes. The reasoning behind this is that the client module has no effective way
of deciding if the player has just collected an item, or it the player has had one for a while. There are methods of
bypassing the server code, but none of them worked effectively (it is possible to create an "oldweapons" variable
and compare the current set against the old set, but this method breaks when the player dies and looses all of his
weapons at once). <P>

<font color="#E07F44"><H4>
9. Add a New Item Pickup Event
</H4></font>

Now find the CG_EntityEvent() function and scroll down to the EV_ITEM_PICKUP event: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
<font color="#ff6060">       case EV_ITEM_PICKUP2: 
       DEBUGNAME("EV_ITEM_PICKUP2"); 
         es->number = es->otherEntityNum; //this is a bit of a hack.. but it works GRREAT! </font>
       case EV_ITEM_PICKUP: 
       DEBUGNAME("EV_ITEM_PICKUP"); 
       { 
        gitem_t *item; 
        int  index; 
<font color="#ff6060">        int   isnewitem; //WarZone </font>

        index = es->eventParm;  // player predicted 
<font color="#ff6060">        isnewitem = es->otherEntityNum2; //WarZone </font>

        if ( index &lt; 1 || index >= bg_numItems ) { 
         break; 
        } 
        item = &bg_itemlist[ index ]; 

        // powerups and team items will have a separate global sound, this one 
        // will be played at prediction time 
        if ( item->giType == IT_POWERUP || item->giType == IT_TEAM) { 
          trap_S_StartSound (NULL, es->number, CHAN_AUTO, trap_S_RegisterSound( "sound/items/n_health.wav" ) ); 
        } else { 
          trap_S_StartSound (NULL, es->number, CHAN_AUTO, trap_S_RegisterSound( item->pickup_sound ) ); 
        } 

        // show icon and name on status bar 
        if ( es->number == cg.snap->ps.clientNum ) { 
<font color="#ff6060">          CG_ItemPickup( index, isnewitem ); //WarZone </font>
        } 
       } 
       break;
</pre></font>

Here again is the reference of new server code. The es->otherEntityNum2 must be set server side so that the
client code will know whether the item being picked up is a new item or not. The new "EV_ITEM_PICKUP2" event
will be explained further down. <P>

<font color="#E07F44"><H4>
10. Another Item Pickup Modification
</H4></font>

Next scroll down to the EV_GLOBAL_ITEM_PICKUP event and make the following change: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
      case EV_GLOBAL_ITEM_PICKUP: 
       DEBUGNAME("EV_GLOBAL_ITEM_PICKUP"); 
       { 
        gitem_t *item; 
        int  index; 

        index = es->eventParm;  // player predicted 

        if ( index &lt; 1 || index >= bg_numItems ) { 
          break; 
        } 
        item = &bg_itemlist[ index ]; 
        // powerup pickups are global 
        trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_AUTO, trap_S_RegisterSound( item->pickup_sound ) ); 

        // show icon and name on status bar 
        if ( es->number == cg.snap->ps.clientNum ) { 
<font color="#ff6060">          CG_ItemPickup( index, 1 ); //WarZone </font>
        } 
       } 
       break;
</pre></font>

That's it for cg_event.c, save and close. <P>

<font color="#E07F44"><H4>
11. Change Touch_Item() Behaviour
</H4></font>

Finally open g_items.c (in the /game code) and find the Touch_Item() function. We're only going to be making a
few small changes: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
     void Touch_Item (gentity_t *ent, gentity_t *other, trace_t *trace) { 
      int   respawn; 
<font color="#ff6060">      int   had = 1; //WarZone </font>
</pre></font>
     ... 
<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
      case IT_WEAPON: 
<font color="#ff6060">         //WarZone 
         if ( other->client->ps.stats[STAT_WEAPONS] & (1 &lt;&lt; ent->item->giTag) ) 
           had = 1; 
         else 
           had = 0; </font>
       respawn = Pickup_Weapon(ent, other); 
       break; 
</pre></font>

Now rip out the <b>if ( other->client->pers.predictItemPickup)</b> bit so that it looks like this :

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
<font color="#ff6060">      if ( 0 ) { //WarZone 
        //do nothing... </font>
      } else { 
<font color="#ff6060">         //WarZone 
         gentity_t *event; 

         event = G_TempEntity(ent->s.origin, EV_ITEM_PICKUP2); //WarZone
         event->s.eventParm = ent->s.modelindex; 
         event->s.otherEntityNum = other->s.number; 
         event->s.otherEntityNum2 = !had; //WarZone -- used to tell cgame if its a new weapon 
         event->r.svFlags |= SVF_BROADCAST; //broadcast it to everyone

//         G_AddEvent( other, EV_ITEM_PICKUP, ent->s.modelindex ); //kill this line </font>
      } 
     ... 
     }
</pre></font>

Note: The "..." lines mean "some code in between" -- do not put the "..." lines in your code. <P>

If you were paying attention just then you realized that we just made a drastic change to the item pickup logic. The
reasoning behind this is that (first and foremost) predicted events can only have one parameter; the second
reason to this is that the predictable event structure isn't very reliable. Have you ever been playing Q3 and run over
a weapon, but not hear the pick up sound? If so that is because the predictable events structure is getting flooded
and the EV_ITEM_PICKUP event is getting lost. <P>

Now the EV_ITEM_PICKUP events will be sent via an external temp entity to ensure that these vital event
messages are not lost in the heat of combat. <P>

Alright save and close g_items.c, done with that file. <P>

<font color="#E07F44"><H4>
12. Make the Server Show that it Supports Weapons Ordering
</H4></font>

Now for the last and final addition! Open g_main.c (also in /game) and scroll down to the end of the cvar table: 

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
      { &g_inactivity, "g_inactivity", "0", 0, 0, qtrue }, 
      { &g_debugMove, "g_debugMove", "0", 0, 0, qfalse }, 
      { &g_debugDamage, "g_debugDamage", "0", 0, 0, qfalse }, 
      { &g_debugAlloc, "g_debugAlloc", "0", 0, 0, qfalse }, 
      { &g_motd, "g_motd", "", 0, 0, qfalse }, 
      { &g_blood, "com_blood", "1", 0, 0, qfalse }, 

      { &g_podiumDist, "g_podiumDist", "80", 0, 0, qfalse }, 
      { &g_podiumDrop, "g_podiumDrop", "70", 0, 0, qfalse }, 

<font color="#ff6060">      { &g_allowVote, "g_allowVote", "1", 0, 0, qfalse }, //WarZone -- make sure there is a comma after the line above
      { NULL, "g_supportsWeaponOrder", "1", CVAR_SERVERINFO | CVAR_ROM, 0, qfalse } //WarZone</font>
</pre></font>

This additional cvar allows players to see which servers support the cg_weaponOrder variable. This is important
because the new client code will not be compatible with standard Q3A servers. It would be very easy to make a
filter for GameSpy (et al) to filter out servers that don't have g_supportsWeaponOrder set to 1. <P>

Save and close g_main.c, we're almost done... <p>

We almost forgot to define EV_ITEM_PICKUP2! Whoops.. so, open up bg_public.h and make this quick addition:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
      EV_POWERUP_QUAD, 
      EV_POWERUP_BATTLESUIT, 
      EV_POWERUP_REGEN, 

      EV_GIB_PLAYER,   // gib a previously living player 

      EV_DEBUG_LINE, 
      EV_TAUNT, //make sure there is a comma here! 
<font color="#ff6060">      EV_ITEM_PICKUP2,   // WarZone -- used to create a temp entity to send the pickup message </font>

     } entity_event_t;

Save and close bg_public.h, we're ALL DONE! 
</pre></font>

<font color="#E07F44"><H4>
13. End Notes.
</H4></font>


You'll need to do a recompile on the cgame and game code to see the changes in action. Now I'll explain how the
new cg_weaponOrder variable works. The default value for it is "1/2/3/4/5/6/7/8/9" which tells the game the order
that you want the weapons to switch in. The default order will yield a result similar in concept to the Quake2
weapon switching code (if newWeapon > myWeapon then switchWeapons): if you're holding a shotgun (3) and
pick up a rocket launcher (5), the rocket launcher will be selected. If you're holding a rocket launcher (5) and pick
up a grenade launcher (4) the rocket launcher will remain selected. <P>

Each weapon has a number assigned to it that corresponds to the key press required to activate that weapon: <br>
<LI>1 = Gauntlet 
<LI>2 = Machine Gun 
<LI>3 = Shot Gun 
<LI>4 = Grenade Launcher 
<LI>5 = Rocket Launcher 
<LI>6 = Lightning Gun 
<LI>7 = Rail Gun 
<LI>8 = Plasma Gun 
<LI>9 = BFG 10K 
<p>
My personal preference for the weapon order is "1/2/3/4/6/8/5/7/9" which is very similar to Quake2's weapon
order. <P>

If your mod is going to need more than 9 weapons, you'll need to change the NUM_WEAPS #define we added to
cg_local.h to the appropriate value. The cg_weaponOrder string needs to be formated as follows: <P>

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
     xx\xx\xx 
     xx/xx/xx 
     x/xx\xx 
     xx\x/xx 
     x/x\x 
     x/x/x 
     x\x\x 
</pre></font>

Meaning the string can contain up to two consectutive integer digits followed by a seperator which must be either
a forward slash or a back slash (/ or \). Duplicate or invalid entries are ignored and missing entries are inserted at
the begining of the list. So the string "2/2/3/3/4/5/6/7/8/8/8/9" will yield the same end result as "1/2/3/4/5/6/7/8/9"
because the missing "1" is inserted at the front of the list and the duplicate values are ignored. <P>

If you have any questions or comments please email me <A HREF="mailto:warzone@planetquake.com">here</A>.<P>



This code is Copyright (c) 2000 by Mark "WarZone" Smeltzer. You may freely use this code as long a credit for its existance is
given to the author.<P>


      <p>              
    </td>			  
  </tr>
</table>
	<!-- END MAIN TABLE -->
				                
  </tr>
</table>
<p>

	<!-- BEGIN BOTTOM HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial15.shtml"><< Prev</a> |
	Tutorial 16 |
	<a href="tutorial17.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTOTM HEIRARCHY -->

</body>
</html>
