<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257843921"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257843921"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257843921"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257843921"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial16.shtml"><< Prev</a> |
	Tutorial 17 |
	<a href="tutorial18.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>
  
   <!-- BEGIN LEFT NAVBAR MENU --> 
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;		
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->
	
	
	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top> 
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
TUTORIAL 17 - Scoreboard fragrate
</font></b><br>by <b><a href="mailto:hypothermia@planetquake.com"><font color="#FF0000">H</font><font color="#FFFF00">y</font><font color="#CC33CC">p</font><font color="#3333FF">o</font><font color="#FFFFFF">Thermia</font></A></b></center>

<p>Fed up of joining a game part the way through and being unable to win it? Want to show that
you're up there with the best... or that you could have won that match?

<p>Lets take a look at the scoreboard and see how we can get it showing your frags per minute. Along 
the way we'll find out about timing and a little on how the server keeps all the clients updated.
<br>&nbsp;

<font color="#E07F44"><h4>
1. Working out the fragrate</h4></font>

<p>Start by having a look at <b>cg_scoreboard.c</b> in the <b>cgame</b> directory. It contains
all the code used to draw the scoreboard (surprise!), and compared to other source files 
is quite straightforward to understand. After all we have a very clear picture of how a 
scoreboard works - don't we?

<p>The first function that we see is <b>CG_DrawClientScore</b>. This simply draws a
line of information that the client knows about the player. Things like the model picture,
frags, ping, time connected, and name. It's made a little more complicated because version
1.15 introduced a second, smaller, scoreboard for a larger number of players.

<p>We have the information we need here to construct a frag rate per minute: the number of frags
and the time connected (<b>score->time</b>). Unfortunately this is in minutes: it doesn't 
change quickly enough to be useful. Let's track back to where this information is set and see
what we can do.

<p><b>CG_DrawClientScore</b> is called from <b>CG_TeamScoreboard</b>, and we can see that
players are grouped into "teams": TEAM_RED, TEAM_BLUE, TEAM_FREE and TEAM_SPECTATOR. It also
appears that the list is already sorted for us, and there's nothing in <b>cg_scoreboard.c</b>
doing that for us. The stats are all stored in the array <b>cg.scores[]</b> so we need to find
where this is modified.

<p>Found it yet? A search shows that it's only modified in <b>cg_servercmds.c</b>, in response
to the server sending out a <b>scores</b> command. All commands sent by the server are processed in 
this file: so all the sorting and ordering must be done in the server. This
makes sense: the server carries the master records and arbitrates the game.

<p>Moving over to the code in the <b>game</b> directory we see that the scores command is sent
out by <b>DeathmatchScoreboardMessage()</b> in <b>g_cmds.c</b>. This file handles commands 
sent to the server by the client (one of which is a request to update the scores stored by
the client). This information is only sent out if there's a scoreboard to update.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
Com_sprintf (entry, sizeof(entry),
  " %i %i %i %i %i %i", level.sortedClients[i],
  cl->ps.persistant[PERS_SCORE], ping, (level.time - cl->pers.enterTime)/60000,
  scoreFlags, g_entities[level.sortedClients[i]].s.powerups);
</pre></font>

<p>The scores are sent out as a long string of numbers. We can see that the 4th number in each group
of six is the time connected to the server in minutes. The "divide by 60000" occurs because the 
standard unit of time in Quake3 is the millisecond - the conversion to minutes is made at this point.
<br>&nbsp;


<font color="#E07F44"><h4>
2. The changes we need to make</h4></font>

<p>We could adjust <b>DeathmatchScoreboardMessage()</b> to send out a calculated frag rate
as well, but there's a more efficient way. Since the number of frags and the time connected are
already sent, we'll just adjust these instead. If we change the time connected to seconds we
can then get a fragrate that updates with an accuracy every second (at best).

<p>We'll store the fragrate in the client as an integer: the actual fragrate per minute multiplied
up by 100. I've also imposed an (arbitrary) minimum 10 seconds for caclulating the fragrate. This
keeps any "logon and frag" luck to a minimum.

<p>The scoreboard will have to be re-sorted by fragrate: done in the client because
this is a client preference. This preference will be stored in a system variable.

<p>We're almost there. One more issue we need to concern ourselves with: the scoreboard can be
updated during the intermission (when someone disconnects for example), so we don't want our
time information to keep on changing during this period.

<p>After a little digging around we find that there's a variable already set up to help us: 
<b>level.intermissiontime</b>. It's set to zero when the server is playing a level, and marks
the time (in milliseconds) at which the intermission started. It helps the server time the duration
of the intermission - and we can make use of it too.

<p>Let's get our hands dirty.
<br>&nbsp;


<font color="#E07F44"><h4>
3. Coding the changes</h4></font>

<p>First of all we'll make the only server modification that's required (<b>g_cmds.c</b>) so
the connect time is sent in seconds (remembering that the unit of time is the millisecond in Quake3).
The use of <b>level.intermissiontime</b> prevents our fragrate times from ticking down while
we're in the intermission.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
==================
DeathmatchScoreboardMessage

==================
*/
void DeathmatchScoreboardMessage( gentity_t *ent ) {
   char      entry[1024];
   char      string[1400];
   int         stringlength;
   int         i, j;
   gclient_t   *cl;
   int         numSorted;
   int         scoreFlags;
<font color="#ff6060">   int       playtime;</font>

   // send the latest information on all clients
   string[0] = 0;
   stringlength = 0;
   scoreFlags = 0;

   // don't send more than 32 scores (FIXME?)
   numSorted = level.numConnectedClients;
   if ( numSorted > 32 ) {
      numSorted = 32;
   }

   for (i=0 ; i < numSorted ; i++) {
      int      ping;

      cl = &level.clients[level.sortedClients[i]];

      if ( cl->pers.connected == CON_CONNECTING ) {
         ping = -1;
      } else {
         ping = cl->ps.ping < 999 ? cl->ps.ping : 999;
      }

<font color="#ff6060">      // HypoThermia: get the correct time (rate shouldn't change
      // during intermission) 
      playtime = level.time;
      if (level.intermissiontime)
         playtime = level.intermissiontime;

      // Hypothermia: send over time in seconds instead of minutes</font>
      Com_sprintf (entry, sizeof(entry),
         " %i %i %i %i %i %i", level.sortedClients[i],
         cl->ps.persistant[PERS_SCORE], ping, <font color="#ff6060">(playtime - cl->pers.enterTime)/1000</font>,
         scoreFlags, g_entities[level.sortedClients[i]].s.powerups);
      j = strlen(entry);
      if (stringlength + j > 1024)
         break;
      strcpy (string + stringlength, entry);
      stringlength += j;
   }

   trap_SendServerCommand( ent-g_entities, va("scores %i %i %i%s", i,
      level.teamScores[TEAM_RED], level.teamScores[TEAM_BLUE],
      string ) );
}
</pre></font>
<br>&nbsp;

<p>From now on it's client side stuff. We need a new variable in the <b>score_t</b> struct
to store the fragrate (<b>cg_local.h</b>):

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct {
   int            client;
   int            score;
   int            ping;
   int            time;
   int            scoreFlags;
<font color="#ff6060">   int             fragrate;</font>
} score_t;
</pre></font>
<br>&nbsp;

<p>Next we're updating <b>cg_servercmds.c</b> so it handles the changed connect time. This is also
a good place to calculate the fragrate. Remember that the time is now in seconds and that fragrate
stores 100 times the number of frags per minute.

<p>This is in <b>CG_ParseScores()</b>:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
cg.scores[i].time = atoi( CG_Argv( i * 6 + 7 ) );
cg.scores[i].scoreFlags = atoi( CG_Argv( i * 6 + 8 ) );
powerups = atoi( CG_Argv( i * 6 + 9 ) );

<font color="#ff6060">// HypoThermia: fragrate based on minimum of 10 seconds
if (cg.scores[i].time < 10)
   cg.scores[i].fragrate = 600 * cg.scores[i].score;
else
   cg.scores[i].fragrate = (6000 * cg.scores[i].score) / cg.scores[i].time;

// HypoThermia: correct time value back to minutes
cg.scores[i].time /= 60;</font>

if ( cg.scores[i].client < 0 || cg.scores[i].client >= MAX_CLIENTS ) {
   cg.scores[i].client = 0;
}
</pre></font>
<br>&nbsp;

<p>With all the information in place we now need to adapt the scoreboard so it'll
display the fragrate. First of all, though, we'll add a system variable that stores
the type of scoreboard we've chosen to display:

Back in <b>cg_local.h</b> we add a reference to a global variable:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
extern   vmCvar_t      cg_blood;
extern   vmCvar_t      cg_predictItems;
extern   vmCvar_t      cg_deferPlayers;
<font color="#ff6060">extern   vmCvar_t      cg_fragRateScoreboard;</font>
</pre></font>
<br>&nbsp;

<p>and the static declaration of this variable into <b>cg_main.c</b>:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
vmCvar_t   cg_deferPlayers;
vmCvar_t   cg_drawTeamOverlay;
vmCvar_t   cg_teamOverlayUserinfo;
<font color="#ff6060">vmCvar_t   cg_fragRateScoreboard;</font>
</pre></font>

<p>and finally link it into the list of client commands (still in <b>cg_main.c</b>). Notice
that we don't need to do any more: we automatically get TAB completion in the console, and the
variable is saved from session to session by using the flag CVAR_ARCHIVE.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
{ &cg_drawTeamOverlay, "cg_drawTeamOverlay", "0", CVAR_ARCHIVE },
{ &cg_teamOverlayUserinfo, "teamoverlay", "0", CVAR_ROM | CVAR_USERINFO },
{ &cg_stats, "cg_stats", "0", 0 },
<font color="#ff6060">{ &cg_fragRateScoreboard, "cg_fragRateScoreboard", "0", CVAR_ARCHIVE },</font>
</pre></font>
<p>This variable has a default value of 0. When set to 1 the fragrate will be displayed in the scoreboard.
<br>&nbsp;

<p>Finally we get to make the changes to the scoreboard display. We need to convert the
fragrate back into a "floating point" display format, and to sort the scoreboard into the
correct order.

<p>First the display of the scoreboard. Notice that the changes to the "connecting" and 
"SPECT" formating strings realign the names properly. We also have to make sure we don't
overstep the formatting limits, and handle the negative numbers properly. We also have to handle
the case where the decimal part is less that ten, otherwise we'd get things like 
5.9 instead of 5.09.

<p>I don't think anyone is going to reach 99.99 frags per minute so we cap it there,
nor are they going to get a suicide rate below about 10 per minute.

<p>These changes are in <b>cg_scoreboard.c</b> in <b>CG_DrawClientScore()</b>.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// draw the score line
if ( score->ping == -1 ) {
   Com_sprintf(string, sizeof(string),
      <font color="#ff6060">" connecting     %s"</font>, ci->name);
} else if ( ci->team == TEAM_SPECTATOR ) {
   Com_sprintf(string, sizeof(string),
      <font color="#ff6060">" SPECT%4i %4i %s"</font>, score->ping, score->time, ci->name);
<font color="#ff6060">} else if (cg_fragRateScoreboard.integer) {
   // HypoThermia: display fractional fragrate
   int whole,frac;
   char* fmt;   // format string used

   if (score->fragrate < 0)
   {
      frac = ( -score->fragrate) % 100;
      whole = -( -score->fragrate - frac) / 100;
   }
   else if (score->fragrate < 9999)
   {
      frac = score->fragrate % 100;
      whole = score->fragrate / 100;
   }
   else
   {
      whole = 99;
      frac = 99;
   }

   if (frac < 10)
      fmt = "%2i.0%1i %4i %4i %s";
   else
      fmt = "%2i.%2i %4i %4i %s";

   Com_sprintf(string, sizeof(string),
      fmt, whole, frac, score->ping, score->time, ci->name);
}</font>
else {
   Com_sprintf(string, sizeof(string),
      "%5i %4i %4i %s", score->score, score->ping, score->time, ci->name);
}
</pre></font>

and a small modification to the highlight showing your score so it doesn't leave a text overhang
on the left:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
} else {
   hcolor[0] = 0.7;
   hcolor[1] = 0.7;
   hcolor[2] = 0.7;
}

hcolor[3] = fade * 0.7;
CG_FillRect( <font color="#ff6060">SB_SCORELINE_X</font>, y,
   640 - SB_SCORELINE_X - BIGCHAR_WIDTH, BIGCHAR_HEIGHT+1, hcolor );
</pre></font>

<p>Last of all we need to sort the scores.
As the results are already sorted by total frags, we need to re-sort it for fragrate. I've only
done this for standard deathmatch (TEAM_FREE), it doesn't really make much sense for other game 
types. The changes go into <b>CG_TeamScoreboard()</b> as this constructs each type of
team for the scoreboard.

<p>Instead of checking each item on the list and displaying only the correct ones (as the original 
<b>CG_TeamScoreboard()</b> did), we construct a list of items to be displayed. This list
is sorted if needed, and then displayed. The variable <b>count</b> has been removed,
it returns the number of lines drawn, and has been superceded by <b>indexcount</b>.

<p>Although there is a sort being performed each frame the scoreboard is drawn,
it's a quick one (rarely more than 16 items), and only moves pointers around in an array.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
CG_TeamScoreboard
=================
*/
static int CG_TeamScoreboard( int y, team_t team, float fade, int maxClients, int lineHeight ) {
<font color="#ff6060">   int      i, j;
   score_t   *score;
   float   color[4];
   clientInfo_t   *ci;
   score_t * scorelist[MAX_CLIENTS];
   int indexcount;

   color[0] = color[1] = color[2] = 1.0;
   color[3] = fade;

   // HypoThermia: build an indexed array into given team type
   indexcount = 0;
   for ( i = 0; i < cg.numScores && indexcount < maxClients; i++ )
   {
      score = &cg.scores[i];
      if ( team != cgs.clientinfo[ score->client ].team )
         continue;

      scorelist[indexcount] = score;
      indexcount++;
   }

   // HypoThermia: sort the score by frag rate for FREE players only
   // use a quick and dirty sort because we're moving pointers around
   if ( team == TEAM_FREE && cg_fragRateScoreboard.integer)
   {
      for ( i = 0; i < indexcount - 1; i++ )
         for ( j = i + 1; j < indexcount; j++ )
            if (scorelist[j]->fragrate > scorelist[i]->fragrate)
            {
               score_t *t;
               t = scorelist[i];
               scorelist[i] = scorelist[j];
               scorelist[j] = t;
            }
   }

   for ( i = 0 ; i < indexcount ; i++ ) {
      CG_DrawClientScore( y + lineHeight * i, scorelist[i], color, fade, lineHeight == SB_NORMAL_HEIGHT );
   }

   return indexcount;</font>
}
</pre></font>

<p>That's it! Compile the changes and try out the new scoreboard.
<br>&nbsp;

<font color="#E07F44"><h4>
4. Following on</h4></font>

<p>There are a number of changes that you might want to make. Displaying the 
fragrate and total number of frags is easily done, but the original scoreboard is too
wide to do this. You'll have to drop back to permanently using the scoreboard for large
numbers of players because of its smaller font.

<p>Of more interest is a game that relies only on fragrate to determine the winner.
This requires more server side modifications, and the trick of storing 100 times the
actual fragrate in an integer may be useful.

<p>Finally you might want a fragrate on your HUD. This is a little more involved as this 
tutorial uses information that is only sent when the scoreboard is displayed.

      <p>              
    </td>			  
  </tr>
</table>
	<!-- END MAIN TABLE -->
				                
  </tr>
</table>
<p>

	<!-- BEGIN BOTTOM HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial16.shtml"><< Prev</a> |
	Tutorial 17 |
	<a href="tutorial18.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTOTM HEIRARCHY -->

</body>
</html>
