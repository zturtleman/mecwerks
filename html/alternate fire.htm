<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257911546"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257911546"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257911546"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257911546"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
	<td><img src="/code3arena/images/ouricon.gif"></td>
	<td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial30.shtml"><< Prev</a> |
	Tutorial 31 |
	<a href="tutorial32.shtml">Next >></a>
	</b></font>
	</td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>

   <!-- BEGIN LEFT NAVBAR MENU -->
	<td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
	</td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;
	</td>
  </tr>
</table>
	</td>
	<!-- END DIVIDER -->


	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top>
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
TUTORIAL 31 - Alt Weapon Fire
</font></b><br>by <b><a href="mailto:hypothermia@planetquake.com">
<font color="#FF0000">H</font><font color="#FFFF00">y</font><font color="#CC33CC">p</font><font color="#3333FF">o</font><font color="#FFFFFF">Thermia</font></A></b></center>

<p>This tutorial has grown out of a long e-mail discussion with CAIRATH
about an alternative weapon fire mode. Although it only covers a small
amount of the work needed to implement such a thing, it should get you off
to the best possible start.

<p>Along the way we're going to take a look at how the player state is
managed by the server and predicted by the client in the <b>bg_pmove.c</b> source code.
This was crucial to the problems we were tackling, and hopefully
you'll come away from this tutorial with a better understanding of the
purpose, subtlety, and fragility, of this section of code.

<p>Although the solution to the problem (once identified) was pretty trivial,
I've not seen it linked to coding problems or solutions before. There are also
limitations: you can only use this idea twice before running out of resources.
So choose the things that you want to be "predictable" carefully.

<p>To show that everything is working we'll implement a trivial weapon
modification as an alternative fire mode: a double firing rate. When we're
done I'll also give a method for testing your mod without having a network
card or setting up an Internet connection.

<p>Finally, we'll take a look at how to reproduce the problem that needed to be
solved in the first place. Any feedback on a solution to this would be
appreciated.

<p>This tutorial was written for 1.17 code, but can be applied to 1.27 as well. 
Comments on how to update the code are at 
<a href="#source127">the end of the tutorial</a>.

<p>&nbsp;

<font color="#E07F44"><H4>
1. The role of bg_pmove.c
</H4></font>

<p>The code in <b>bg_pmove.c</b> is used in both the client and the server. It
takes as input the player state, and the most recent player mouse/keyboard
input, and extrapolates to produce a new player state as output.

<p>The input from the client is provided through the <b>usercmd_t</b> data
structure, and is marked with a time index <b>serverTime</b>. This time index
acts to sort the commands into order, and indicate their duration or influence.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct usercmd_s {
	int          	serverTime;
	byte         	buttons;
	byte         	weapon;
	int          	angles[3];
	signed char  	forwardmove, rightmove, upmove;
} usercmd_t;
</pre></font>

<p>This <b>usercmd_t</b> originates in the client executable and can only be read
(not modified) in the client QVM code. You'll realize the importance of this when you
understand that the <b>usercmd_t</b> data contains information on: when
you fire, how much movement you've requested, how much you've
changed your orientation. This is all under the control of the executable, so
you can't intercept or process commands like +attack. The result of issuing
a command like +attack is stored in the <b>usercmd_t</b> instead, and can't be
tampered with in a VM.

<p>The <b>usercmd_t</b> is then sent to the server (possibly across an
Internet connection) with a time delay related to your game ping. When it
arrives at the server, its used to bring your movement and position up to date
by the code in <b>bg_pmove.c</b>.

<p>How does the server stop some players running
ahead of each other? The answer lies in the use of &quot;snapshots&quot;, which
the server generates 40 times a second. If a
<b>usercmd_t</b> arrives that goes beyond the current snapshot, then its held
back and processed in the next correct snapshot.

<p>For the server this gives the &quot;true&quot; position, orientation,
weapon state, and action of that player. I use the word
&quot;true&quot; to mean the state that is used to decide what damage is
taken, whether a shot from another player hits or misses, whether the player
lands on a platform etc. This true position is then sent back to the client, which
updates the player state accordingly.

<p>Back in the client things are a little more interesting, and possibly more
difficult to follow. The <b>usercmd_t</b> data is generated in the
client, forwarded to the server, and then sent back. There will be a time
delay between the command being issued and the response to that command being
received from the server. In order to mask this "round trip" delay as
much as possible, the client uses <b>bg_pmove.c</b> for prediction.

<p>Prediction takes the last valid player state issued by the server,
and starts applying <b>usercmd_t</b> data to it <i>as they're generated
in the client</i>, completely bypassing the connection to the server. So
as you move through the map - provided you have a clean connection -
you'll have smooth movement. Other players will see your
movement based only on the true state maintained by the server.

<p>As &quot;true&quot; player states are returned from the server they
are merged with the client predicted state. The merging process
&quot;decays&quot; the predicted state away so the player state returns
to the true state provided by the server. If, however, your position is
too far away for a decay to be viable, you immediately jump sharply to
the new position.


<p>&nbsp;

<font color="#E07F44"><H4>
1.1 Tapping into usercmd_t
</H4></font>

<p>Because our client and server can only read the data stored in
<b>usercmd_t</b> (generated by the clients executable) we can't directly
modify these values and return them to the executable. If we want to make use
of <b>usercmd_t</b> in <b>bg_pmove.c</b> then we're going to have to look
outside the QVM code.

<p>Fortunately we don't have to look far: Id have very kindly left some
unused but functional data in <b>usercmd_t</b>. If you take a look in
<b>q_shared.h</b> you'll find a family of constants <b>BUTTON_*</b> that
refer to the possible states of the <nobr><b>usercmd_t-&gt;buttons</b></nobr> bits:

<p>&nbsp;

<center><table width="80%" cellspacing="0" cellpadding="10" border="1">

<!-- Begin table row -->
<tr><td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
<b>Defined constant</b>
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
<b>Value of constant</b>
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
<b>Bind command</b>
</td></tr>


<!-- Begin table row -->
<tr><td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
BUTTON_ATTACK
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
1
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
+attack
</td></tr>


<!-- Begin table row -->
<tr><td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
BUTTON_TALK
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
2
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
messagemode, toggleconsole, togglemenu
</td></tr>


<!-- Begin table row -->
<tr><td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
BUTTON_USE_HOLDABLE
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
4
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
+button2
</td></tr>


<!-- Begin table row -->
<tr><td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
BUTTON_GESTURE
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
8
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
+button3
</td></tr>


<!-- Begin table row -->
<tr><td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
BUTTON_WALKING
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
16
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
+speed
</td></tr>


<!-- Begin table row -->
<tr><td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
BUTTON_ANY
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
128
</td>

<td align="center">
<font face="Verdana, Arial" size="2" color="#eeeeee">
See below
</td></tr>


</table></center>

<p>All of these commands are intercepted and managed by the client executable
(not the client VM!) The gap in between <b>BUTTON_WALKING</b> and
<b>BUTTON_ANY</b> shows that there are two unallocated values: 32 and 64. Can we
make use of these?

<p>Inspiration came from the Q3
<a href="http://www.planetquake.com/console">console command list</a>
maintained by <a href="mailto:jakfrost@planetquake.com">JakFrost</a> here
at PlanetQuake. The commands <b>+button5</b> and <b>+button6</b> are available
but not allocated for use. They map directly to the values 32 and 64
respectively. To make use of this we just need to add the appropriate constant
to <b>q_shared.h</b> and use it in <b>bg_pmove.c</b>. These commands can
then be bound to a key or mouse button, ready for use.

<p>Unfortunately we're limited to having only two &quot;predictable&quot;
commands, so you need to make sure that you really do need to use them!
The framework that I've provided here gives an obvious example:
adding an alternative fire mode. I've left it as a framework so you can
decide how and what you want to implement: a double shotgun effect, a dual
mode rocket launcher/grenade thrower... you decide!

<p>Finally, the <b>BUTTON_ANY</b> flag isn't used within the VM source code, so
there's no <i>obvious</i> use for it. 
<a href="mailto:knettergek@planet.nl">KnetterGek</a> has sent in a good 
explanation of what it's for: as part of the connection &quot;keep alive&quot; 
network code. Transmitting a <b>usercmd_t</b> between the client and 
the server executables includes a time stamp from the client. The server can 
gauge the quality of connection and decide to kick someone if it gets nothing for
the allowed time-out period. This allows a spectator (and, annoyingly, a player) 
to stay connected even if they're not using the keyboard or mouse.

<p>&nbsp;

<font color="#E07F44"><H4>
2. The framework code changes
</H4></font>

<p>There are only a few lines of code we need to add to give us the
alt-fire mode for all weapons. With this in place you can then make the
changes you need to implement your ideas of what this alt-fire function
should actually do in your mod.

<p>Files modified:

<ul>
<li><font color="#0080FF">bg_public.h</font>
<li><font color="#0080FF">q_shared.h</font>
<li><font color="#0080FF">bg_pmove.c</font>
<li><font color="#0080FF">g_active.c</font>
<li><font color="#0080FF">cg_event.c</font>
</ul>

<p>In <b>bg_public.h</b> we need an additional event flag for the alt-fire
mode. This event flag will then be implemented in both the client and server.
Inside the <b>entity_event_t</b> enumeration at about line 308:


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef enum {
	// code snipped
	EV_FIRE_WEAPON,
<font color="#ff6060">	EV_ALTFIRE_WEAPON,</font>

	EV_USE_ITEM0,
	// code snipped
} entity_event_t;
</pre></font>

<p>&nbsp;

<p>The second change we need to make is the flag that identifies
when <b>button5</b> has been pressed. This takes on the value 32 (2^5),
leaving 64 (2^6) for the use of <b>button6</b>.

<p>In <b>q_shared.h</b> at about line 895:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
#define	BUTTON_ATTACK		1
#define	BUTTON_TALK			2
#define	BUTTON_USE_HOLDABLE	4
#define	BUTTON_GESTURE		8
#define	BUTTON_WALKING		16
<font color="#ff6060">#define BUTTON_ALT_ATTACK	32  // button5</font>
#define	BUTTON_ANY			128
</pre></font>

<p>&nbsp;

<p>With the flags that we need introduced, we now add the code in
<b>bg_pmove.c</b> that handles when <b>button5</b> has been pressed. This
replicates the behaviour of <b>BUTTON_ATTACK</b>, and generates out new event,
<b>EV_ALTFIRE_WEAPON</b>.

<p>Working in <b>bg_pmove.c</b> in <b>PM_Weapon()</b> at about line 1497 we
check for a successful fire:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// check for fire
if ( ! (pm->cmd.buttons & <font color="#ff6060">(BUTTON_ATTACK | BUTTON_ALT_ATTACK)</font>) ) {
	pm->ps->weaponTime = 0;
	pm->ps->weaponstate = WEAPON_READY;
	return;
}
</pre></font>

<p>and then send out the event:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// take an ammo away if not infinite
if ( pm->ps->ammo[ pm->ps->weapon ] != -1 ) {
	pm->ps->ammo[ pm->ps->weapon ]--;
}

// fire weapon
<font color="#ff6060">if (pm->cmd.buttons & BUTTON_ALT_ATTACK)
	PM_AddEvent( EV_ALTFIRE_WEAPON );
else</font>
	PM_AddEvent( EV_FIRE_WEAPON );
</pre></font>


<p>Note that the code we've replaced used the numerical value of 1 (one).
This was the value of <b>BUTTON_ATTACK</b>, and we've now made it explicit.

<p>&nbsp;


<p>All that remains is to place the handling of the event in the client and
server code. Our changes here are part of the framework, and default to the
fire mode already implemented.

<p>When you include this in your mod you'll want
to separate out <b>EV_ALTFIRE_WEAPON</b> from <b>EV_FIRE_WEAPON</b> in some
way, and give your own firing code. In the client you'll be handling
all of the animations displayed on screen, while in the server you'll be
concerned with the game physics, collision detection, damage inflicted,
and so on. For the client think presentation, for the server think implementation 
(at least all those things that don't or can't go into <b>bg_pmove.c</b>).

<p>For the client event handling, add the following to <b>CG_EntityEvent()</b>
in <b>cg_event.c</b> at about line 608:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
case EV_CHANGE_WEAPON:
	DEBUGNAME("EV_CHANGE_WEAPON");
	trap_S_StartSound (NULL, es->number,
		CHAN_AUTO, cgs.media.selectSound );
	break;
case EV_FIRE_WEAPON:
<font color="#ff6060">case EV_ALTFIRE_WEAPON:
	if (event == EV_ALTFIRE_WEAPON)
		DEBUGNAME("EV_ALTFIRE_WEAPON")
	else</font>
		DEBUGNAME("EV_FIRE_WEAPON");
	CG_FireWeapon( cent );
	break;
</pre></font>

<p>and for the server event handling, add the following to <b>ClientEvents()</b>
in <b>g_active.c</b> around line 476:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	G_Damage (ent, NULL, NULL, NULL, NULL, damage, 0, MOD_FALLING);
	break;

<font color="#ff6060">case EV_ALTFIRE_WEAPON:</font>
case EV_FIRE_WEAPON:
	FireWeapon( ent );
	break;

case EV_USE_ITEM1:		// teleporter
	// drop flags in CTF
	item = NULL;
</pre></font>

<p>&nbsp;

<p>Compile these changes and then bind a key or mouse button to <b>button5</b>
using the console, like this:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
bind mouse3 +button5
</pre></font>

<p>When you use the alt-fire mode you'll see that the weapon fires as normal.
Not much to show, so we'll make a small example to show that we do actually have
an alternative fire mode.

<p>Told you the framework changes were trivial :)


<p>&nbsp;

<font color="#E07F44"><H4>
3. A simple example
</H4></font>

<p>At the moment our alt-fire mode behaves identically to the existing weapon
fire. Just to show that we are actually using the new code, we'll introduce
a trivial example: double fire rate.

<p>Open up <b>bg_pmove.c</b> and, at the end of <b>PM_Weapon()</b>, about
line 1575, insert the following code:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
if ( pm->ps->powerups[PW_HASTE] ) {
	addTime /= 1.3;
}

<font color="#ff6060">// Hypo: simple alt-fire example
if (pm->cmd.buttons & BUTTON_ALT_ATTACK)
	addTime /= 2.0;</font>

pm->ps->weaponTime += addTime;
</pre></font>

<p>Re-compile both the client and server code, and try it out.

<p>Lethal!

<p>&nbsp;

<font color="#E07F44"><H4>
4. A more thorough test
</H4></font>

<p>You might want to give your mod a more thorough work out, testing the
behaviour of your mod as a server. If you've got a local network available
then you're already sorted... but what if you've only got the machine you're
working on?

<p>The answer is to run Q3 as a dedicated server, then start up a normal game
and connect to this dedicated server. Here are the steps:

<ol>
<p><li>Run a dedicated server with the following command line:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
quake3.exe +set fs_game source +set sv_pure 0 +set dedicated 1
</pre></font>

<p>This assumes that you're working in the mod directory <b>quake3\source</b>.
You need the <b>+set sv_pure 0</b> to test a DLL build, or a VM file outside of a
PK3 package.

<p>You should see a window with a server console appear, you then
need to start a map by typing &quot;map q3dm1&quot; (without the quotes!).

<p><li>Start up another copy of Q3 as your &quot;client&quot;. When it gets
to the main menu, pull down the console and type:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
\connect 127.0.0.1
</pre></font>

<p>You should see a connection screen and you'll soon join the dedicated
server that you started in step 1. You can now test your mod
across a high bandwidth connection.

<p>You might find play is a little jerky on a Windows box
if you've only got a single CPU, and you'll definitely have CPU related problems
if you add bots. This is the competition between the OpenGL frame renderer
and the server as a separate process, as managed by the OS.

</ol>

<p>&nbsp;


<font color="#E07F44"><H4>
5. A problem you should be aware of...
</H4></font>

<p>This part of the tutorial isn't part of the framework. It's a
distilled version of the problem that CAIRATH needed to solve - a lag
between the server and client on a network connection in the code he was
using to implement an alt-fire mode. After covering a lot of ground, we
were both surprised at the simplicity of the solution I eventually
arrived at.

<p>The lag problem appears to be caused by sending two commands from the
client to the server in quick succession, and only appears when the
server is running on a separate machine or process (as described in
section 4, above). For about a second the client and server appear to be
disconnected, the lagometer screen capture below shows what this looks
like:

<p><center><img src="ping_loss.jpg" height="60" width="60"><br>
<small>The effect of sending two commands to the server<br>very quickly
(bottom half = ping)</small></center>

<p>Remembering that the bottom part of the lagometer shows a height proportional
to the ping to the server, and green means the packets are getting through as
properly received snapshots, it look like something weird is going on here.
When this &quot;blip&quot; is over your position jerks, showing that you've
been moving around on predicted movement from the <u>client</u>
<b>bg_pmove.c</b>.

<p>You can enable the lagometer by giving the console command
<b>cg_lagometer 1</b>.

<p>To test this: you need to set up a dedicated server as in section 4
(one across a LAN/Internet should have the same effect), and connect
to it. Bind a mouse button or key to the command <b>where</b> like this:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
\bind mouse3 where
</pre></font>

<p>If you trigger this command twice in succession, quickly, you get the
ping blip shown above. Repeatedly and quickly sending this command will
even cause the "Connection interrupted" message. The fact that the
server command <b>where</b> prints a value on the console is irrelevant, you can
set up your own command in the server that does nothing and the effect
is the same.

<p>You can also create this effect by the use of
<b>trap_SendConsoleCommand()</b> in client code. In the absence of any
other information, I can only assume this is a bug in the Q3 networking
code. It's possible that this is actually a feature of the game code: to
stop a client from flooding the server with commands and saturating bandwidth.

<p>

<center><table width="85%"><tr><td>
<font face="Verdana, Arial" size="2" color="#eeeeee">
<p>Several of you have indeed e-mailed to say that this is a feature of the 
game code. It can be turned off by setting <b>sv_FloodProtect 0</b>, but this 
introduces problems with rogue and abusive players flooding the server. The most
annoying part of this method of flood protection is the blocking of the stream of 
game data from the server. With 1.25 about to come out, I hope this is fixed!
</td></tr></table></center>

<p>Finally, you don't get this problem if you use the prediction methods
from <b>usercmd_t</b> described in this tutorial . That makes the two
free &quot;slots&quot; for <b>button5</b> and <b>button6</b> an
especially precious resource.


<p>&nbsp;

<a name="source127"></a>
<font color="#E07F44"><H4>
6. Using this tutorial with 1.27 code
</H4></font>


<p>The use of these <b>BUTTON_*</b> in the 1.27 source now differs slightly from
the old 1.17 way of doing things that this tutorial describes. First of all there
are now quite a few more of them:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
#define	BUTTON_ATTACK		1
#define	BUTTON_TALK		2
#define	BUTTON_USE_HOLDABLE	4
#define	BUTTON_GESTURE		8
#define	BUTTON_WALKING		16

#define BUTTON_AFFIRMATIVE	32
#define	BUTTON_NEGATIVE		64

#define BUTTON_GETFLAG		128
#define BUTTON_GUARDBASE	256
#define BUTTON_PATROL		512
#define BUTTON_FOLLOWME		1024

#define	BUTTON_ANY		2048
</pre></font>

<p>These new flags from <b>BUTTON_AFFIRMATIVE</b> to
<b>BUTTON_FOLLOWME</b> are a part of the Team Arena MISSIONPACK code,
and animate visible commands. If you're compiling for the original Q3
then these values aren't used to generate model animation. 

<p>However, the bot code <u>does</u> use these values to add model animation,
constructing a <b>usercmd_t</b> that &quot;fakes&quot; the movement and
keypress requests. If you want to reuse these <b>BUTTON_*</b> values <u>and</u>
have bot support (and you aren't planning on doing a TA version of your
mod) then you'll have to remove the bot usage for them as well. A quick
search through the code shows where they're used.

<p>There are, however, still values that you can use: they're above
<b>BUTTON_ANY</b>. The values 4096, 8192, and 16384 (corresponding to
<b>button12</b>, <b>button13</b>, and <b>button14</b> respectively).
It's possible that higher values might also work, but sometimes the
network code clips a 32-bit value (the int that these flags are stored
in) down to 16-bits to save space.

Lastly, the flooding problem described in section 5 has been reduced
considerably. Commands that are issued no longer create a flood induced
lag while they're held up. However, I've noticed that sometimes a
command fails to get through to the server (two say_team binds pressed
in quick succession often does it).

	  <p>
	</td>
  </tr>
</table>
	<!-- END MAIN TABLE -->

  </tr>
</table>
<p>

	<!-- BEGIN BOTTOM HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
	<td><img src="/code3arena/images/ouricon.gif"></td>
	<td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial30.shtml"><< Prev</a> |
	Tutorial 31 |
	<a href="tutorial32.shtml">Next >></a>
	</b></font>
	</td>
  </tr>
</table>
<p>
	<!-- END BOTOTM HEIRARCHY -->

</body>
</html>
