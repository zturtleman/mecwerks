<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257981765"></SCRIPT><!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257981765"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257981765"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257981765"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article2.shtml"><< Prev</a> |
	Article 3 |
	<a href="article4.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>
  
   <!-- BEGIN LEFT NAVBAR MENU --> 
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;		
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->
	
	
	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top> 
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><font color="#C05F00" size=5><b>
ARTICLE 3 - Getting the most from Quake3 C</b>
</font><br>by <a href="mailto:hypothermia@planetquake.com"><font color="#FF0000">H</font><font color="#FFFF00">y</font><font color="#CC33CC">p</font><font color="#3333FF">o</font><font color="#FFFFFF">Thermia</font></A></center><p>

<p>This article is intended to help you get oriented on the Quake3 source code. Most of what
is written here should already be known to experienced and capable programmers.

<p>The Quake3 source is written so it will compile using ANSI C. This is of great 
benefit to the mod developer community because there are already excellent tools out there
aimed at the professional coder. However: there is no full implementation of the standard
library.

<p>There's too much code to provide an account of what everything does. However, 
articles and tutorials here at Code3Arena should help you get oriented on 
some more specific areas.

<p>You'll also find that many of the comments I've made are a matter of personal style. 
There is no 'best' coding style in C, only flame wars about it. There are, however, ways
you can help yourself write code that's easier to understand, debug, and change
at a later date.

<p>There are some links to useful resources at the end of the page.
<br>&nbsp;

<font color="#E07F44"><h4>
Getting started</h4></font>

<p>The first and most important thing is to be able to compile the code using your compiler
and header files. If you've got Microsoft Visual C++ then just open up the project and do
a test compile. You're up and running already.

<p>For those that have another compiler you might have to do some extra work. I've already
written a tutorial ("Compiling without Microsoft Visual C++")that should get you
off the ground. Don't forget to check the Code3Arena downloads for solutions others have
already prepared for your compiler/platform.

<p>Now you have the ability to build the code, we'll start taking a more detailed look.
<br>&nbsp;

<font color="#E07F44"><h4>
Program structure</h4></font>

<p>The game code is split into three basic modules, source/ui, source/game and source/cgame.
Each of these contains the code for the user interface (menus and stuff), the 
running of a game server, and the display of the information from the server on your
(client) machine, respectively.

<p>Note that the game server (game) and client (cgame) are separate. Both are required to 
play the game, but only the client <b>needs</b> to be running on your machine. The server
can run on a remote machine (when you make an Internet connection) or on your own machine
(when you play single player against the bots).

<p>It's important to understand this model, as it dictates where you need to make 
modifications. Trying to place a menu in the server code (game) just doesn't make sense.
At the very least you wouldn't be able to use this menu while playing online.

<p>Each of these modules runs independently, and there are only limited forms of 
communication between modules. 
<br>&nbsp;

<font color="#E07F44"><h4>
Source files and functions</h4></font>

<p>Within each of these three modules there are a large number of source code files. 
Each of these files implements a feature (or a small group of related features) of the game.

<p>This helps considerably when you're trying to find your way around the code. Almost all of the
functions required to implement that feature will be within that one source file.

<p>When adding new functions it's beneficial to name them with a unique 
prefix for that source file. That way, if the
function is called from another source file, you have a good idea of where to find it.
For example: All the functions in <b>ui_servers2.c</b> are prefixed with <b>ArenaServers_</b>,
almost guaranteeing that the name won't be duplicated elsewhere in the source.

<p>You'll find this hasn't been applied consistantly: a result of more than one programmer
working on the source.
<br>&nbsp;

<font color="#E07F44"><h4>
Understand the code before making changes</h4></font>

<p>While tinkering around in the code is fun, making a serious modification requires
a deeper understanding. Make sure you understand the dependencies and relationships
between variables and functions.

<p>Strong clues can be found in the way data structures are used, and (obviously) the names
of the variables. Concentrate on a function that implements a particular feature,
and build up from there.

<p>More clues can be found by the use of static functions and local data, you know there are
no modifications outside that source file.

<p>When you've made a modification and you're trying to debug it, the effort made to understand
the code will reap benefits.
<br>&nbsp;

<font color="#E07F44"><h4>
C library functions</h4></font>

<p>There is no (complete) C standard library for Quake3! 

<p>If you use or need a function from the C standard library you'll have to implement 
it yourself. There are definitions in <b>q_shared.c</b> of functions that have the 
expected behaviour. Each is prefixed by a <b>Q_</b> so I'll call them Q functions. Look
there first for library functions.

<p>There is also a subset of library functions implemented in <b>bg_lib.c</b>. This
file is only included when building for the Quake3 Virtual Machine. It will assist while
you make the transition to the Q functions.

<p>If you appear to have any problems with standard C library calls between your binaries and
virtual machine bytecode then convert to the Q functions used by the virtual machine. 
You'll then be getting the same code.
<br>&nbsp;

<font color="#E07F44"><h4>
No malloc!</h4></font>

<p>This is the most obvious omission from the C library. If you use malloc like a crutch
then you'll have to change your coding style.

<p>The omission is a Good Thing(tm).

<p>It forces coding using data that is static and/or part of the stack. You now have
to think about how much space you need for your data in the worst case. In other words you
have to think more about the design of your program.

<p>It also means that the Virtual Machine is more stable: no bugged bytecode QVM eating up 
memory on the server.

<p>Having said that, there are some algorithms that benefit from "memory allocation".
It's possible to provide your own malloc() like behaviour, but this introduces a 
whole new class of bugs to worry about.
<br>&nbsp;

<font color="#E07F44"><h4>
Calls into the Quake3 executable</h4></font>

<p>There are some things that just need to be done as efficiently as possible. This means a
call into the executable. All of these function names start with <b>trap_</b> and call
the executable in the <b>*_syscalls.c</b> files.

<p>The only way to learn what these functions can do for you is by understanding the data 
structures passed, and how their data is prepared and used within the source code.
<br>&nbsp;

<font color="#E07F44"><h4>
Commenting your code</h4></font>

<p>The most accurate documentation of the code is the code itself. It documents every
bug as yet undiscovered, and will automatically document changes made to it.

<p>Unfortunately the code doesn't help you understand itself.

<p>Accurate and frequent comments on what you're doing (and how you're doing it) 
will do wonders when you come to track down that obscure bug whether 6 minutes 
or 6 months later.

<p>Just make sure they're <i>accurate</i> comments!
<br>&nbsp;

<font color="#E07F44"><h4>
Struct-ureless code</h4></font>

<p>When you use a data structure in C it needs to be referred to using the keyword
<b>struct</b>. There is a neat trick that allows you to get around this and save typing,
as well as annoying compiler errors when you forget to put it in.

<p>Lets have a look at an example taken from <b>ui/servers2.c</b>:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct servernode_s {
   char   adrstr[MAX_ADDRESSLENGTH];
   char   hostname[MAX_HOSTNAMELENGTH];
   char   mapname[MAX_MAPNAMELENGTH];
   int    numclients;
   int    maxclients;
   int    pingtime;
   int    gametype;
   int    nettype;
} servernode_t;
</pre></font>

<p>You can access the data type in one of two ways:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
struct servernode_s* servernodeptr;
</pre></font>

<p>or:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
servernode_t* servernodeptr;
</pre></font>

<p>You choose!
<br>&nbsp;

<font color="#E07F44"><h4>
Use constants</h4></font>

<p>If you're using a number to represent something that's used in several
places then you should <b>#define</b> it using a descriptive name. Use
that #def'd name instead of the number.

<p>If you need to come back to change the code then you have only one
dependancy to change. The #def'd name is also another way of helping
document your code.

<p>There are many, many examples of this all over the Quake3 Source. In fact
they don't write the code any other way. 

<p>Get used to it. Now!
<br>&nbsp;


<font color="#E07F44"><h4>
Avoid globals: use static declaration</h4></font>

<p>By putting too many data types and functions into header files and making them 
global you risk a name clash.

<p>You can avoid this by defining the datatype in the source file itself. The definition
is only visible within that file, and there will be no clashes with other data types or 
function names elsewhere.

<p>For functions you can declare them <b>static</b>. This means they can't be accessed
from outside the source file they're defined in. No possibility of names colliding. 
One other benefit: if you define the function before it's first use then you don't need
to declare it's prototype.

<p>If you need a datatype or function declaration to be available in more than one source
file then use a header file. Put the declaration in <b>q_shared.h</b> as a last resort.

<p>Under no circumstances should you refer to the same datatype or function by using 
separate declarations in two different source files. You'll get weird synchronization 
errors when you forget to change one of them.
<br>&nbsp;

<font color="#E07F44"><h4>
American spelling</h4></font>

<p>Those of you that use English (rather than American) will find the spelling in the code
is... different.

<p>Unfortunately this presents a problem. If you search the code for keywords 
on a regular basis then you won't catch everything if you've used English spelling only
for your modifications.

<p>In order to help searches through the code, I'd suggest you consider using American
spelling only. Comments can use any spelling you like!
<br>&nbsp;

<font color="#E07F44"><h4>
Resources for further reading</h4></font>

<p>There are quite a few documents and news groups out there that will help you get used
to C coding. Note that they are oriented towards a full implementation of ANSI C 
(libraries and all).

<p>A Meta-FAQ that covers just about all the ground can be found at the
<a href="http://www.faqs.org/faqs/C-faq/">C-FAQ Index</a>.

<p>For those who are interested in writing code in a more efficient way then I'd 
suggest looking at 
<a href="http://reality.sgi.com/terada_nsg/Graphics/OpenGL/OGLonSGI/OpenGLonSGI-246.html">Optimizing database rendering code</a>.
Although it's aimed at implementing an efficient OpenGL driver, its application is more general.
Use these techniques in a performance critical section of code. Not all of them are guaranteed
to work on the Quake Virtual Machine, but you'll get a few good ideas.

      <p>              
    </td>			  
  </tr>
</table>
	<!-- END MAIN TABLE -->
				                
  </tr>
</table>
<p>

	<!-- BEGIN BOTTOM HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article2.shtml"><< Prev</a> |
	Article 3 |
	<a href="article4.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTTOM HEIRARCHY -->

</body>
</html>
