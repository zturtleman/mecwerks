<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0055)http://quakestyle.telefragged.com/quake3/tutorial20.htm -->
<HTML><HEAD><TITLE>Quake Style - Quake 3 Tutorials - Weapon Mods - Quake3 Translocater!</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<STYLE type=text/css>BODY {
	FONT-FAMILY: verdana
}
TABLE {
	FONT-FAMILY: verdana
}
TR {
	FONT-FAMILY: verdana
}
TD {
	FONT-FAMILY: verdana
}
INPUT {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
TEXTAREA {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
SELECT {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
OPTION {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
PRE {
	FONT-FAMILY: verdana; FONT-WEIGHT: bold
}
A {
	COLOR: #00ff00
}
A:hover {
	COLOR: white; TEXT-DECORATION: none
}
</STYLE>

<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY bgColor=black text=#ffff80><FONT size=1>
<DIV align=right>
<TABLE border=0 cellSpacing=0 cellborder="0">
  <TBODY>
  <TR>
    <TD align=middle><FONT size=1><B><FONT color=white>Quake Style - Quake 3 
      Tutorials</FONT><BR><FONT color=#bbcc77>Weapon Mods </FONT><FONT 
      color=#ff8000>- Quake3 Translocater!</FONT><BR>Turns the grenade launcher 
      into a Translocater beacon launcher! 
</B></FONT></TD></TR></TBODY></TABLE></DIV><BR><!-- START TUTORIAL -->SanDan's 
Q3 Translocator! <BR><BR>This tutorial modifies the original grenade launcher so 
it fires one grenade that plays the role of a Translocater beacon. <BR><BR>The 
beacon is fired like a normal grenade but dose not explode. It's retrieved or 
teleported to by commands. <BR><BR>Files modified: <BR>g_client.c 
<BR>g_missile.c <BR>g_items.c <BR>g_combat.c <BR>g_cmds.c <BR><BR>First we need 
to add the grenade launcher to the player from the start. Open g_client.c and go 
to line 940 you will find this line: <BR><PRE><FONT size=1>
	client-&gt;ps.ammo[WP_GRAPPLING_HOOK] = -1;
</FONT></PRE><BR>Now add this code straight after: <BR><PRE><FONT size=1><FONT color=#00ffff>
	//SanDan: Add WP_GRENADE_LAUNCHER
	client-&gt;ps.stats[STAT_WEAPONS] |= ( 1 &lt;&lt; WP_GRENADE_LAUNCHER );
	//SanDan: give player one Transporter Beacon aka Grenade :)
	client-&gt;ps.ammo[WP_GRENADE_LAUNCHER] = 1;
</FONT>
</FONT></PRE><BR>This will give the player a grenade launcher plus one grenade 
every time a player respwans. <BR>Next we need to stop the grenade from 
exploding. <BR><BR>Open g_missile.c before the function fire_grenade, and at 
about line 280, add the new grenade think function: <BR><PRE><FONT size=1><FONT color=#00ffff>
/* SanDan:
================
G_FetchBeakin

Brings beacon back to Grenade launcher.
================
*/
void G_FetchBeakin( gentity_t *ent )
{
	ent-&gt;parent-&gt;client-&gt;ps.ammo[WP_GRENADE_LAUNCHER] = 1;
	//SanDan show a message to the client 
	//saying that his beacon returned!
	trap_SendServerCommand( ent-&gt;parent-&gt;client-&gt;ps.clientNum, "cp \"CLANCK...!\n\"");
	ent-&gt;freeAfterEvent = qtrue;
	trap_LinkEntity( ent );
}
</FONT>
</FONT></PRE><BR>Now go to the fire_grenade function, remove this <FONT 
color=#ff00ff><B>old code</FONT></B> and add this <FONT color=#00ffff><B>new 
code</FONT></B>: <BR><PRE><FONT size=1><FONT color=#ff00ff>
	bolt-&gt;nextthink = level.time + 2500;
	bolt-&gt;think = G_ExplodeMissile;
</FONT><FONT color=#00ffff>	/*
	SanDan:	give defense players in CTF a fighting chance!
		if they can stall attakers from geting there flag for 
		enough time they will avoid instant flag captures!
	*/
	bolt-&gt;nextthink = level.time + 50000;
	bolt-&gt;think = G_FetchBeakin; 
</FONT>
</FONT></PRE><BR>To stop the grenade from exploding when hiting other players go 
to G_MissileImpact and change the first if statment so it looks like this: <BR><PRE><FONT size=1><FONT color=#00ffff>
	//SanDan Don't Explode on impact with others
	if (  ent-&gt;s.eFlags &amp; ( EF_BOUNCE | EF_BOUNCE_HALF ) ) {
		G_BounceMissile( ent, trace );
		G_AddEvent( ent, EV_GRENADE_BOUNCE, 0 );
		return;
	}
</FONT>
</FONT></PRE><BR><B>EDITOR'S NOTE:</B>Be careful, if you create any other 
"bouncing" projectiles in the same source code, they will bounce off objects 
which they would normally explode on! <BR><BR>You may pick up some extra 
grenades (hence beacons) from the map. Which is not supposed to happen. So fix 
that by adding this to the begining of Add_Ammo function in g_items.c: <BR><PRE><FONT size=1><FONT color=#00ffff>
	//SanDan: don't add more ammo to our Translocater
	if (weapon == WP_GRENADE_LAUNCHER) return; 
</FONT>
</FONT></PRE><BR>What if the player dies after throwing a beacon? Well we better 
give him/her back what is theres. open g_combat and go to player_die function 
there at about line 334 add: <BR><PRE><FONT size=1><FONT color=#00ffff>
	//SanDan: retrieve beacon if thrown
	if (!self-&gt;client-&gt;ps.ammo[WP_GRENADE_LAUNCHER]) {
		Cmd_RetreavBeakin_f(self);
	}
</FONT>
</FONT></PRE><BR>Now we will define the Translocater commands. Open g_cmds.c, 
and at the very begining just after #include "g_local.h" add: <BR><PRE><FONT size=1><FONT color=#00ffff>
	void G_FetchBeakin( gentity_t *ent );
</FONT>
</FONT></PRE><BR>We declare it here so we can use it in the commands. <BR>At 
around line 1027 before ClientCommand we are going to add the command that will 
retreive the beacon. Add this: <BR><PRE><FONT size=1><FONT color=#00ffff>  
/*SanDan: modified from Gerbil!'s pipebomb tut
=================
Cmd_GetBeacon_f

Returns Beacon to player
=================
*/
void Cmd_GetBeacon_f( gentity_t *ent)
{	gentity_t *grenades = NULL;
	while ((grenades = G_Find (grenades, FOFS(classname), "grenade")) != NULL) //search for grenade entities
	{	if (grenades-&gt;r.ownerNum == ent-&gt;s.clientNum)  //make sure its our grenade
		{
			grenades-&gt;think = G_FetchBeakin;			
			grenades-&gt;nextthink = level.time + 2;
		}	
	}
	/*
	even if we don't find any give player a grenade
	this is just incase any grenades have fallen off the map
	*/	
	ent-&gt;client-&gt;ps.ammo[WP_GRENADE_LAUNCHER] = 1;
}
</FONT>
</FONT></PRE><BR>After that add the code that will teleport the player to the 
beacon: <BR><PRE><FONT size=1><FONT color=#00ffff>
/*SanDan: modifid from Gerbil!'s pipebombs tut
=================
Cmd_teleport_f

Teleports player to beacon
=================
*/
void Cmd_teleport_f( gentity_t *ent)
{	gentity_t *grenades = NULL;
	vec3_t origin,angles;
	while ((grenades = G_Find (grenades, FOFS(classname), "grenade")) != NULL) //search for grenade entities
	{	if (grenades-&gt;r.ownerNum == ent-&gt;s.clientNum)  //make sure its our grenade
		{
			//SanDan: Get Grenade Postion
			BG_EvaluateTrajectory( &amp;grenades-&gt;s.pos, level.time, origin );
			//SanDan: give teleporting kick!
			origin[2] += 9;
			//SanDan: teleport, and hold on to player viewangle
			TeleportPlayer( ent, origin, ent-&gt;client-&gt;ps.viewangles );

			//SanDan: return beakin to player
			grenades-&gt;think = G_FetchBeakin;			
			grenades-&gt;nextthink = level.time + 2;
		}
	}
}
</FONT>
</FONT></PRE><BR>After (at around line 1112), add the <FONT color=#00ffff><B>new 
code</FONT></B>: <BR><PRE><FONT size=1>
	else if (Q_stricmp (cmd, "setviewpos") == 0)
		Cmd_SetViewpos_f( ent );
<FONT color=#00ffff>	else if (Q_stricmp (cmd, "getbeacon") == 0)
		Cmd_GetBeacon_f(ent);
	else if (Q_stricmp (cmd, "teleport") == 0)
		Cmd_teleport_f(ent);</FONT>
</FONT></PRE><BR>This adds two console commands /getbeacon which retrieves the 
beacon, or gives a new one in place of ones that fell of map, and /teleport 
which teleports the player to the beacon position. <BR><BR>Compile and run. 
<BR>You will start of with the grenade launcher. Place the beacon at your team's 
flag and try to get the enemy's flag befor the beacon times out, or you will 
have to fight your way back! <!--- END TUTORIAL ---><BR><BR><FONT 
color=#ff8000><B>-- Credits:</B></FONT> <BR>&nbsp;&nbsp; Tutorial by <A 
href="mailto:u2canbe@hotmail.com"><B>SanDan</B></A> <BR>&nbsp;&nbsp; Return to 
<A href="http://quakestyle.telefragged.com/tuts.shtml"><B>QS Tutorials</B></A> 
<BR><BR><FONT color=#ff8000><B>-- Important:</B></FONT> <BR>&nbsp;&nbsp; If you 
do use something from QuakeStyle in your mod, please give us credit. 
<BR>&nbsp;&nbsp; Our code is copyrighted, but we give permission to everyone to 
use it in any way they see fit, as long as we are recognized. 
</FONT></BODY></HTML>
