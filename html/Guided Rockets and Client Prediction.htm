<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=CAP/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?1469590812"></SCRIPT> 
<html>
<!-- #BeginTemplate "/Templates/model.dwt" --> 
<head>
<title>Document sans-titre</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../main.css">
</head>
<body bgcolor="#FFFFFF" link="#006699" vlink="#006699">
<table width="75%" border="0" cellspacing="0" cellpadding="0">
  <tr align="left" valign="top"> 
    <td height="465"> 
      <table width="100%" border="0">
        <tr bgcolor="#006699"> 
          <td> 
            <div align="left"><font color="#CCCCFF" face="Arial, Helvetica, sans-serif" size="4"><b>Urban 
              Software <font size="2">- UrbanCTF, UrbanDM, Earn A Weapon, CTG...</font></b></font></div>
          </td>
        </tr>
        <tr bgcolor="#CCCCFF" align="left" valign="middle"> 
          <td><!-- #BeginEditable "partie" --><font face="Tahoma, Verdana" size="2"><b><font color="#006666">Guided 
            Rockets and Client Prediction</font></b></font><!-- #EndEditable --></td>
        </tr>
      </table>
      <table width="100%" border="0">
        <tr align="left" valign="top"> 
          <td><!-- #BeginEditable "contenu" --> 
            <title></title>
            <div align="left"> 
              <p>&nbsp;</p>
              <table width="75%" border="0" align="center">
                <tr> 
                  <td align="left" valign="top" height="270" colspan="2" rowspan="5"> 
                    <div align="left"><font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                    <div align="left"><font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                    <font face="Tahoma, Verdana" size="2"></font> 
                    <div align="left"><font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                    <div align="left"><font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                    <font face="Tahoma, Verdana" size="2"></font> 
                    <div align="left"> 
                      <p><font face="Tahoma, Verdana" size="2" color="#000000"><b>Date 
                        : </b></font><font face="Tahoma, Verdana" size="2">01/18/99</font><font face="Tahoma, Verdana" size="2" color="#000000"><b><br>
                        Author(s) : </b></font><font face="Tahoma, Verdana" size="2"><a href="mailto:spk@captured.com">SpK</a></font><font face="Tahoma, Verdana" size="2" color="#000000"><b><br>
                        Skill(s) : </b></font><font face="Tahoma, Verdana" size="2">Medium</font><font face="Tahoma, Verdana" size="2" color="#000000"><b><br>
                        Source Project(s) : </b></font><font face="Tahoma, Verdana" size="2"><i>Game</i></font><font face="Tahoma, Verdana" size="2" color="#000000"><b><br>
                        Revision : </b>1.0</font></p>
                      <font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                  </td>
                  <td width="2%" height="30">&nbsp;</td>
                  <td width="66%" rowspan="5" align="left" valign="top"> 
                    <div align="left"><img src="guided_missile_shot1.jpg" width="320" height="240"></div>
                  </td>
                </tr>
                <tr> 
                  <td width="2%" height="30">&nbsp;</td>
                </tr>
                <tr> 
                  <td width="2%" height="35">&nbsp;</td>
                </tr>
                <tr> 
                  <td width="2%" height="55">&nbsp;</td>
                </tr>
                <tr> 
                  <td width="2%">&nbsp;</td>
                </tr>
              </table>
              <p class="texte"><font face="Tahoma, Verdana" size="2">With this 
                tutorial, we'll learn how to handle the client prediction in Q3:A, 
                with the Guided Rockets (tm). Basically, client prediction is 
                used to avoid too much net traffic. In Quake2, the server had 
                to send to all the clients packets holding the origins of the 
                rocket, so the client's renderer (quake2.exe) could display it 
                using those coords. Okey, that was fun, but now there's something 
                better ! </font><font face="Tahoma, Verdana" size="2">We're gonna 
                tells Q3 from where our rocket is fired, and what direction our 
                rocket is taking, and we'll let the Q3 renderer calculate where 
                the rocket will explode !</font></p>
              <p class="texte"><font face="Tahoma, Verdana" size="2">In q_shared.h, 
                you'll find the following structures :</font></p>
              <p class="texte" align="left"> 
                <textarea name="textfield" cols="100" rows="17">
typedef enum {
	TR_STATIONARY,
	TR_INTERPOLATE,	// non-parametric, but interpolate between snapshots
	TR_LINEAR,
	TR_LINEAR_STOP,
	TR_SINE,		// value = base + sin( time / duration ) * delta
	TR_GRAVITY
} trType_t;

typedef struct {
	trType_t	trType;
	int	trTime;
	int	trDuration;	// if non 0, trTime + trDuration = stop time
	vec3_t	trBase;
	vec3_t	trDelta;		// velocity, etc
} trajectory_t;</textarea>
              </p>
              <p class="texte">&nbsp;</p>
              <p class="texte"><font face="Tahoma, Verdana" size="2">The trajectory_t 
                structure will be used when we'll have to give a movement to an 
                entity. The main fields will be <i>trDelta</i>, the old Q2's <i>ent-&gt;velocity</i> 
                (the velocity vector), and <i>trBase</i>, the origin of the movement/trajectory.</font></p>
              <p class="texte"><font face="Tahoma, Verdana" size="2">Now, let's 
                write our guided rocket code. Open up g_missile.c, and write this 
                just above the <i>fire_rocket()</i> function :</font></p>
              <p class="texte" align="left"> 
                <textarea name="textarea" cols="100" rows="25">
void Guided_Missile_Think (gentity_t *missile)
{
	vec3_t forward, right, up; 
	vec3_t muzzle;
	float dist;
	gentity_t *player = missile-&gt;parent;

	// If our owner can't be found, just return
	if (!player)
	{
		G_Printf (&quot;Guided_Missile_Think : missile has no owner!\n&quot;);
		return;
	}

	// Get our forward, right, up vector from the view angle of the player
	AngleVectors (player-&gt;client-&gt;ps.viewangles, forward, right, up);

	// Calculate the player's eyes origin, and store this origin in muzzle
	CalcMuzzlePoint ( player, forward, right, up, muzzle );
 
	// Tells the engine that our movement starts at the current missile's origin
	VectorCopy (missile-&gt;r.currentOrigin, missile-&gt;s.pos.trBase );

	// Trajectory type setup (linear move - fly)
	missile-&gt;s.pos.trType = TR_LINEAR;
	missile-&gt;s.pos.trTime = level.time - 50;

	// Get the dir vector between the player's point of view and the rocket
	// and store it into muzzle again
	VectorSubtract (muzzle, missile-&gt;r.currentOrigin, muzzle);
	
	// Add some range to our &quot;line&quot; so we can go behind blocks
	// We could have used a trace function here, but the rocket would
	// have come back if player was aiming on a block while the rocket is behind it
	// as the trace stops on solid blocks
	dist = VectorLength (muzzle) + 400;	 //give the range of our muzzle vector + 400 units
	VectorScale (forward, dist, forward);

	// line straight forward
	VectorAdd (forward, muzzle, muzzle);

	// Normalize the vector so it's 1 unit long, but keep its direction
	VectorNormalize (muzzle);

	// Slow the rocket down a bit, so we can handle it
	VectorScale (muzzle, 300, forward);

	// Set the rockets's velocity so it'll move toward our new direction
	VectorCopy (forward, missile-&gt;s.pos.trDelta);

	// Change the rocket's angle so it'll point toward the new direction
	vectoangles (muzzle, missile-&gt;s.angles);

	// This should &quot;save net bandwidth&quot; =D
	SnapVector( missile-&gt;s.pos.trDelta );

	// Call this function in 0,1 s
	missile-&gt;nextthink = level.time + FRAMETIME; 
}</textarea>
              </p>
              <p class="texte"><font face="Tahoma, Verdana" size="2">Then move 
                to the fire_rocket(...) function just under our new one, and modify 
                it so it looks like this :</font></p>
              <p class="texte" align="left"> 
                <textarea name="textarea2" cols="100" rows="25">
gentity_t *fire_rocket (gentity_t *self, vec3_t start, vec3_t dir) {
	gentity_t	*bolt;

	VectorNormalize (dir);

	bolt = G_Spawn();
	bolt-&gt;classname = &quot;rocket&quot;;
	
	//### NEW ###
	//bolt-&gt;nextthink = level.time + 10000;
	//bolt-&gt;think = G_ExplodeMissile;
	if (self-&gt;client)		// &amp;&amp; check for bots
	{
		bolt-&gt;think = Guided_Missile_Think;
		bolt-&gt;nextthink = level.time + FRAMETIME;
	}
	else
	{
		bolt-&gt;nextthink = level.time + 10000;
		bolt-&gt;think = G_ExplodeMissile;
	}
	//### END NEW ###

	bolt-&gt;s.eType = ET_MISSILE;
	bolt-&gt;r.svFlags = SVF_USE_CURRENT_ORIGIN;
	
	..........
	..........
}</textarea>
              </p>
              <p class="texte"><font face="Tahoma, Verdana" size="2"> So what 
                we're doing here is replacing the regular rocket think function 
                (goes straight ahead and explode once it touchs something) by 
                our own think function, Guided_Missile_Think. So when the player 
                will shoot a rocket, he'll be able to aim his rocket wherever 
                he wants with his mouse. However, we're testing if &quot;self&quot; 
                is really a client, just in case... Bots will also be able to 
                use guided rockets as they use the same firing function.</font></p>
              <p class="texte"><font face="Tahoma, Verdana" size="2">Compile your 
                code, and run the game. Take the rocket launcher, and fire... 
                Add some bots and kick their ass around the map... Who said &quot;soooo 
                easy !&quot; ? ;)</font></p>
              <p class="texte"><font face="Tahoma, Verdana" size="2">Okey now 
                stop playing... Let's study our code. In our think function, we've 
                played with client prediction. Everytime we change the direction 
                of the rocket, we tells the engine that we're also changing the 
                rocket's behaviour, so the client's renderer knows he has to change 
                the rocket's movement. We're using the current rocket's origin 
                to setup the origin of our new direction change, and then we also 
                change the velocity and angle of the rocket so it's going to the 
                direction where we're aiming at. Now, on the client side, the 
                renderer (well, the cgame part) will calculate where the rocket 
                should go, thanks to our trBase and trDelta informations. Just 
                try removing those datas from our new code, and you'll see your 
                rockets going in VERY strange directions ;)</font></p>
              <hr>
              <div align="center"> 
                <p><font face="Tahoma, Verdana" size="3"> <font size="2">Tutorial 
                  by <a href="mailto:spk@captured.com">SpK</a></font></font><font size="2"><br>
                  <font face="Tahoma, Verdana"><a href="http://wiretap.gamedesign.net">Wiretap 
                  Development</a></font></font> <font size="2"><br>
                  <font face="Tahoma, Verdana"><a href="http://www.planetquake.com/wiretap">Wiretap 
                  HQ</a></font></font> </p>
              </div>
              <p class="texte"> 
              <blockquote> 
                <p>&nbsp;</p>
                <p>&nbsp; </p>
              </blockquote>
              <p></p>
              <p class="texte">&nbsp;</p>
              <p class="texte">&nbsp;</p>
              <p class="texte">&nbsp;</p>
              <p>&nbsp;</p>
              <p>&nbsp;</p>
            </div>
            <!-- #EndEditable --></td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</body>
<!-- #EndTemplate -->
</html>
