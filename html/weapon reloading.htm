<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257892250"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257892250"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257892250"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257892250"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
	<td><img src="/code3arena/images/ouricon.gif"></td>
	<td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial26.shtml"><< Prev</a> |
	Tutorial 27 |
	<a href="tutorial28.shtml">Next >></a>
	</b></font>
	</td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>

   <!-- BEGIN LEFT NAVBAR MENU -->
	<td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
	</td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;
	</td>
  </tr>
</table>
	</td>
	<!-- END DIVIDER -->


	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top>
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
TUTORIAL 27 - Reloading Weapons
</font></b><br>by Martin Dominguez - <b><a href="mailto:drivec@home.com"><i>Drive C:</i></A></b></center><p>

It seems everyone has been e-mailing me for the code for reloading your weapons.
I didn't quite understand how or why they thought I had the code.  
I DID actually have the completed code, so writing the tutorial wasn't very difficult.<P>

The effects of this code are simple.  Everyone knows that not every single weapon 
can carry the same amount of ammo, right?  In Quake 3 though, somehow they can 
hold 200 rounds regardless of the weapon.  We're here to change that!<P>

Both cgame and game will be modified:<P>
<font color="#ABCDEF">
g_cmds.c<br>
g_items.c<br>
g_client.c<br>
g_weapon.c<br>
g_local.h<p>
bg_public.h<br>
bg_pmove.c<p>
cg_draw.c<p>
</font>

Once again, I must disclaim the lack of comment used in the source here.  
Please: When you are typing up the code, tell yourself what you are 
doing, okay?  It really, really helps.  For everyone who doesn't 
know of this yet, you create an in-source comment with 
the two slash characters "//".  This leaves the remainder 
of the line for your remark.

&nbsp;

<font color="#E07F44"><H4>
1. The Premise
</H4></font>

Quake 3 coders know that the ammo quantities are stored in the 
variable entity->client->ps.ammo, which is an array 
of 16(NUM_MAX_WEAPONS) integers.  The reload code, 
however would require that there be a second array of 
that exact size to store the ammount held in 
your "bag" versus the ammount in the weapon.  
A simple console command would cause an empty 
weapon to "reload."  

<p>Here's the problem:  The function 
that checks to see if we can pick up ammo 
from the ground is located in bg_misc.c at line ~755.  
Since it's located in BG(both games?), it has access to 
neither game or cgame structures, but only shared structures.  
Thus the ammount in your "bag" must stay in ps.ammo.  
When we fire the weapon, ammo must be depleted from 
the weapon's clip variable (our new variable).  
Firing the weapon and removing ammo also occurs in 
BG (bg_pmove.c, line ~1525), so somehow both variables 
must occur in the ps(playerstate) structure.  

<p>Since no modifications to playerstate have actually resulted 
in a stable game, we cannot simply create an integer 
array ps.clipammo.<P>

We must use some tricky manipulations to get around the 
problem of both ammo quantities being needed in BG. 
Here's the trick:  since weapon firing functions 
get passed from bg to game, we can remove the 
ammo depletions from bg_pmove.c to 
g_weapon.c and place our ammo in clip 
variable in the client structure.<p>

A. Go to g_local.h to about line 277 in struct gclient_s and add:<P>

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
int		lastKillTime;			// for multiple kill rewards

qboolean	fireHeld;			// used for hook
gentity_t	*hook;				// grapple hook if out

<font color="#ff6060">
// Our Ammo Variable, ps.ammo, now refers to Bag Ammo
int		clipammo[MAX_WEAPONS];	</font>

// timeResidual is used to handle events that happen every second
// like health / armor countdowns and regeneration
int		timeResidual;
};
<font color="#ff6060">
void Cmd_Reload( gentity_t *ent );
int ClipAmountForWeapon( int w );
</font>
</pre></font><p>

Now it's time to relocate the ammo depletion code to game from bg.  <p>



B1. Go into g_weapon.c to line ~572 and insert:<p>

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
void FireWeapon( gentity_t *ent ) {
<font color="#ff6060">	
	//Remove Ammo if not infinite
	if ( ent->client->clipammo[ ent->client->ps.weapon ] != -1 ) {
		ent->client->clipammo[ ent->client->ps.weapon ]--;
	}
</font>
	if (ent->client->ps.powerups[PW_QUAD] ) {
		s_quadFactor = g_quadfactor.value;
	} else {
		s_quadFactor = 1;
	}
</pre></font>


<p>&nbsp;

B2.  Go into bg_pmove.c line ~1525 in PM_Weapon()and use the
/*..........*/ marks to set this text to remark:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// take an ammo away if not infinite
<font color="#ff6060">// This will go within "game" in g_weapon.c because
// ammo is stored in gclient_t</font>
<font color="#ff6060">/*</font>if ( pm->ps->ammo[ pm->ps->weapon ] != -1 ) {
	pm->ps->ammo[ pm->ps->weapon ]--;
}<font color="#ff6060">*/</font>

// fire weapon
PM_AddEvent( EV_FIRE_WEAPON );
</font></pre><p>

Another really important thing that should be mentioned is the
check for out of ammo, which is associated with our second
major problem.  The check for out of ammo occurs in bg just
above the depletion code, and quite honestly I would prefer
to leave it there.  The problem is that bg has no access
to the game structure "gclient_t," so it cannot possibly
check to see if the present weapon is depleted entirely
as the ammo in clip variables are stored there.

<p>Here is where we create a second variable, this time
located in the client->ps.stats indexes.  All the out
of ammo check needs to know is the ammo held in the
present weapon's clip, so we can create a variable
ps.stats[STAT_AMMO] that will update the ammo in the
presently equipped weapon automatically.  Later, you
will see why this new variable is also needed
(it has to do with cgame, can you figure it out?).<p>

C1. To create the variable, goto bg_public.h, line ~166 and insert:<P>
<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// player_state->stats[] indexes
typedef enum {
	STAT_HEALTH,
	STAT_HOLDABLE_ITEM,
	STAT_WEAPONS,					// 16 bit fields
	STAT_ARMOR,
	STAT_DEAD_YAW,					<font color="#ff6060">
	STAT_AMMO,					// Ammo Held in Current Weapon</font>
	STAT_CLIENTS_READY,


</pre></font>

<p>&nbsp;

C2. Let's set the STAT_AMMO variable to be updated on ClientEndFrame(); insert in g_active.c line ~841:<P>

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// burn from lava, etc
P_WorldEffects (ent);

// apply all the damage taken this frame
P_DamageFeedback (ent);

// add the EF_CONNECTION flag if we haven't gotten commands recently
if ( level.time - ent->client->lastCmdTime > 1000 ) {
	ent->s.eFlags |= EF_CONNECTION;
} else {
	ent->s.eFlags &= ~EF_CONNECTION;
}

<font color="#ff6060">//Update the Ammo Amount in weapon
ent->client->ps.stats[STAT_AMMO] = ent->client->clipammo[ent->client->ps.weapon];</font>

ent->client->ps.stats[STAT_HEALTH] = ent->health;
</font></pre>

<p>&nbsp;

C3. Let's now use the STAT_AMMO variable to check for out of ammo.  Insert in
bg_pmove.c, in PM_Weapon(), line ~1520:<P>

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
pm->ps->weaponstate = WEAPON_FIRING;

// check for out of ammo
<font color="#ff6060">// modified for changing ammo from ps->ammo to client->clipammo updated to ps->stats[STAT_AMMO]</font>
if ( ! <font color="#ff6060">/*</font>pm->ps->ammo[ pm->ps->weapon ]<font color="#ff6060">*/ pm->ps->stats[STAT_AMMO]</font> ) {
	PM_AddEvent( EV_NOAMMO );
	pm->ps->weaponTime += 500;
	return;
}

// take an ammo away if not infinite</font></pre>

<p>&nbsp;

D1. <font color="#FF0000">H</font><font color="#FFFF00">y</font><font color="#CC33CC">p</font><font color="#3333FF">o</font><font color="#FFFFFF">Thermia</font>
brought this to my attention, and I
think we will all appreciate this.   When you pick up a gun from the ground, its
nice that it has ammo in it so you don't have to reload it after picking it up.
Go to g_items.c to line 139 and we will see the PickupWeapon function.  You will
later learn what the <b>ClipAmountForWeapon()</b> function is.  Simply modify:<P>
<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	if ( ent->count < 0 ) {
		quantity = 0; // None for you, sir!
	} else {
		if ( ent->count ) {
			quantity = ent->count;
		} else {
			quantity = ent->item->quantity;
		}

		// dropped items and teamplay weapons always have full ammo
		if ( ! (ent->flags & FL_DROPPED_ITEM) && g_gametype.integer != GT_TEAM ) {
			// respawning rules
			// drop the quantity if the already have over the minimum<font color="#ff6060">
			/*</font>if ( other->client->ps.ammo[ ent->item->giTag ] < quantity ) {
				quantity = quantity - other->client->ps.ammo[ ent->item->giTag ];
			} else {
				quantity = 1;		// only add a single shot
			}<font color="#ff6060">*/</font>
		}
	}

	// add the weapon
	other->client->ps.stats[STAT_WEAPONS] |= ( 1 << ent->item->giTag );
	
	<font color="#ff6060">/*</font>Add_Ammo( other, ent->item->giTag, quantity );<font color="#ff6060">*/
	quantity = ClipAmountForWeapon(ent->item->giTag);
	if (other->client->clipammo[ent->item->giTag] > 0 )
		Add_Ammo( other, ent->item->giTag, quantity );
	else 
		other->client->clipammo[ent->item->giTag] = quantity;</font>

	if (ent->item->giTag == WP_GRAPPLING_HOOK)
		other->client->ps.ammo[ent->item->giTag] = -1; // unlimited ammo

	// team deathmatch has slow weapon respawns
	if ( g_gametype.integer == GT_TEAM ) {
		return RESPAWN_TEAM_WEAPON;
	}</pre></font>

<p>&nbsp;

D2.  Go to g_client.c to line 931, in ClientSpawn(), and give ammo for player to start:<P>
<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	client->ps.stats[STAT_WEAPONS] = ( 1 << WP_MACHINEGUN );
	client->ps.stats[STAT_WEAPONS] = ( 1 << WP_MACHINEGUN );
	if ( g_gametype.integer == GT_TEAM ) {
		client->ps.ammo[WP_MACHINEGUN] = 50;
	} else {
		client->ps.ammo[WP_MACHINEGUN] = 100;
	}<font color="#ff6060">
	client->clipammo[WP_MACHINEGUN] = ClipAmountForWeapon(WP_MACHINEGUN);
	</font>
	client->ps.stats[STAT_WEAPONS] |= ( 1 << WP_GAUNTLET );
	client->ps.ammo[WP_GAUNTLET] = -1;
	client->ps.ammo[WP_GRAPPLING_HOOK] = -1;
</pre></font>
<P>&nbsp;


<font color="#E07F44"><H4>
2. Creating the Command and the ClipAmountForWeapon Function
</H4></font>

Reloading the weapon will be activated by the server-side command "/reload."<P>

As we all remember from before: go into g_cmds.c down to line ~1101 in ClientCommand()
to the else if statements, and insert this code:
<P>

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
else if (Q_stricmp (cmd, "gc") == 0)
	Cmd_GameCommand_f( ent );
else if (Q_stricmp (cmd, "setviewpos") == 0)
	Cmd_SetViewpos_f( ent );
<font color="#ff6060">
else if (Q_stricmp (cmd, "reload") == 0)
	Cmd_Reload( ent );</font>
</pre></font><p>

Jus before the function ClientCommand() in that file(g_cmds.c), we will add our actual reload function:
<font face="Verdana, Arial" size="3" color="#ffffcc"><pre><font color="#ff6060">
/*
==================
  Cmd_Reload
==================
*/
void Cmd_Reload( gentity_t *ent )	{
	int weapon;
	int amt;
	int ammotoadd;

	weapon = ent->client->ps.weapon;
	amt = ClipAmountForWeapon(weapon);
	ammotoadd = amt;

	if (ent->client->clipammo[weapon] >= ClipAmountForWeapon(weapon))	{
		trap_SendServerCommand( ent-g_entities,
			va("print \"No need to reload.\n\""));
		return;
	}


	ent->client->ps.weaponstate = WEAPON_DROPPING;
	ent->client->ps.torsoAnim = ( ( ent->client->ps.torsoAnim & ANIM_TOGGLEBIT )
		^ ANIM_TOGGLEBIT )	| TORSO_DROP;
	ent->client->ps.weaponTime += 2500;
	//Play a sound maybe: thats up to you.


	if (ent->client->ps.ammo[weapon] == 0) return;

	

	//We can only add ammo(to weapon) what we need
	if (ent->client->clipammo[weapon] > 0)	{
			ammotoadd -= ent->client->clipammo[weapon];
	}

	//We can only remove (from bag) what ammo we have
	if (ent->client->ps.ammo[weapon] < ammotoadd)	{
		ammotoadd = ent->client->ps.ammo[weapon];
	}

	//Remove the ammo from bag
	ent->client->ps.ammo[weapon] -= ammotoadd;

	//Add the ammo to weapon
	ent->client->clipammo[weapon] += ammotoadd;


}

</font></font></pre><p>
This function simply reloads the weapon.  It checks to see first
if no reloading is necessary.  It then creates the graphics
of dropping the weapon, removes from the backpack supply of ammo and adds to the weapon clip.<p>

As you saw above, we used the integer function <b>ClipAmountForWeapon</b> to determine
how much ammo each weapon can hold.  We need to add
this function right below the Cmd_Reload, but you won't
be able to copy and paste.  Here, you will tell the game
exactly how much ammo each weapon can hold, and that
is determined by the coder, not the tutorial.

<p>I have however, set up an example.  Hopefully it will help
you to create your own clip quantities.  You <i>should</i> be able to figure it out.

<p>Staying in g_cmds.c add this function:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre><font color="#ff6060">
/*
==================
  ClipAmountForWeapon for Cmd_Reload
==================
*/
int ClipAmountForWeapon( int w )	{
	//How much each clip holds
	if ( w == WP_MACHINEGUN )  return 24;
	else if ( w == WP_GRENADE_LAUNCHER ) return 1;
	else if ( w == WP_SHOTGUN )	return 1;
	else return 12; //this wont happen unless you copy-and-paste too much
	}</font></font></pre>

<p>&nbsp;


<font color="#E07F44"><H4>
3. Displaying Ammo Quantities
</H4></font>

All of us love Q3's HUD right?  Yeah Right!  Well anyway, I think
it would be nice if we ammended an already skimpy
eye-sore with just one other number.  Can you guess
what that number is?  Well anyway, I told you before that
we would be using the STAT_AMMO variable again.

<p>Since cgame has no access to our <i>Ammo in Gun</i>
quantities, there is no way that we can display
the ammo in the gun.  STAT_AMMO, however, can
be utilized in cgame.  Only the current weapon's
ammo needs to be displayed on the HUD, so I think we're in business.<p>

The displaying of statistics on your mod's HUD is
really up to you, so don't feel you have
to do what I am doing here.  When I wrote this, I chose a
very simple way of displaying <i>Ammo in Gun</i>,
and I'm sure there are more economical ways to show it.

<p>Anyway, go in cg_draw.c (which contains functions to draw
everything that is 2D on the screen) to line 429 and insert:<p>

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
		CG_DrawPic( 370 + CHAR_WIDTH*3 + TEXT_ICON_SPACE, 432,
			ICON_SIZE, ICON_SIZE, cgs.media.armorIcon );
	}
}
<font color="#ff6060">
//
// ammo in gun
//
value = ps->stats[STAT_AMMO];
if (value > 0 ) {
	//First Draw the 3D Model of the Weapon
	angles[YAW] = ( cg.time & 2047 ) * 360 / 2048.0;
	origin[0] = 80;
	origin[1] = 0;
	origin[2] = 0;
	CG_Draw3DModel( CHAR_WIDTH*3 + TEXT_ICON_SPACE, 360, 96,
		96, cg_weapons[ cent->currentState.weapon ].weaponModel,
		0, origin, angles );

	//Draw the Text
	trap_R_SetColor( colors[0] );
	CG_DrawField (0, 384, 3, value);
	trap_R_SetColor( NULL );

	// if we didn't draw a 3D icon, draw a 2D icon for weapon
	if ( !cg_draw3dIcons.integer && cg_drawIcons.integer ) {
		CG_DrawPic( CHAR_WIDTH*3 + TEXT_ICON_SPACE, 384, ICON_SIZE, ICON_SIZE,
			cg_weapons[ cg.predictedPlayerState.weapon ].weaponIcon );
	}
}</font>
</font></pre><p>

Also, I forgot to mention the out of ammo and low ammo warnings.
They are executed in cg_draw.c but originate in cg_playerstate.c
at line 50.  These warnings respond to the amount
of ammo in bag so they are quite useless for the reload
modification.  I never liked them anyway. If you comment (with the //)
out line 52, you can remove the low ammo warning
while preserving the out of ammo warning.  To make it simpler though,
just go into cg_draw.c and comment out line 1821.<p>

<p>&nbsp;

Well that's the tutorial.  I hope everyone enjoyed it and that it is easy
to understand and useful.  To all, good luck and happy coding.

<p><a href="mailto:drivec@home.com">Drive C:</a>
	  <p>
	</td>
  </tr>
</table>
	<!-- END MAIN TABLE -->

  </tr>
</table>
<p>

	<!-- BEGIN BOTTOM HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
	<td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial26.shtml"><< Prev</a> |
	Tutorial 27 |
	<a href="tutorial28.shtml">Next >></a>
	</b></font>
	</td>
  </tr>
</table>
<p>
	<!-- END BOTOTM HEIRARCHY -->

</body>
</html>
