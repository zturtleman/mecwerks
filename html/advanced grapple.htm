<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257950218"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257950218"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257950218"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257950218"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial39.shtml">&lt;&lt; Prev</a> |
	Tutorial 40 |
	<a href="tutorial41.shtml">Next &gt;&gt;</a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>

   <!-- BEGIN LEFT NAVBAR MENU -->
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0>
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->


	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top>
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
TUTORIAL 40 - Advanced Grapple Hook
</font></b><br>by <b><a href="mailto:kilderean@planetquake.com">Kilderean</A></b></center>

<p>After Matt Ownby's tutorial for <a href="tutorial12.shtml">activating
the grapple hook</a>, we're going to add more functionality in three
ways. First we'll give an option of turning off the grapple, then a
faster movement version, fix some bounce pad problems, and finally we'll
give the bots a chance to use the grapple!

<p>This tutorial has been taken from the <a
href="/code3arena/modsource.shtml">source code for PureCTF</a>, here in
the modsource section of Code3Arena. With some of the classic Q2 CTF
maps converted to Q3, and a return to the old grapple form of CTF,
you'll want to visit the <a href="http://www.planetquake.com/pure/">PureCTF
mod home page</a> for some pure fun.

<p>&nbsp;



<font color="#E07F44"><H4>
1. Enabling the hook, PureCTF style
</H4></font>

<p>Matt's <a href="tutorial12.shtml">grapple tutorial</a> is in two
parts, enabling the grapple in <b>g_client.c</b>, and giving a key bind
in the ui. The key bind code in the user interface doesn't need to be
changed. We'll make an addition to the server code, adding a cvar that
controls whether the grapple is enabled.

<p>The cvar addition is, as usual, quite simple. In <b>g_main.c</b> we
add a variable for storing cvar info:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
vmCvar_t	g_enableBreath;
vmCvar_t	g_proxMineTimeout;
#endif

<font color="#ff6060">// KILDEREAN
vmCvar_t 	g_PureAllowHook;
// END KILDEREAN</font>
</pre></font>


<p>And within the <b>gameCvarTable[]</b> array we add the default initialization:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
{ &amp;pmove_msec, "pmove_msec", "8", CVAR_SYSTEMINFO, 0, qfalse},

{ &amp;g_rankings, "g_rankings", "0", 0, 0, qfalse}<font color="#ff6060">,

// KILDEREAN
{ &amp;g_PureAllowHook, "g_PureAllowHook", "1", CVAR_SERVERINFO | CVAR_LATCH, 0, qfalse }
// END KILDEREAN</font>

};
</pre></font>

<p>The use of <b>CVAR_LATCH</b> defers the change of the server cvar
until the next map is loaded. On general principle you <i>must</i> latch
a cvar that will only take effect on a map change. This allows the
current value to still be used, and prevents something inconsistant from
happening.

<p>And <b>CVAR_SERVERINFO</b> means that this information will be
available for all clients to act upon. More on this later.

<p>This cvar should also be available to the rest of the server code,
so we add an extern declaration to <b>g_local.h</b> at around line 747:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
extern	vmCvar_t	g_singlePlayer;
extern	vmCvar_t	g_proxMineTimeout;
#endif

<font color="#ff6060">// KILDEREAN
extern	vmCvar_t	g_PureAllowHook;
// END KILDEREANM</font>
</pre></font>

<p>&nbsp;




<p>Then in <b>g_client.c</b> we need to change how the grappling hook is
given to the player. This replaces the first part of how Matt forced the
grapple hook onto a player. Function <b>ClientSpawn()</b>, around line
1160:


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
if ( g_gametype.integer == GT_TEAM ) {
	client-&gt;ps.ammo[WP_MACHINEGUN] = 50;
} else {
	client-&gt;ps.ammo[WP_MACHINEGUN] = 100;
}

<font color="#ff6060">//KILDEREAN
if(g_PureAllowHook.integer){
	client-&gt;ps.stats[STAT_WEAPONS] |= ( 1 &lt;&lt; WP_GRAPPLING_HOOK);
	client-&gt;ps.ammo[WP_GRAPPLING_HOOK] = -1;
}
//END KILDEREAN</font>

client-&gt;ps.stats[STAT_WEAPONS] |= ( 1 &lt;&lt; WP_GAUNTLET );
client-&gt;ps.ammo[WP_GAUNTLET] = -1;
<font color="#ff6060">// client-&gt;ps.ammo[WP_GRAPPLING_HOOK] = -1;</font>

// health will count down towards max_health
ent-&gt;health = client-&gt;ps.stats[STAT_HEALTH] =
	client-&gt;ps.stats[STAT_MAX_HEALTH] + 25;
</pre></font>


<p><i>You should also make the second change by Matt that prevents the
grapple being selected as the default weapon.</i>

<p>&nbsp;




<p> The hook should also be loaded on map startup, so we add the following into
<b>ClearRegisteredItems()</b> in <b>g_items.c</b>, around line 785:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
RegisterItem( BG_FindItemForWeapon( WP_MACHINEGUN ) );
RegisterItem( BG_FindItemForWeapon( WP_GAUNTLET ) );

<font color="#ff6060">//KILDEREAN
if(g_PureAllowHook.integer)
	RegisterItem( BG_FindItemForWeapon( WP_GRAPPLING_HOOK ) );
// END KILDEREAN</font>

#ifdef MISSIONPACK
</pre></font>

<p>&nbsp;



<p>Finally, there are some details within the client that need
attention.

<p>The grapple can cause an &quot;Out of Ammo&quot; message. The
simplest thing to do is just remove it when allowing the hook, though a
more refined check for actually using the hook is also possible.

<p>To do this we need to grab the hook state from the server status,
only sent to the client because the <b>CVAR_SERVERINFO</b> flag was set.


<p>Add this variable to the client game state <b>cgs_t</b> struct in
<b>cg_local.h</b>, about line 1035:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
int acceptTask;
int acceptLeader;
char acceptVoice[MAX_NAME_LENGTH];

// media
cgMedia_t	media;

<font color="#ff6060">// KILDEREAN
int	allowhook;
// END KILDEREAN</font>
</pre></font>


<p>We grab this value in <b>CG_ParseServerinfo()</b>, which is called
when the gamestate is first sent, and when any <b>CVAR_SERVERINFO</b>
cvars are changed. Open <b>cg_servercmds.c</b> at about line 123:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
cgs.capturelimit = atoi( Info_ValueForKey( info, "capturelimit" ) );
cgs.timelimit = atoi( Info_ValueForKey( info, "timelimit" ) );
cgs.maxclients = atoi( Info_ValueForKey( info, "sv_maxclients" ) );

<font color="#ff6060">// KILDEREAN: g_PureAllowHook
cgs.allowhook = atoi( Info_ValueForKey( info, "g_PureAllowHook" ) );
// END KILDEREAN</font>
</pre></font>

<p>Note that we can only access the <b>g_PureAllowHook</b> in the client
because it has the <b>CVAR_SERVERINFO</b> flag set in the server.

<p>When we do the out of ammo display check, we don't print a message if
the hook is enabled. In <b>cg_draw.c</b>, change <b>CG_Draw2D()</b> at
about line 2503:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
#else
	CG_DrawStatusBar();
#endif

<font color="#ff6060">// KILDEREAN: screw ammo warning when g_PureAllowHook=1
if (!cgs.allowhook)</font>
	CG_DrawAmmoWarning();
<font color="#ff6060">// END KILDEREAN</font>
</pre></font>

<p>&nbsp;



<p>The <a href="/code3arena/modsource.shtml">mod source code</a> also
shows how to display the server gameplay options during the level
startup splash screen. You'll find this code in the
<b>CG_DrawInformation()</b> function in <b>cg_info.c</b>. If your mod
has the option of major gameplay changes, then announcing it to
connecting players like this is a Good Thing(tm).


<p>&nbsp;

<p>Finally, since the default grapple uses the lightning shaft shader,
we need to initialize this shader. For maps that don't have a lightning
gun, we won't otherwise get this set up. These changes go into
<b>cg_weapons.c</b> in <b>CG_RegisterWeapon()</b> at about line 535:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
case WP_GRAPPLING_HOOK:
<font color="#ff6060">	cgs.media.lightningShader = trap_R_RegisterShader( "lightningBolt");</font>
	MAKERGB( weaponInfo-&gt;flashDlightColor, 0.6f, 0.6f, 1.0f );
	weaponInfo-&gt;missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
	weaponInfo-&gt;missileTrailFunc = CG_GrappleTrail;
</pre></font>

<p>&nbsp;


<center><table width="80%" border="2" cellpadding="8">
<tr><td>
<font face="Verdana, Arial" size="2" color="#eeeeee">

<p>The Pure CTF grapple actually replaces this &quot;lightning&quot;
shaft with a proper rope and hook. There's a correspondingly different
setup for the code, a model change for the grapple weapon, and drawing
method for the grapple itself.

<p>If you want to use the rope version then you'll have to
<a href="mailto:kilderean@planetquake.com">contact Kilderean for
permission</a> to include the media in your mod.
</font>
</td></tr>
</table>
</center>



<p>&nbsp;


<font color="#E07F44"><H4>
2. Fast hook
</H4></font>

<p>Having two speeds of hook certainly makes for more interesting play,
so we'll take a look on how to implement that. Along the way we're going
to find out that the grapple speed will be used in the movemement code
common to the server and the client (<b>bg_*.c</b> files).

<p>These changes assume that you've already done the work in section 1 above.

<p>As before, we need a cvar that flags whether the fast hook is enabled.

<p>In <b>g_main.c</b>:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
vmCvar_t	g_enableBreath;
vmCvar_t	g_proxMineTimeout;
#endif

// KILDEREAN
vmCvar_t 	g_PureAllowHook;
<font color="#ff6060">vmCvar_t	g_PureFastHook;</font>
// END KILDEREAN
</pre></font>




<p>and in the <b>gameCvarTable[]</b> array:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
{ &amp;pmove_msec, "pmove_msec", "8", CVAR_SYSTEMINFO, 0, qfalse},

{ &amp;g_rankings, "g_rankings", "0", 0, 0, qfalse},

// KILDEREAN
<font color="#ff6060">{ &amp;g_PureFastHook, "g_PureFastHook", "1", CVAR_SERVERINFO, 0, qfalse },
</font>{ &amp;g_PureAllowHook, "g_PureAllowHook", "1", CVAR_SERVERINFO | CVAR_LATCH, 0, qfalse }
// END KILDEREAN

};
</pre></font>

<p>and finally an extern in the <b>g_local.h</b>:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
extern	vmCvar_t	g_singlePlayer;
extern	vmCvar_t	g_proxMineTimeout;
#endif

// KILDEREAN
<font color="#ff6060">extern	vmCvar_t	g_PureFastHook;</font>
extern	vmCvar_t	g_PureAllowHook;
// END KILDEREANM
</pre></font>

<p>&nbsp;



<p>Adding this cvar has complicated matters. We need to make sure that
client prediction knows how fast the grapple should move. This means
working in <b>bg_pmove.c</b> where we don't have direct access to the
cvars.

<p>The way to tackle this problem is to make use of the <b>pmove_t</b>
structure that stores the actual or predicted movement. In fact, any cvar
value (that doesn't change very often) can be put into this structure,
just so long as you remember to do so from both the server and the
client end of the call to <b>Pmove()</b>.


<p>First we define the slow and fast speeds in <b>bg_public.h</b> at
about line 31:


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
#define CROUCH_VIEWHEIGHT	12
#define	DEAD_VIEWHEIGHT		-16

<font color="#ff6060">// KILDEREAN : grapple pull speed
#define PURE_FASTGRAPPLE	1000
#define PURE_NORMALGRAPPLE	700
// END KILDEREAN</font>
</pre></font>




<p>Then we put the flag into the <b>pmove_t</b> struct in
<b>bg_public.h</b>, about line 170:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	// callbacks to test the world
	// these will be different functions during game and cgame
	void	(*trace)( trace_t *results, const vec3_t start,
		const vec3_t mins, const vec3_t maxs, const vec3_t end,
		int passEntityNum, int contentMask );
	int	(*pointcontents)( const vec3_t point, int passEntityNum );

	<font color="#ff6060">// KILDEREAN : so we can implement fast grappling
	qboolean	fastGrapple;
	// END KILDEREAN</font>
} pmove_t;
</pre></font>



<p>Then we need to set the flag in the server just before <b>Pmove()</b>
is called. Easily done because we have direct access to the cvar. The
modification goes into <b>g_active.c</b>, in <b>ClientThink_real()</b>
at about line 862.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
pm.pointcontents = trap_PointContents;
pm.debugLevel = g_debugMove.integer;
pm.noFootsteps = ( g_dmflags.integer &amp; DF_NO_FOOTSTEPS ) &gt; 0;

<font color="#ff6060">// KILDEREAN
if(g_PureFastHook.integer == 1)
	pm.fastGrapple = qtrue;
else
	pm.fastGrapple = qfalse;
// END KILDEREAN</font>
</pre></font>

<p>&nbsp;



<p>The modification in the client is a little more challenging, but not
too difficult. Again we need to add a state to the client global
structure data, in <b>cg_local.h</b> at about line 1035:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
int acceptTask;
int acceptLeader;
char acceptVoice[MAX_NAME_LENGTH];

// media
cgMedia_t	media;

// KILDEREAN
<font color="#ff6060">int 	fastGrapple;</font>
int	allowhook;
// END KILDEREAN
</pre></font>


<p>Then set this new flag within <b>CG_ParseServerinfo()</b> in
<b>cg_servercmds.c</b> at about line 123:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
cgs.capturelimit = atoi( Info_ValueForKey( info, "capturelimit" ) );
cgs.timelimit = atoi( Info_ValueForKey( info, "timelimit" ) );
cgs.maxclients = atoi( Info_ValueForKey( info, "sv_maxclients" ) );

// KILDEREAN: g_PureAllowHook
<font color="#ff6060">cgs.fastGrapple = atoi( Info_ValueForKey( info, "g_PureFastHook" ) );</font>
cgs.allowhook = atoi( Info_ValueForKey( info, "g_PureAllowHook" ) );
// END KILDEREAN
</pre></font>


<p>And finally copy the value into the <b>pmove_t</b> structure for use
within <b>Pmove()</b>. The changes go into
<b>CG_PredictPlayerState()</b> in <b>cg_predict.c</b> at around line 437:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
cg_pmove.noFootsteps = ( cgs.dmflags &amp; DF_NO_FOOTSTEPS ) &gt; 0;

<font color="#ff6060">// KILDEREAN
if(cgs.fastGrapple == 1)
	cg_pmove.fastGrapple = qtrue;
else
	cg_pmove.fastGrapple = qfalse;
// END KILDEREAN</font>

// save the state before the pmove so we can detect transitions
oldPlayerState = cg.predictedPlayerState;
</pre></font>

<p>&nbsp;




<p>With <b>fastGrapple</b> set up, all that remains is to use it within
<b>PM_GrappleMove()</b> in <b>bg_pmove.c</b> (line 656):


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
if (vlen &lt;= 100)
	VectorScale(vel, 10 * vlen, vel);

<font color="#ff6060">// KILDEREAN
else{
	if(pm-&gt;fastGrapple)
		VectorScale(vel,PURE_FASTGRAPPLE, vel);
	else
		VectorScale(vel,PURE_NORMALGRAPPLE, vel);
}
// END KILDEREAN</font>

VectorCopy(vel, pm-&gt;ps-&gt;velocity);
</pre></font>


<p>&nbsp;




<font color="#E07F44"><H4>
3. Curing bounce pads
</H4></font>

<p>If you've implemented the grapple code so and given it a whirl, then
you'll soon find there's a problem with bounce pads. Sound effects are
often played again and again, while jump pads that kick you high enough
to give falling damage will actually damage you repeatedly.

<p>The server side must be fixed first, this is the definitive check
that we've actually hit the bouncepad. In <b>g_trigger.c</b> we update
<b>trigger_push_touch</b>, at about line 123:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
void trigger_push_touch (gentity_t *self,
		gentity_t *other, trace_t *trace ) {

	if ( !other-&gt;client ) {
		return;
	}

<font color="#ff6060"> 	// KILDEREAN
 	if (other-&gt;client &amp;&amp; other-&gt;client-&gt;hook)
		return;
	// END KILDEREAN</font>

	BG_TouchJumpPad( &amp;other-&gt;client-&gt;ps, &amp;self-&gt;s );
}
</pre></font>




<p>While this corrects the server side of the problem, there's still the
client side prediction of a bounce pad hit that needs to be fixed too.

<p>We need to add a variable that is true when we're firing the
grapple. In <b>cg_local.h</b> in the structure <b>playerEntity_t</b>, line 140:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	// machinegun spinning
	float	barrelAngle;
	int	barrelTime;
	qboolean	barrelSpinning;

<font color="#ff6060">	// KILDEREAN
 	int	grappleFiring;
 	// END KILDEREAN</font>

} playerEntity_t;
</pre></font>



<p>Then we have to set or clear this flag based on predicted movement in
<b>CG_AddPlayerWeapon()</b> in <b>cg_weapons.c</b>, about line 1004:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
if ( !ps ) {
	// add weapon ready sound
	cent-&gt;pe.lightningFiring = qfalse;
<font color="#ff6060">	// KILDEREAN
	cent-&gt;pe.grappleFiring = qfalse;
	// END KILDEREAN</font>

	if ( ( cent-&gt;currentState.eFlags &amp; EF_FIRING ) &amp;&amp; weapon-&gt;firingSound) {
		// lightning gun and guantlet make a different sound when fire is held down
		trap_S_AddLoopingSound( cent-&gt;currentState.number, cent-&gt;lerpOrigin, 
			vec3_origin, weapon-&gt;firingSound );
		cent-&gt;pe.lightningFiring = qtrue;
<font color="#ff6060">		// KILDEREAN + HYPOTHERMIA
		if (cg.predictedPlayerState.weapon == WP_GRAPPLING_HOOK)
			cent-&gt;pe.grappleFiring = qtrue;
		// END KILDEREAN</font>
	} else if ( weapon-&gt;readySound ) {
		trap_S_AddLoopingSound( cent-&gt;currentState.number, cent-&gt;lerpOrigin, 
			vec3_origin, weapon-&gt;readySound );
	}
}
</pre></font>


<center><table width="80%" border="2" cellpadding="8"> <tr><td>
<font face="Verdana, Arial" size="2" color="#eeeeee">
<p>The check for the weapon type (above) fixes a small bug in PureCTF
that disables jump pad prediction when firing the lightning gun or
gauntlet.
</font>
</td></tr>
</table>
</center>





<p>The last part is in <b>cg_predict.c</b> in
<b>CG_TouchTriggerPrediction()</b>, where we make the following addition
at about line 354:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
if ( ent-&gt;eType == ET_TELEPORT_TRIGGER ) {
	cg.hyperspace = qtrue;
} else if ( ent-&gt;eType == ET_PUSH_TRIGGER ) {

<font color="#ff6060">	// KILDEREAN : grappling disables jumpad predict
	// FIXME : maybe because this function differs from 1.17
	if ( cg.predictedPlayerEntity.pe.grappleFiring ) {
		continue;
	}
	// END KILDEREAN</font>

	BG_TouchJumpPad( &amp;cg.predictedPlayerState, ent );
}
</pre></font>


<p>&nbsp;


<font color="#E07F44"><H4>
4. Making the bots use the grapple
</H4></font>


<p>Now that you've added your grapple into the code, you'll want the
bots to use this weapon properly as well!

<p>PureCTF includes a bug fix for the bot grapple provided by Mr
Elusive, author of the bot code in in Q3. The fix correctly puts the
view offset relative to the bot. The change needs to be made to
<b>ai_dmq3.c</b> in <b>BotSetupForMovement()</b> at around line 1574:

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
void BotSetupForMovement(bot_state_t *bs) {
	bot_initmove_t initmove;

	memset(&amp;initmove, 0, sizeof(bot_initmove_t));
	VectorCopy(bs-&gt;cur_ps.origin, initmove.origin);
	VectorCopy(bs-&gt;cur_ps.velocity, initmove.velocity);

<font color="#ff6060">	// KILDEREAN : changed by Mr E to fix bot grapple
	// VectorCopy(bs-&gt;cur_ps.origin, initmove.viewoffset);
	VectorClear(initmove.viewoffset);
	// END KILDEREAN</font>

	initmove.viewoffset[2] += bs-&gt;cur_ps.viewheight;
</pre></font>

<p>&nbsp;



<p>The second change we need to make is in the update of the bot
library. The change is to <b>BotAIStartFrame()</b> in <b>ai_main.c</b>,
about line 1460.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
// do not update missiles
// KILDEREAN : added grapple so bots are fixed, by Mr E
if (ent-&gt;s.eType == ET_MISSILE <font color="#ff6060">&amp;&amp; ent-&gt;s.weapon != WP_GRAPPLING_HOOK</font>) {
// END KILDEREAN
	trap_BotLibUpdateEntity(i, NULL);
	continue;
}
</pre></font>

<p>&nbsp;



<p>Next we have to tell the bot library that the grapple isn't offhand, as well as
the weapon index for the grapple. We add this to the <b>BotInitLibrary()</b>
in <b>ai_main.c</b>, about line 1616.


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
if (strlen(buf)) trap_BotLibVarSet("cddir", buf);
//
#ifdef MISSIONPACK
trap_BotLibDefine("MISSIONPACK");
#endif

<font color="#ff6060">// KILDEREAN
trap_BotLibVarSet("offhandgrapple", "0");
trap_BotLibVarSet("weapindex_grapple", "10");
// END KILDEREAN</font>

//setup the bot library
return trap_BotLibSetup();
</pre></font>

<p>&nbsp;



<p>Finally we enable the grapple for use by the bots. This is back in
<b>ai_dmq3.c</b>, in <b>BotSetupDeathmatchAI()</b> at about line 5358.


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
maxclients = trap_Cvar_VariableIntegerValue("sv_maxclients");

trap_Cvar_Register(&amp;bot_rocketjump, "bot_rocketjump", "1", 0);
<font color="#ff6060">// KILDEREAN : changed to default to 1</font>
trap_Cvar_Register(&amp;bot_grapple, "bot_grapple", "<font color="#ff6060">1</font>", 0);
<font color="#ff6060">// END KILDEREAN</font>
trap_Cvar_Register(&amp;bot_fastchat, "bot_fastchat", "0", 0);
</pre></font>

<p>&nbsp;


<center><table width="80%" border="2" cellpadding="8"> <tr><td>
<font face="Verdana, Arial" size="2" color="#eeeeee">
<p>Three things that you should know: 

<ol>
<li>A map must be BSP'd with the <b>-grapplereach</b> option when using bspc.exe. 
The bots can then calculate routes to places while using the grapple.

<li>You've got to set <b>bot_grapple 1</b> for the bots to actually use
the grapple.

<li>Bots don't often use the grapple. Even when you've installed this
code, you won't see them use it very often. When they're engaged in
combat, the grapple definitely won't be used. The best map that I've
found for seeing the use of the grapple is <b>puremap6</b>.
</ol>
</font>
</td></tr>
</table>
</center>


<p>&nbsp;


<font color="#E07F44"><H4>
5. A loose end...
</H4></font>

<p>You've now built a more detailed grapple implementation into your
mod... you can now have some fun trying to turn it into an offhand
version!

<p>One other issue that needs attention is when the grapple hits a
mover. Unfortunately it stays in a fixed position while the mover
doesn't stop. I'll leave you to have a bit of fun with this loose end.



      <p>
 </font></td>
  </tr>
</table>

  </td></tr>
</table>

  <!-- END MAIN TEXT AREA -->

<p>

	<!-- BEGIN BOTTOM HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial39.shtml">&lt;&lt; Prev</a> |
	Tutorial 40 |
	<a href="tutorial41.shtml">Next &gt;&gt;</a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTOTM HEIRARCHY -->

</body>
</html>
