<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0061)http://www.planetquake.com/assimilation/tutorials/assim1.html -->
<HTML><HEAD><TITLE>Q3 Tutorial: Adding Customizable Weapon Switching</TITLE>
<META content="text/html; charset=iso-8859-1" http-equiv=Content-Type>
<META content="Mark Smeltzer" name=Author>
<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY aLink=#ffffcc bgColor=#000000 link=#ffff00 text=#ffffff 
vLink=#ffcc00><FONT face=Arial,Helvetica><FONT color=#ffffff><FONT size=-1>This 
code is Copyright (c) 2000 by Mark "WarZone" Smeltzer. You may freely use this 
code as long a credit for its existance is given to the 
author.</FONT></FONT></FONT> <BR>
<HR SIZE=0 width="100%">
<BR><FONT 
face=Arial,Helvetica>Author:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Mark "WarZone" Smeltzer</FONT> <BR><FONT face=Arial,Helvetica>Contact 
Email:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
warzone@planetquake.com</FONT> <BR><FONT 
face=Arial,Helvetica>Title:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Assimilation Tutorial #1: Customizable Weapon Switching</FONT> <BR><FONT 
face=Arial,Helvetica>Difficulty:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Medium - Hard (easy to cut-n-paste, a bit difficult to fully understand)</FONT> 
<BR><FONT face=Arial,Helvetica>Estimated Completion Time:&nbsp;&nbsp; 10 - 20 
minutes</FONT> 
<P><FONT face=Arial,Helvetica>Coolness 
Factor:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
93.687%</FONT> <BR><FONT face=Arial,Helvetica>Usefulness 
Factor:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
98.234%</FONT> <BR><FONT face=Arial,Helvetica>Ease Of Use 
Factor:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
42.713%</FONT> 
<P><FONT face=Arial,Helvetica>Improvement 
Suggestion:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Develope an easy to use 
GUI program or UI extension to easily set the cg_weaponOrder variable</FONT> 
<BR>
<HR SIZE=0 width="100%">
<BR><FONT face=Arial,Helvetica>Downloads:</FONT> 
<P><FONT face=Arial,Helvetica>I will be posting a compiled versions tutorial 
(implemented in unmodified Q3A source) in both DLL and QVM formats.</FONT> 
<BR><FONT face=Arial,Helvetica>I will also post a version of the Q3A source with 
this tutorial fully implemented.</FONT> 
<P><FONT face=Arial,Helvetica>check back in a day or two...</FONT> <BR>
<HR SIZE=0 width="100%">
<BR><FONT face=Arial,Helvetica>Tutorial Overview:</FONT> 
<P><FONT face=Arial,Helvetica>This tutorial will allow each client that plays 
your mod to have their own customizable weapon switching. Quake2 had locked 
weapon precedences, but back in the days of the original Quake each player could 
choose their own precedences. So in Quake2 the BFG was the "best" gun, then the 
rail gun, then hyperblaster, then rocket launcher, etc. But in Quake you could 
choose your own order.</FONT> 
<P><FONT face=Arial,Helvetica>So what cool weapon switching features did Quake3 
bring us? None; sadly. In Quake3 you have two options: auto switch, and manual 
switch. Autoswitch means that any time you pick up a weapon you will 
automatically use it. Even if you've got the BFG in hands and you pick up a shot 
gun you'll be forced to draw the shot gun. Talk about lame... And manual switch 
is even worse! In manual mode it never forces you to draw a gun. So you have to 
manually switch to the guns as you pick them up.</FONT> 
<P><FONT face=Arial,Helvetica>Neither of the methods in Quake3 is acceptable to 
the hard core gamer. So we're going to do something about it : )</FONT> 
<P><FONT face=Arial,Helvetica>This tutorial will show you how to implement Quake 
style weapon switching which is fully customizable on a per user basis. Each 
user will have a cvar "cg_weaponOrder" that controls their weapon preferences. 
Let's get started then...</FONT> <BR>
<HR SIZE=0 width="100%">
<BR><FONT face=Arial,Helvetica>Color Codes:</FONT> 
<P><FONT face=Arial,Helvetica>Text in <FONT color=#00ffff>cyan</FONT> is code 
that needs to be added. Text in <FONT color=#ff0000>red</FONT> is code that 
needs to be deleted/commented out.</FONT> <BR>
<HR SIZE=0 width="100%">
<BR><FONT face=Arial,Helvetica>Files Changed:</FONT> 
<P><FONT face=Arial,Helvetica>We'll be modifying the following files:</FONT> 
<UL>
  <LI><FONT face=Arial,Helvetica>cg_weapons.c</FONT> 
  <LI><FONT face=Arial,Helvetica>cg_main.c</FONT> 
  <LI><FONT face=Arial,Helvetica>cg_local.h</FONT> 
  <LI><FONT face=Arial,Helvetica>cg_event.c</FONT> 
  <LI><FONT face=Arial,Helvetica>g_items.c</FONT> 
  <LI><FONT face=Arial,Helvetica>g_main.c</FONT> </LI></UL><FONT 
face=Arial,Helvetica>So this is both a server side and client side modification. 
It can be done client side only, but by doing so you'll loose some important 
functionality (which will be explained later).</FONT> <BR>
<HR SIZE=0 width="100%">
<BR><FONT face=Arial,Helvetica>The Tutorial:</FONT> 
<P><FONT face=Arial,Helvetica>First open cg_local.h and find the "cg_main.c" 
definitions:</FONT> 
<BLOCKQUOTE><TT>//</TT> <BR><TT>// cg_main.c</TT> <BR><TT>//</TT> 
  <BR><TT>const char *CG_ConfigString( int index );</TT> <BR><TT>const char 
  *CG_Argv( int arg );</TT> 
  <P><TT>void QDECL CG_Printf( const char *msg, ... );</TT> <BR><TT>void QDECL 
  CG_Error( const char *msg, ... );</TT> 
  <P><TT>void CG_StartMusic( void );</TT> 
  <P><TT>void CG_UpdateCvars( void );</TT> 
  <P><TT>int CG_CrosshairPlayer( void );</TT> <BR><TT>int CG_LastAttacker( void 
  );</TT> 
  <P><TT><FONT color=#00ffff>//WarZone</FONT></TT> <BR><TT><FONT 
  color=#00ffff>#define NUM_WEAPS 9</FONT></TT> <BR><TT><FONT 
  color=#00ffff>extern&nbsp; int cg_weaponsCount;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>extern&nbsp; int weaponOrder[NUM_WEAPS];</FONT></TT> 
  <BR><TT><FONT color=#00ffff>extern&nbsp; int 
  weaponRawOrder[NUM_WEAPS];</FONT></TT> <BR><TT><FONT color=#00ffff>int 
  RateWeapon (int weapon);</FONT></TT> <BR><TT><NOBR><FONT color=#00ffff>int 
  NextWeapon (int curr);</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>int PrevWeapon (int 
curr);</FONT></NOBR></TT></P></BLOCKQUOTE><FONT face=Arial,Helvetica>Save and 
close cg_local.h, we're done with that file.</FONT> 
<P><FONT face=Arial,Helvetica>Now open cg_main.c and find the cvar 
definitions:</FONT> 
<BLOCKQUOTE><TT>vmCvar_t cg_deferPlayers;</TT> <BR><TT>vmCvar_t 
  cg_drawTeamOverlay;</TT> <BR><TT>vmCvar_t cg_teamOverlayUserinfo;</TT> 
  <P><TT><FONT color=#00ffff>vmCvar_t cg_weaponOrder; //WarZone</FONT></TT> 
  <BR><TT><FONT color=#00ffff>int cg_weaponsCount = -1; 
//WarZone</FONT></TT></P></BLOCKQUOTE><FONT face=Arial,Helvetica>Now find the 
cvar table:</FONT> 
<BLOCKQUOTE><TT>&nbsp;{ &amp;cg_buildScript, "com_buildScript", "0", 0 }, // 
  force loading of all possible data amd error on failures</TT> <BR><TT>&nbsp;{ 
  &amp;cg_paused, "cl_paused", "0", CVAR_ROM },</TT> <BR><TT>&nbsp;{ 
  &amp;cg_blood, "com_blood", "1", CVAR_ARCHIVE },</TT> <BR><TT>&nbsp;{ 
  &amp;cg_syncronousClients, "g_syncronousClients", "0", 0 }<FONT 
  color=#00ffff>,</FONT> // communicated by systeminfo</TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;{ &amp;cg_weaponOrder, "cg_weaponOrder", 
  "1/2/3/4/5/6/7/8/9", CVAR_ARCHIVE }, //WarZone</FONT></TT></BLOCKQUOTE><FONT 
face=Arial,Helvetica>Note: you might need to add a comma at the end of the 
cg_syncronousClients definition (I put that comma in cyan but its hardly 
obvious).</FONT> 
<P><FONT face=Arial,Helvetica>Now we're going to add the bulk of my new code. 
The new code will live right below the cvar table:</FONT> 
<BLOCKQUOTE><TT><NOBR>&nbsp;{ &amp;cg_buildScript, "com_buildScript", "0", 0 
  }, // force loading of all possible data amd error on failures</NOBR></TT> 
  <BR><TT><NOBR>&nbsp;{ &amp;cg_paused, "cl_paused", "0", CVAR_ROM 
  },</NOBR></TT> <BR><TT><NOBR>&nbsp;{ &amp;cg_blood, "com_blood", "1", 
  CVAR_ARCHIVE },</NOBR></TT> <BR><TT><NOBR>&nbsp;{ &amp;cg_syncronousClients, 
  "g_syncronousClients", "0", 0 }, // communicated by systeminfo</NOBR></TT> 
  <BR><TT><NOBR>&nbsp;{ &amp;cg_weaponOrder, "cg_weaponOrder", 
  "1/2/3/4/5/6/7/8/9", CVAR_ARCHIVE }, //WarZone</NOBR></TT> 
  <BR><TT><NOBR>};</NOBR></TT> 
  <P><TT><NOBR><FONT color=#ffffff>int&nbsp; cvarTableSize = sizeof( cvarTable ) 
  / sizeof( cvarTable[0] );</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>//&lt;WarZone&gt;</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>int 
  weaponOrder[NUM_WEAPS];</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>int weaponRawOrder[NUM_WEAPS];</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>int NextWeapon (int curr)</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>{</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp; int i;</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp; int w = -1;</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; for (i = 0; i &lt; NUM_WEAPS; 
  i++)</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; 
  {</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; if 
  (weaponRawOrder[i] == curr)</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; {</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; w = i;</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  break;</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; 
  }</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; 
  }</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; if (w == -1)</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; return curr; //shouldn't 
  happen</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; return weaponRawOrder[(w + 1) % 
  NUM_WEAPS];</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>}</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>int PrevWeapon (int curr)</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>{</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp; int i;</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp; int w = -1;</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; for (i = 0; i &lt; NUM_WEAPS; 
  i++)</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; 
  {</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; if 
  (weaponRawOrder[i] == curr)</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; {</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; w = i;</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  break;</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; 
  }</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; 
  }</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; if (w == -1)</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; return curr; //shouldn't 
  happen</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; return weaponRawOrder[w - 1 &gt;= 0 ? 
  w - 1 : NUM_WEAPS - 1];</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>}</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>int RateWeapon (int 
  weapon)</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>{</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; 
  weapon--;</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; if (weapon &gt; 8 || weapon &lt; 
  0)</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; 
  return 0; //bad weapon</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; return 
  weaponOrder[weapon];</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>}</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>int contains(int *list, int size, int 
  number)</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>{</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; 
  int i;</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; for (i = 0; i &lt; size; 
  i++)</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; 
  if (list[i] == number) return 1;</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; return 0;</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>}</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>void UpdateWeaponOrder 
  (void)</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>{</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; 
  char *order = cg_weaponOrder.string;</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp; char weapon[3];</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp; int i, start;</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp; int tempOrder[NUM_WEAPS];</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp; int 
  weapUsed[NUM_WEAPS];</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp; int temp;</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; weapon[1] = '\0';</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp; memset(tempOrder, 0, 
  sizeof(tempOrder));</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp; memset(weapUsed, 0, sizeof(weapUsed));</FONT></NOBR></TT> 

  <P><TT><NOBR><FONT color=#00ffff>&nbsp; i = 0;</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp; while (order != NULL &amp;&amp; 
  *order != '\0' &amp;&amp; i &lt; NUM_WEAPS)</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp; {</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; weapon[0] = 
  *order;</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; order++;</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; if (*order != '\\' || 
  *order != '/')</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; {</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; weapon[1] = 
  *order;</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; weapon[2] = 
  '\0';</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; order++;</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; } else 
  {</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; weapon[1] = 
  '\0';</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; 
  }</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; if (*order != 
  '\0')</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; order++;</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; temp = atoi( weapon 
  );</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; if 
  (temp &lt; 1 || temp &gt; NUM_WEAPS)</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; {</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CG_Printf( "Error: %i is out of 
  range. Ignoring..\n", temp );</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; }</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; else if ( contains( tempOrder, 
  sizeof(tempOrder)/sizeof(tempOrder[0]), temp ) )</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; {</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CG_Printf( 
  "Error: %s (%i) already in list. Ignoring..\n", (BG_FindItemForWeapon( temp 
  ))-&gt;pickup_name, temp );</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; } else {</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempOrder[i] 
  = temp;</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; weapUsed[temp - 1] = 
  1;</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i++;</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; }</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp; }</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; //error checking..</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp; start = 0;</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp; for (i = 0; i &lt; NUM_WEAPS; 
  i++)</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; 
  {</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; if 
  (weapUsed[i])</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;</FONT></NOBR></TT> 
  <BR><TT><NOBR><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; CG_Printf( "Error: %s 
  (%i) not in list. Adding it to front of the list..\n", (BG_FindItemForWeapon( 
  i + 1 ))-&gt;pickup_name, i + 1 );</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; weaponRawOrder[start++] = i + 
  1;</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; 
  }</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; //build the raw 
  order list</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; for (i 
  = start; i &lt; NUM_WEAPS; i++)</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; weaponRawOrder[i] = tempOrder[i - 
  start];</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>&nbsp; //built the remaping 
  table</FONT></NOBR></TT> <BR><TT><NOBR><FONT color=#00ffff>&nbsp; for (i = 0; 
  i &lt; NUM_WEAPS; i++)</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; weaponOrder[weaponRawOrder[i] - 1] = i + 
  1;</FONT></NOBR></TT> 
  <P><TT><NOBR><FONT color=#00ffff>}</FONT></NOBR></TT> <BR><TT><NOBR><FONT 
  color=#00ffff>//&lt;/WarZone&gt;</FONT></NOBR></TT></P></BLOCKQUOTE><FONT 
face=Arial,Helvetica>Ok now let's talk about what that code does for a sec. We 
just added NextWeapon(), PrevWeapon(), RateWeapon(), contains(), and 
UpdateWeaponOrder(). UpdateWeaponOrder() will be called everytime a player 
modifies their weapon order. NextWeapon() and PrevWeapon() are used to cycle 
through the players' weapon precendeces. RateWeapon() returns the "rating" of a 
weapon which is used to determine if a new weapon is better than the one the 
player is already carrying. contains() is a simple helper function which returns 
true if a list contains a certain value.</FONT> 
<P><FONT face=Arial,Helvetica>Now find CG_UpdateCvars():</FONT> 
<BLOCKQUOTE><TT>void CG_UpdateCvars( void ) {</TT> 
  <BR><TT>&nbsp;int&nbsp;&nbsp; i;</TT> <BR><TT>&nbsp;cvarTable_t *cv;</TT> 
  <P><TT>&nbsp;for ( i = 0, cv = cvarTable ; i &lt; cvarTableSize ; i++, cv++ ) 
  {</TT> <BR><TT>&nbsp; trap_Cvar_Update( cv-&gt;vmCvar );</TT> 
  <BR><TT>&nbsp;}</TT> 
  <P><TT>&nbsp;// check for modications here</TT> 
  <P><TT>&nbsp;// If team overlay is on, ask for updates from the server.&nbsp; 
  If its off,</TT> <BR><TT>&nbsp;// let the server know so we don't receive 
  it</TT> <BR><TT>&nbsp;if ( drawTeamOverlayModificationCount != 
  cg_drawTeamOverlay.modificationCount ) {</TT> <BR><TT>&nbsp; 
  drawTeamOverlayModificationCount = cg_drawTeamOverlay.modificationCount;</TT> 
  <P><TT>&nbsp; if ( cg_drawTeamOverlay.integer &gt; 0 ) {</TT> 
  <BR><TT>&nbsp;&nbsp; trap_Cvar_Set( "teamoverlay", "1" );</TT> <BR><TT>&nbsp; 
  } else {</TT> <BR><TT>&nbsp;&nbsp; trap_Cvar_Set( "teamoverlay", "0" );</TT> 
  <BR><TT>&nbsp; }</TT> <BR><TT>&nbsp;}</TT> 
  <P><TT><FONT color=#00ffff>&nbsp; //WarZone</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; if ( cg_weaponsCount != cg_weaponOrder.modificationCount 
  )</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; UpdateWeaponOrder();</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; cg_weaponsCount = 
  cg_weaponOrder.modificationCount;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; }</FONT></TT> <BR><TT>}</TT></P></BLOCKQUOTE><FONT 
face=Arial,Helvetica>That code will call <FONT color=#ffffff>UpdateWeaponOrder() 
whenever the cvar "cg_weaponOrder" is modified.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Save and close cg_main.c, 
we're done with that file.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Next open cg_weapons.c and 
find the function CG_DrawWeaponSelect(). You can either comment out, or delete 
the old function. Replace it with this function instead:</FONT></FONT> 
<BLOCKQUOTE><TT><FONT color=#00ffff>void CG_DrawWeaponSelect( void ) 
  {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;int&nbsp; i;</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;int&nbsp; bits;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;int&nbsp; count;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;int&nbsp; weap;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;int&nbsp; x, y, w;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;char *name;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;float *color;</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;// don't display if dead</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;if ( 
  cg.predictedPlayerState.stats[STAT_HEALTH] &lt;= 0 ) {</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; return;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;}</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;color = CG_FadeColor( cg.weaponSelectTime, 
  WEAPON_SELECT_TIME );</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;if ( 
  !color ) {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; 
  return;</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;}</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;trap_R_SetColor( color );</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;// showing weapon select clears pickup item 
  display, but not the blend blob</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;cg.itemPickupTime = 0;</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;// count the number of weapons 
  owned</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;bits = 
  cg.snap-&gt;ps.stats[ STAT_WEAPONS ];</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;count = 0;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;for ( i = 1 ; i &lt; NUM_WEAPS ; i++ ) { 
  //WarZone</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; if ( bits &amp; 
  ( 1 &lt;&lt; i ) ) {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp; count++;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp; }</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;}</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;x = 320 - count * 20;</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;y = 380;</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;weap = weaponRawOrder[NUM_WEAPS - 1]; 
  //WarZone -- select last weapon</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;for ( i = 0 ; i &lt; NUM_WEAPS ; i++ ) { 
  //WarZone</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; weap = 
  NextWeapon( weap );</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;&nbsp; if ( !( bits &amp; ( 1 &lt;&lt; weap ) 
  ) ) {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp; 
  continue;</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; }</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;&nbsp; CG_RegisterWeapon( weap );</FONT></TT> 

  <P><TT><FONT color=#00ffff>&nbsp;&nbsp; // draw weapon icon</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; CG_DrawPic( x, y, 32, 32, 
  cg_weapons[weap].weaponIcon );</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;&nbsp; // draw selection marker</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; if ( weap == cg.weaponSelect ) 
  {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp; CG_DrawPic( 
  x-4, y-4, 40, 40, cgs.media.selectShader );</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp; }</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;&nbsp; // no ammo cross on top</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; if ( !cg.snap-&gt;ps.ammo[ weap ] ) 
  {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp; CG_DrawPic( 
  x, y, 32, 32, cgs.media.noammoShader );</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp; }</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;&nbsp; x += 40;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;}</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;// draw the selected name</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;if ( cg_weapons[ cg.weaponSelect ].item ) 
  {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; name = cg_weapons[ 
  cg.weaponSelect ].item-&gt;pickup_name;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp; if ( name ) {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp; w = CG_DrawStrlen( name ) * 
  BIGCHAR_WIDTH;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp; x = ( SCREEN_WIDTH - w ) / 
  2;</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp; 
  CG_DrawBigStringColor(x, y - 22, name, color);</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp; }</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;}</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;trap_R_SetColor( NULL );</FONT></TT> 
  <BR><TT><FONT color=#00ffff>}</FONT></TT></P></BLOCKQUOTE><FONT 
face=Arial,Helvetica><FONT color=#ffffff>This new function will display the 
weapons' icons in the player's customized weapon order -- very cool : 
)</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Now scroll down a bit and 
replace the function CG_NextWeapon_f() with this function:</FONT></FONT> 
<BLOCKQUOTE><TT><FONT color=#00ffff>void CG_NextWeapon_f( void ) {</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;int&nbsp; i;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;int&nbsp; original;</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;if ( !cg.snap ) {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; return;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;}</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;if ( 
  cg.snap-&gt;ps.pm_flags &amp; PMF_FOLLOW ) {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; return;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;}</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;cg.weaponSelectTime = cg.time;</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;original = cg.weaponSelect;</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp; for ( i = 0 ; i &lt; NUM_WEAPS ; i++ ) { 
  //WarZone</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; cg.weaponSelect = 
  NextWeapon( cg.weaponSelect );//WarZone</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp; if ( cg.weaponSelect == WP_GAUNTLET ) 
  {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; continue;&nbsp; // 
  never cycle to gauntlet</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; 
  }</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; if ( CG_WeaponSelectable( 
  cg.weaponSelect ) ) {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; 
  break;</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; }</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;}</FONT></TT> <BR><TT><FONT 
  color=#00ffff>}</FONT></TT></P></BLOCKQUOTE><FONT face=Arial,Helvetica><FONT 
color=#ffffff>This function taps into the NextWeapon() function we added to 
cg_main.c to select the next weapon from the user's customized weapon 
order.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Scroll down again and replace 
CG_PrevWeapon_f() with this function:</FONT></FONT> 
<BLOCKQUOTE><TT><FONT color=#00ffff>void CG_PrevWeapon_f( void ) {</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;int&nbsp; i;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;int&nbsp; original;</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;if ( !cg.snap ) {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; return;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;}</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;if ( 
  cg.snap-&gt;ps.pm_flags &amp; PMF_FOLLOW ) {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; return;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;}</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;cg.weaponSelectTime = cg.time;</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;original = cg.weaponSelect;</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp;for ( i = 0 ; i &lt; NUM_WEAPS ; i++ ) { 
  //WarZone</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; cg.weaponSelect = 
  PrevWeapon( cg.weaponSelect ); //WarZone</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp; if ( cg.weaponSelect == WP_GAUNTLET ) 
  {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; continue;&nbsp; // 
  never cycle to gauntlet</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; 
  }</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; if ( CG_WeaponSelectable( 
  cg.weaponSelect ) ) {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; 
  break;</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; }</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;}</FONT></TT> <BR><TT><FONT 
  color=#00ffff>}</FONT></TT></P></BLOCKQUOTE><FONT face=Arial,Helvetica><FONT 
color=#ffffff>This function taps into the PrevWeapon() function we added to 
cg_main.c to select the weapon before the current weapon (not to be confused 
with "select the last weapon I was using" functionality) from the user's 
customized weapon order.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Keep scrolling down and 
replace CG_OutOfAmmoChange() with this function:</FONT></FONT> 
<BLOCKQUOTE><TT><FONT color=#00ffff>void CG_OutOfAmmoChange( void ) 
  {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; int&nbsp; i;</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp; int&nbsp; weap;</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp; cg.weaponSelectTime = cg.time;</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp; weap = weaponRawOrder[NUM_WEAPS - 1]; 
  //WarZone -- pick the best weapon they have</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp; for ( i = 0 ; i &lt; NUM_WEAPS ; i++, weap = 
  PrevWeapon( weap )) {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; if ( CG_WeaponSelectable( weap ) ) 
  {</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if 
  (weap != WP_GAUNTLET)</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cg.weaponSelect = 
  weap;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; }</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; }</FONT></TT> 
  <P><TT><FONT color=#00ffff>&nbsp; cg.weaponSelect = WP_GAUNTLET;</FONT></TT> 
  <BR><TT><FONT color=#00ffff>}</FONT></TT> <BR>&nbsp;</P></BLOCKQUOTE><FONT 
face=Arial,Helvetica><FONT color=#ffffff>This causes the best weapon the player 
has (accoring to their customized weapon order) to be selected. If no suitable 
weapon is found, the Gauntlet will be selected.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Save and close cg_weapons.c, 
we're done with that file.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Next open cg_event.c and find 
the function CG_ItemPickup() and replace it with this one:</FONT></FONT> 
<BLOCKQUOTE><TT><FONT color=#00ffff>static void CG_ItemPickup( int itemNum, 
  int isnewitem ) { //WarZone</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; 
  cg.itemPickup = itemNum;</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; 
  cg.itemPickupTime = cg.time;</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp; 
  cg.itemPickupBlendTime = cg.time;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; // see if it should be the grabbed weapon</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp; if ( bg_itemlist[itemNum].giType == 
  IT_WEAPON</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp; 
  &amp;&amp; isnewitem ) //WarZone</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; // select it immediately</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; if ( cg_autoswitch.integer 
  &amp;&amp; bg_itemlist[itemNum].giTag != WP_MACHINEGUN ) {</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (RateWeapon( 
  bg_itemlist[itemNum].giTag) &gt; RateWeapon( cg.weaponSelect )) 
  //WarZone</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cg.weaponSelectTime = 
  cg.time;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cg.weaponSelect = 
  bg_itemlist[itemNum].giTag;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; }</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp; }</FONT></TT> <BR><TT><FONT 
color=#00ffff>}</FONT></TT></BLOCKQUOTE><FONT face=Arial,Helvetica><FONT 
color=#ffffff>If you were paying attention just then, you'd have noticed that I 
changed the function header for CG_ItemPickup() to include a new parameter 
"isnewitem". This is the part of the code where this modification switches from 
client side only to include server side changes. The reasoning behind this is 
that the client module has no effective way of deciding if the player has just 
collected an item, or it the player has had one for a while. There are methods 
of bypassing the server code, but none of them worked effectively (it is 
possible to create an "oldweapons" variable and compare the current set against 
the old set, but this method breaks when the player dies and looses all of his 
weapons at once).</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Now find the CG_EntityEvent() 
function and scroll down to the EV_ITEM_PICKUP event:</FONT></FONT> 
<BLOCKQUOTE><TT><FONT color=#00ffff>&nbsp; case EV_ITEM_PICKUP2:</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp; DEBUGNAME("EV_ITEM_PICKUP");</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; es-&gt;number = 
  es-&gt;otherEntityNum; //this is a bit of a hack.. but it works 
  GRREAT!</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp; case 
  EV_ITEM_PICKUP:</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp; 
  DEBUGNAME("EV_ITEM_PICKUP");</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp; 
  {</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; gitem_t 
  *item;</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; int&nbsp; 
  index;</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; int&nbsp;&nbsp; 
  isnewitem; //WarZone</FONT></TT> 
  <P><TT><FONT color=#ffffff>&nbsp;&nbsp; index = es-&gt;eventParm;&nbsp; // 
  player predicted</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; 
  isnewitem = es-&gt;otherEntityNum2; //WarZone</FONT></TT> 
  <P><TT><FONT color=#ffffff>&nbsp;&nbsp; if ( index &lt; 1 || index &gt;= 
  bg_numItems ) {</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;&nbsp;&nbsp; 
  break;</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; }</FONT></TT> 
  <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; item = &amp;bg_itemlist[ index 
  ];</FONT></TT> 
  <P><TT><FONT color=#ffffff>&nbsp;&nbsp; // powerups and team items will have a 
  separate global sound, this one</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp; // will be played at prediction time</FONT></TT> 
  <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; if ( item-&gt;giType == IT_POWERUP || 
  item-&gt;giType == IT_TEAM) {</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp;&nbsp;&nbsp; trap_S_StartSound (NULL, es-&gt;number, 
  CHAN_AUTO, trap_S_RegisterSound( "sound/items/n_health.wav" ) );</FONT></TT> 
  <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; } else {</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp;&nbsp;&nbsp; trap_S_StartSound (NULL, es-&gt;number, 
  CHAN_AUTO, trap_S_RegisterSound( item-&gt;pickup_sound ) );</FONT></TT> 
  <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; }</FONT></TT> 
  <P><TT><FONT color=#ffffff>&nbsp;&nbsp; // show icon and name on status 
  bar</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; if ( es-&gt;number == 
  cg.snap-&gt;ps.clientNum ) {</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;</FONT><FONT color=#ff0000>&nbsp;&nbsp;&nbsp; 
  CG_ItemPickup( index ); //kill this line</FONT></TT> <BR><TT><FONT 
  color=#ff0000>&nbsp;</FONT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; 
  CG_ItemPickup( index, isnewitem ); //WarZone</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp; }</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp; 
  }</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp; 
break;</FONT></TT></P></BLOCKQUOTE><FONT face=Arial,Helvetica><FONT 
color=#ffffff>Here again is the reference of new server code. The 
es-&gt;otherEntityNum2 must be set server side so that the client code will know 
whether the item being picked up is a new item or not. The new "EV_ITEM_PICKUP2" 
event will be explained further down.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Next scroll down to the 
EV_GLOBAL_ITEM_PICKUP event and make the following change:</FONT></FONT> 
<BLOCKQUOTE><TT><FONT color=#ffffff>&nbsp;case 
  EV_GLOBAL_ITEM_PICKUP:</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp; 
  DEBUGNAME("EV_GLOBAL_ITEM_PICKUP");</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp; {</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; 
  gitem_t *item;</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; int&nbsp; 
  index;</FONT></TT> 
  <P><TT><FONT color=#ffffff>&nbsp;&nbsp; index = es-&gt;eventParm;&nbsp; // 
  player predicted</FONT></TT> 
  <P><TT><FONT color=#ffffff>&nbsp;&nbsp; if ( index &lt; 1 || index &gt;= 
  bg_numItems ) {</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp;&nbsp;&nbsp; break;</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp; }</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp; item = &amp;bg_itemlist[ index ];</FONT></TT> 
  <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; // powerup pickups are 
  global</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; trap_S_StartSound 
  (NULL, cg.snap-&gt;ps.clientNum, CHAN_AUTO, trap_S_RegisterSound( 
  item-&gt;pickup_sound ) );</FONT></TT> 
  <P><TT><FONT color=#ffffff>&nbsp;&nbsp; // show icon and name on status 
  bar</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;&nbsp; if ( es-&gt;number == 
  cg.snap-&gt;ps.clientNum ) {</FONT></TT> <BR><TT><FONT 
  color=#ff0000>&nbsp;&nbsp;&nbsp;&nbsp; CG_ItemPickup( index ); //kill this 
  line</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp; 
  CG_ItemPickup( index, 1 ); //WarZone</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp; }</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp; 
  }</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp; 
break;</FONT></TT></P></BLOCKQUOTE><FONT face=Arial,Helvetica><FONT 
color=#ffffff>That's it for cg_event.c, save and close.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Finally open g_items.c (in the 
/game code) and find the Touch_Item() function. We're only going to be making a 
few small changes:</FONT></FONT> 
<BLOCKQUOTE><TT><FONT color=#ffffff>void Touch_Item (gentity_t *ent, gentity_t 
  *other, trace_t *trace) {</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;int&nbsp;&nbsp; respawn;</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;int&nbsp;&nbsp; had = 1; //WarZone</FONT></TT> 
  <BR><TT><FONT color=#ffffff>...</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;case IT_WEAPON:</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; //WarZone</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp; if ( 
  other-&gt;client-&gt;ps.stats[STAT_WEAPONS] &amp; (1 &lt;&lt; 
  ent-&gt;item-&gt;giTag) )</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; had = 1;</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; else</FONT></TT> <BR><TT><FONT 
  color=#00ffff>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; had = 0;</FONT></TT> 
  <BR><TT><FONT color=#ffffff>&nbsp; respawn = Pickup_Weapon(ent, 
  other);</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp; break;</FONT></TT> 
  <BR><TT><FONT color=#ffffff>...</FONT></TT> <BR><TT><FONT 
  color=#ff0000>&nbsp;if ( other-&gt;client-&gt;pers.predictItemPickup) { //kill 
  these lines</FONT></TT> <BR><TT><FONT color=#ff0000>&nbsp;&nbsp; 
  G_AddPredictableEvent( other, EV_ITEM_PICKUP, ent-&gt;s.modelindex 
  );</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;if ( 0 ) { 
  //WarZone</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp; //do 
  nothing...</FONT></TT> <BR><TT><FONT color=#ffffff>&nbsp;} else {</FONT></TT> 
  <BR><TT><FONT color=#ffffff>&nbsp;&nbsp;&nbsp; //WarZone</FONT></TT> 
  <BR><TT><FONT color=#ffffff>&nbsp;&nbsp;&nbsp; gentity_t *event;</FONT></TT> 
  <P><TT><FONT color=#ff0000>&nbsp;&nbsp;&nbsp; event = 
  G_TempEntity(ent-&gt;s.origin, EV_ITEM_PICKUP); //kill this line</FONT></TT> 
  <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; event = 
  G_TempEntity(ent-&gt;s.origin, EV_ITEM_PICKUP2);</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp;&nbsp; event-&gt;s.eventParm = 
  ent-&gt;s.modelindex;</FONT></TT> <BR><TT><FONT 
  color=#ffffff>&nbsp;&nbsp;&nbsp; event-&gt;s.otherEntityNum = 
  other-&gt;s.number;</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; 
  event-&gt;s.otherEntityNum2 = !had; //WarZone -- used to tell cgame if its a 
  new weapon</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;&nbsp;&nbsp; 
  event-&gt;r.svFlags |= SVF_BROADCAST; //broadcast it to everyone</FONT></TT> 
  <P><TT><FONT color=#ff0000>&nbsp;&nbsp;&nbsp; G_AddEvent( other, 
  EV_ITEM_PICKUP, ent-&gt;s.modelindex ); //kill this line</FONT></TT> 
  <BR><TT><FONT color=#ffffff>&nbsp;}</FONT></TT> <BR><TT><FONT 
  color=#ffffff>...</FONT></TT> <BR><TT><FONT 
color=#ffffff>}</FONT></TT></P></BLOCKQUOTE><FONT color=#ffffff><FONT 
face=Arial,Helvetica>Note: The "</FONT><TT>...</TT><FONT face=Arial,Helvetica>" 
lines mean "some code in between" -- do not put the "</FONT><TT>...</TT><FONT 
face=Arial,Helvetica>" lines in your code.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>If you were paying attention 
just then you realized that we just made a drastic change to the item pickup 
logic. The reasoning behind this is that (first and foremost) predicted events 
can only have one parameter; the second reason to this is that the predictable 
event structure isn't very reliable. Have you ever been playing Q3 and run over 
a weapon, but not hear the pick up sound? If so that is because the predictable 
events structure is getting flooded and the EV_ITEM_PICKUP event is getting 
lost.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Now the EV_ITEM_PICKUP events 
will be sent via an external temp entity to ensure that these vital event 
messages are not lost in the heat of combat.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Alright save and close 
g_items.c, done with that file.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Now for the last and final 
addition! Open g_main.c (also in /game) and scroll down to the end of the cvar 
table:</FONT></FONT> 
<BLOCKQUOTE><TT>&nbsp;{ &amp;g_inactivity, "g_inactivity", "0", 0, 0, qtrue 
  },</TT> <BR><TT>&nbsp;{ &amp;g_debugMove, "g_debugMove", "0", 0, 0, qfalse 
  },</TT> <BR><TT>&nbsp;{ &amp;g_debugDamage, "g_debugDamage", "0", 0, 0, qfalse 
  },</TT> <BR><TT>&nbsp;{ &amp;g_debugAlloc, "g_debugAlloc", "0", 0, 0, qfalse 
  },</TT> <BR><TT>&nbsp;{ &amp;g_motd, "g_motd", "", 0, 0, qfalse },</TT> 
  <BR><TT>&nbsp;{ &amp;g_blood, "com_blood", "1", 0, 0, qfalse },</TT><TT><FONT 
  color=#00ffff></FONT></TT> 
  <P><TT>&nbsp;{ &amp;g_podiumDist, "g_podiumDist", "80", 0, 0, qfalse },</TT> 
  <BR><TT>&nbsp;{ &amp;g_podiumDrop, "g_podiumDrop", "70", 0, 0, qfalse 
  },</TT><TT></TT> 
  <P><TT>&nbsp;{ &amp;g_allowVote, "g_allowVote", "1", 0, 0, qfalse }<FONT 
  color=#00ffff>, //WarZone -- make sure there is a comma after this 
  line</FONT></TT> <BR><TT><FONT color=#00ffff>&nbsp;{ NULL, 
  "g_supportsWeaponOrder", "1", CVAR_SERVERINFO | CVAR_ROM, 0, qfalse } 
  //WarZone</FONT></TT></P></BLOCKQUOTE><FONT face=Arial,Helvetica><FONT 
color=#ffffff>This additional cvar allows players to see which servers support 
the cg_weaponOrder variable. This is important because the new client code will 
not be compatible with standard Q3A servers. It would be very easy to make a 
filter for GameSpy (et al) to filter out servers that don't have 
g_supportsWeaponOrder set to 1.</FONT></FONT><FONT face=Arial,Helvetica><FONT 
color=#ffffff></FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Save and close g_main.c, we're 
ALL DONE!</FONT></FONT><FONT face=Arial,Helvetica><FONT 
color=#ffffff></FONT></FONT> 
<P>
<HR SIZE=0 width="100%">
<BR><FONT face=Arial,Helvetica><FONT color=#ffffff>End Notes:</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>You'll need to do a recompile 
on the cgame and game code to see the changes in action. Now I'll explain how 
the new cg_weaponOrder variable works. The default value for it is 
"1/2/3/4/5/6/7/8/9" which tells the game the order that you want the weapons to 
switch in. The default order will yield a result similar in concept to the 
Quake2 weapon switching code (if newWeapon &gt; myWeapon then switchWeapons): if 
you're holding a shotgun (3) and pick up a rocket launcher (5), the rocket 
launcher will be selected. If you're holding a rocket launcher (5) and pick up a 
grenade launcher (4) the rocket launcher will remain selected.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>Each weapon has a number 
assigned to it that corresponds to the key press required to activate that 
weapon:</FONT></FONT> <BR><FONT face=Arial,Helvetica><FONT color=#ffffff>1 = 
Gauntlet</FONT></FONT> <BR><FONT face=Arial,Helvetica><FONT color=#ffffff>2 = 
Machine Gun</FONT></FONT> <BR><FONT face=Arial,Helvetica><FONT color=#ffffff>3 = 
Shot Gun</FONT></FONT> <BR><FONT face=Arial,Helvetica><FONT color=#ffffff>4 = 
Grenade Launcher</FONT></FONT> <BR><FONT face=Arial,Helvetica><FONT 
color=#ffffff>5 = Rocket Launcher</FONT></FONT> <BR><FONT 
face=Arial,Helvetica><FONT color=#ffffff>6 = Lightning Gun</FONT></FONT> 
<BR><FONT face=Arial,Helvetica><FONT color=#ffffff>7 = Rail Gun</FONT></FONT> 
<BR><FONT face=Arial,Helvetica><FONT color=#ffffff>8 = Plasma Gun</FONT></FONT> 
<BR><FONT face=Arial,Helvetica><FONT color=#ffffff>9 = BFG 10K</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>My personal preference for the 
weapon order is "1/2/3/4/6/8/5/7/9" which is very similar to Quake2's weapon 
order.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>If your mod is going to need 
more than 9 weapons, you'll need to change the NUM_WEAPS #define we added to 
cg_local.h to the appropriate value. The cg_weaponOrder string needs to be 
formated as follows:</FONT></FONT> 
<UL>
  <LI><FONT face=Arial,Helvetica><FONT color=#ffffff>xx\xx\xx</FONT></FONT> 
  <LI><FONT face=Arial,Helvetica><FONT color=#ffffff>xx/xx/xx</FONT></FONT> 
  <LI><FONT face=Arial,Helvetica><FONT color=#ffffff>x/xx\xx</FONT></FONT> 
  <LI><FONT face=Arial,Helvetica><FONT color=#ffffff>xx\x/xx</FONT></FONT> 
  <LI><FONT face=Arial,Helvetica><FONT color=#ffffff>x/x\x</FONT></FONT> 
  <LI><FONT face=Arial,Helvetica><FONT color=#ffffff>x/x/x</FONT></FONT> 
  <LI><FONT face=Arial,Helvetica><FONT color=#ffffff>x\x\x</FONT></FONT> 
</LI></UL><FONT face=Arial,Helvetica><FONT color=#ffffff>Meaning the string can 
contain up to two consectutive integer digits followed by a seperator which must 
be either a forward slash or a back slash (/ or \). Duplicate or invalid entries 
are ignored and missing entries are inserted at the begining of the list. So the 
string "2/2/3/3/4/5/6/7/8/8/8/9" will yield the same end result as 
"1/2/3/4/5/6/7/8/9" because the missing "1" is inserted at the front of the list 
and the duplicate values are ignored.</FONT></FONT> 
<P><FONT face=Arial,Helvetica><FONT color=#ffffff>If you have any questions or 
comments please email me at <A 
href="mailto:warzone@planetquake.com?subject=Weapon Switching Tutorial">mailto:warzone@planetquake.com?subject=Weapon 
Switching Tutorial</A>.</FONT></FONT> 
<P>
<HR SIZE=0 width="100%">
<BR><FONT face=Arial,Helvetica><FONT color=#ffffff><FONT size=-1>This code is 
Copyright (c) 2000 by Mark "WarZone" Smeltzer. You may freely use this code as 
long a credit for its existance is given to the author.</FONT></FONT></FONT> 
</BODY></HTML>
