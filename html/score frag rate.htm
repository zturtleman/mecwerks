<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0064)http://www.planetquake.com/code3arena/tutorials/tutorial17.shtml -->
<HTML><HEAD><TITLE>Code3Arena</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.2919.6307" name=GENERATOR></HEAD>
<BODY background="score frag rate_files/bg.gif" bgColor=#660000 link=#c05f00 
text=white vLink=#d16545><!-- BEGIN BANNER AD TABLE -->
<TABLE align=center background="score frag rate_files/bg.gif" border=0 
cellPadding=5 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD align=middle bgColor=#000000 height=60 vAlign=top width=468>
      <CENTER><A 
      href="http://adclick.gamespy.com/cgi-bin/adclick.exe/CID=00001dd0346ae9d200000000/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES" 
      target=_top><IMG alt="Click for more information!" border=0 
      src="score frag rate_files/tribes1.gif"></A></CENTER></TD></TR></TBODY></TABLE><!-- END BANNER AD TABLE --><BR><!-- BEGIN LOGO IMAGE TABLE -->
<TABLE align=center bgColor=#000000 border=1 cellPadding=0 cellSpacing=0 
width="100%">
  <TBODY>
  <TR>
    <TD align=middle><IMG alt=Code3Arena border=0 height=137 
      src="score frag rate_files/logo.gif" width=500> </TD></TR></TBODY></TABLE><!-- END LOGO IMAGE TABLE -->
<P><!-- BEGIN TOP HEIRARCHY -->
<TABLE bgColor=#000000 border=0 cellPadding=0 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD><IMG src="score frag rate_files/ouricon.gif"></TD>
    <TD bgColor=#000000 width="100%"><FONT color=#eeeeee face="Verdana, Arial" 
      size=2><B><A href="http://www.planetquake.com/">PlanetQuake</A> | <A 
      href="http://www.planetquake.com/code3arena">Code3Arena</A> | <A 
      href="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> | <A 
      href="http://www.planetquake.com/code3arena/tutorials/tutorial16.shtml">&lt;&lt; 
      Prev</A> | Tutorial 17 | <A 
      href="http://www.planetquake.com/code3arena/tutorials/tutorial18.shtml">Next 
      &gt;&gt;</A> </B></FONT></TD></TR></TBODY></TABLE>
<P><!-- END TOP HEIRARCHY --><!-- BEGIN MAIN TABLE HERE-->
<TABLE align=center bgColor=#4b0202 border=0 cellPadding=0 cellSpacing=0 
width="100%">
  <TBODY>
  <TR><!-- BEGIN LEFT NAVBAR MENU -->
    <TD bgColor=#000000 vAlign=top>
      <TABLE bgColor=#000000 border=0 cellPadding=10 cellSpacing=0 width=150 
      valign="top">
        <TBODY>
        <TR>
          <TD bgColor=#000000 vAlign=top>
            <P><A href="http://www.planetquake.com/code3arena/index.shtml"><IMG 
            alt=menu border=0 height=80 src="score frag rate_files/minilogo.gif" 
            width=150></A> 
            <P><!-- C40B02 --><FONT color=#c05f00 face=arial size=2><STRONG>
            <LI><A 
            href="http://www.planetquake.com/code3arena/news.shtml">News</A> 
            <LI><A 
            href="http://www.planetquake.com/code3arena/staff.shtml">Staff</A> 
            <LI><A 
            href="http://www.planetquake.com/code3arena/contributors.shtml">Contributors</A> 

            <LI><A 
            href="http://www.planetquake.com/code3arena/compilers.shtml">Compiling</A> 

            <LI><A 
            href="http://www.planetquake.com/code3arena/help.shtml">Help!!!</A> 
            <LI><A 
            href="http://www.planetquake.com/code3arena/submission.shtml">Submission</A> 

            <LI><A 
            href="http://www.planetquake.com/code3arena/downloads.shtml">Downloads</A> 
            </STRONG>
            <P><IMG alt=Tutorials border=0 height=25 
            src="score frag rate_files/tutorials.gif" width=80> <FONT 
            color=#c05f00 size=1><STRONG><BR><A 
            href="http://www.planetquake.com/code3arena/tutorials">&lt; Index 
            &gt;</A> <BR>1. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial1.shtml">Mod 
            making 101</A> <BR>2. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial2.shtml">Up 
            'n running</A> <BR>3. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial3.shtml">Hello, 
            QWorld!</A> <BR>4. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial4.shtml">Infinite 
            Haste</A> <BR>5. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial5.shtml">Armor 
            Piercing Rails</A> <BR>6. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial6.shtml">Bouncing 
            Rockets</A> <BR>7. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial7.shtml">Cloaking</A> 
            <BR>8. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial8.shtml">Ladders</A> 
            <BR>9. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial9.shtml">Favourite 
            Server</A> <BR>10. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial10.shtml">Flame 
            Thrower</A> <BR>11. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial11.shtml">Vortex 
            Grenades</A> <BR>12. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial12.shtml">Grapple</A> 
            <BR>13. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial13.shtml">Lightning 
            Discharge</A> <BR>14. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial14.shtml">Locational 
            Damage</A> <BR>15. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial15.shtml">Leg 
            Shots</A> <BR>16. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial16.shtml">Weapon 
            Switching</A> <BR>17. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial17.shtml">Scoreboard 
            frag-rate</A> <BR>18. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial18.shtml">Vortex 
            Grenades II</A> <BR>19. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial19.shtml">Vulnerable 
            Missiles</A> <BR>20. <A 
            href="http://www.planetquake.com/code3arena/tutorials/tutorial20.shtml">Creating 
            Classes</A> 
            <OL></OL></STRONG></FONT>
            <P><BR><IMG alt=Articles border=0 height=25 
            src="score frag rate_files/articles.gif" width=80> <FONT 
            color=#c05f00 size=1><STRONG><BR><A 
            href="http://www.planetquake.com/code3arena/articles">&lt; Index 
            &gt; </A><BR>1. <A 
            href="http://www.planetquake.com/code3arena/articles/article1.shtml">Entities</A> 
            <BR>2. <A 
            href="http://www.planetquake.com/code3arena/articles/article2.shtml">Vectors</A> 
            <BR>3. <A 
            href="http://www.planetquake.com/code3arena/articles/article3.shtml">Good 
            Coding</A> <BR>4. <A 
            href="http://www.planetquake.com/code3arena/articles/article4.shtml">Compilers 
            I</A> <BR>5. <A 
            href="http://www.planetquake.com/code3arena/articles/article5.shtml">Compilers 
            II</A> </STRONG></FONT>
            <P><!-- <hr color="#C0C0C0">  --><BR><IMG alt=Links border=0 
            height=25 src="score frag rate_files/links.gif" width=80> <FONT 
            color=#c05f00><SMALL></P>
            <LI><A href="http://www.planetquake.com/quake3/files.shtml">Quake3 
            Files</A> 
            <LI><A href="http://forums.planetquake.com/">Quake3 Forums</A> 
            <LI><A 
            href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A 
            Editing Message Board</A> 
            <LI><A 
            href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 
            Editing</A> </SMALL></FONT>
            <P><BR><IMG alt=Feedback border=0 height=25 
            src="score frag rate_files/feedback.gif" width=80> <FONT 
            color=#c05f00><SMALL></P>
            <LI><A href="mailto:sumfuka@planetquake.com">SumFuka</A> 
            <LI><A href="mailto:calrathan@captured.com">Calrathan</A> 
            <LI><A href="mailto:quake3@eudoxus.demon.co.uk"><FONT 
            color=#ff0000>H</FONT><FONT color=#ffff00>y</FONT><FONT 
            color=#cc33cc>p</FONT><FONT color=#3333ff>o</FONT>Thermia </A>
            <LI><A href="mailto:solidground@planetquake.com">AssKicka</A> 
            <LI><A href="mailto:warzone@planetquake.com">WarZone</A> 
            </SMALL></FONT>
            <P><BR><IMG src="score frag rate_files/count.gif"> 
            <P><BR><BR><BR><SMALL>Site Design by:</SMALL> <BR><A 
            href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><IMG 
            align=middle alt="ICEmosis Design" border=0 height=31 
            src="score frag rate_files/icelogo_sm.jpg" width=88></A> 
            </FONT><BR><BR></P></LI></TD></TR></TBODY></TABLE></TD><!-- END LEFT NAVBAR MENU --><!-- BEGIN DIVIDER -->
    <TD background="score frag rate_files/bg.gif" vAlign=top>
      <TABLE background="score frag rate_files/bg.gif" border=0 cellPadding=0 
      cellSpacing=0 width=20>
        <TBODY>
        <TR>
          <TD background="score frag rate_files/bg.gif">&nbsp; 
      </TD></TR></TBODY></TABLE></TD><!-- END DIVIDER --><!-- MAIN TEXT AREA -->
    <TD bgColor=#000000 vAlign=top>
      <TABLE bgColor=#000000 border=0 cellPadding=15 cellSpacing=10 width="100%" 
      valign="top">
        <TBODY>
        <TR>
          <TD vAlign=top><FONT color=#eeeeee face="Verdana, Arial" size=2>
            <CENTER><B><FONT color=#c05f00 size=5>TUTORIAL 17 - Scoreboard 
            fragrate </FONT></B><BR>by <B><A 
            href="mailto:quake3@eudoxus.demon.co.uk"><FONT 
            color=#ff0000>H</FONT><FONT color=#ffff00>y</FONT><FONT 
            color=#cc33cc>p</FONT><FONT color=#3333ff>o</FONT><FONT 
            color=#ffffff>Thermia</FONT></A></B></CENTER>
            <P>Fed up of joining a game part the way through and being unable to 
            win it? Want to show that you're up there with the best... or that 
            you could have won that match? 
            <P>Lets take a look at the scoreboard and see how we can get it 
            showing your frags per minute. Along the way we'll find out about 
            timing and a little on how the server keeps all the clients updated. 
            <BR>&nbsp; <FONT color=#e07f44>
            <H4>1. Working out the fragrate</H4></FONT>
            <P>Start by having a look at <B>cg_scoreboard.c</B> in the 
            <B>cgame</B> directory. It contains all the code used to draw the 
            scoreboard (surprise!), and compared to other source files is quite 
            straightforward to understand. After all we have a very clear 
            picture of how a scoreboard works - don't we? 
            <P>The first function that we see is <B>CG_DrawClientScore</B>. This 
            simply draws a line of information that the client knows about the 
            player. Things like the model picture, frags, ping, time connected, 
            and name. It's made a little more complicated because version 1.15 
            introduced a second, smaller, scoreboard for a larger number of 
            players. 
            <P>We have the information we need here to construct a frag rate per 
            minute: the number of frags and the time connected 
            (<B>score-&gt;time</B>). Unfortunately this is in minutes: it 
            doesn't change quickly enough to be useful. Let's track back to 
            where this information is set and see what we can do. 
            <P><B>CG_DrawClientScore</B> is called from 
            <B>CG_TeamScoreboard</B>, and we can see that players are grouped 
            into "teams": TEAM_RED, TEAM_BLUE, TEAM_FREE and TEAM_SPECTATOR. It 
            also appears that the list is already sorted for us, and there's 
            nothing in <B>cg_scoreboard.c</B> doing that for us. The stats are 
            all stored in the array <B>cg.scores[]</B> so we need to find where 
            this is modified. 
            <P>Found it yet? A search shows that it's only modified in 
            <B>cg_servercmds.c</B>, in response to the server sending out a 
            <B>scores</B> command. All commands sent by the server are processed 
            in this file: so all the sorting and ordering must be done in the 
            server. This makes sense: the server carries the master records and 
            arbitrates the game. 
            <P>Moving over to the code in the <B>game</B> directory we see that 
            the scores command is sent out by 
            <B>DeathmatchScoreboardMessage()</B> in <B>g_cmds.c</B>. This file 
            handles commands sent to the server by the client (one of which is a 
            request to update the scores stored by the client). This information 
            is only sent out if there's a scoreboard to update. <FONT 
            color=#ffffcc face="Verdana, Arial" size=3><PRE>Com_sprintf (entry, sizeof(entry),
  " %i %i %i %i %i %i", level.sortedClients[i],
  cl-&gt;ps.persistant[PERS_SCORE], ping, (level.time - cl-&gt;pers.enterTime)/60000,
  scoreFlags, g_entities[level.sortedClients[i]].s.powerups);
</PRE></FONT>
            <P>The scores are sent out as a long string of numbers. We can see 
            that the 4th number in each group of six is the time connected to 
            the server in minutes. The "divide by 60000" occurs because the 
            standard unit of time in Quake3 is the millisecond - the conversion 
            to minutes is made at this point. <BR>&nbsp; <FONT color=#e07f44>
            <H4>2. The changes we need to make</H4></FONT>
            <P>We could adjust <B>DeathmatchScoreboardMessage()</B> to send out 
            a calculated frag rate as well, but there's a more efficient way. 
            Since the number of frags and the time connected are already sent, 
            we'll just adjust these instead. If we change the time connected to 
            seconds we can then get a fragrate that updates with an accuracy 
            every second (at best). 
            <P>We'll store the fragrate in the client as an integer: the actual 
            fragrate per minute multiplied up by 100. I've also imposed an 
            (arbitrary) minimum 10 seconds for caclulating the fragrate. This 
            keeps any "logon and frag" luck to a minimum. 
            <P>The scoreboard will have to be re-sorted by fragrate: done in the 
            client because this is a client preference. This preference will be 
            stored in a system variable. 
            <P>We're almost there. One more issue we need to concern ourselves 
            with: the scoreboard can be updated during the intermission (when 
            someone disconnects for example), so we don't want our time 
            information to keep on changing during this period. 
            <P>After a little digging around we find that there's a variable 
            already set up to help us: <B>level.intermissiontime</B>. It's set 
            to zero when the server is playing a level, and marks the time (in 
            milliseconds) at which the intermission started. It helps the server 
            time the duration of the intermission - and we can make use of it 
            too. 
            <P>Let's get our hands dirty. <BR>&nbsp; <FONT color=#e07f44>
            <H4>3. Coding the changes</H4></FONT>
            <P>First of all we'll make the only server modification that's 
            required (<B>g_cmds.c</B>) so the connect time is sent in seconds 
            (remembering that the unit of time is the millisecond in Quake3). 
            The use of <B>level.intermissiontime</B> prevents our fragrate times 
            from ticking down while we're in the intermission. <FONT 
            color=#ffffcc face="Verdana, Arial" size=3><PRE>/*
==================
DeathmatchScoreboardMessage

==================
*/
void DeathmatchScoreboardMessage( gentity_t *ent ) {
   char      entry[1024];
   char      string[1400];
   int         stringlength;
   int         i, j;
   gclient_t   *cl;
   int         numSorted;
   int         scoreFlags;
<FONT color=#ff6060>   int       playtime;</FONT>

   // send the latest information on all clients
   string[0] = 0;
   stringlength = 0;
   scoreFlags = 0;

   // don't send more than 32 scores (FIXME?)
   numSorted = level.numConnectedClients;
   if ( numSorted &gt; 32 ) {
      numSorted = 32;
   }

   for (i=0 ; i &lt; numSorted ; i++) {
      int      ping;

      cl = &amp;level.clients[level.sortedClients[i]];

      if ( cl-&gt;pers.connected == CON_CONNECTING ) {
         ping = -1;
      } else {
         ping = cl-&gt;ps.ping &lt; 999 ? cl-&gt;ps.ping : 999;
      }

<FONT color=#ff6060>      // HypoThermia: get the correct time (rate shouldn't change
      // during intermission) 
      playtime = level.time;
      if (level.intermissiontime)
         playtime = level.intermissiontime;

      // Hypothermia: send over time in seconds instead of minutes</FONT>
      Com_sprintf (entry, sizeof(entry),
         " %i %i %i %i %i %i", level.sortedClients[i],
         cl-&gt;ps.persistant[PERS_SCORE], ping, <FONT color=#ff6060>(playtime - cl-&gt;pers.enterTime)/1000</FONT>,
         scoreFlags, g_entities[level.sortedClients[i]].s.powerups);
      j = strlen(entry);
      if (stringlength + j &gt; 1024)
         break;
      strcpy (string + stringlength, entry);
      stringlength += j;
   }

   trap_SendServerCommand( ent-g_entities, va("scores %i %i %i%s", i,
      level.teamScores[TEAM_RED], level.teamScores[TEAM_BLUE],
      string ) );
}
</PRE></FONT><BR>&nbsp; 
            <P>From now on it's client side stuff. We need a new variable in the 
            <B>score_t</B> struct to store the fragrate (<B>cg_local.h</B>): 
            <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>typedef struct {
   int            client;
   int            score;
   int            ping;
   int            time;
   int            scoreFlags;
<FONT color=#ff6060>   int             fragrate;</FONT>
} score_t;
</PRE></FONT><BR>&nbsp; 
            <P>Next we're updating <B>cg_servercmds.c</B> so it handles the 
            changed connect time. This is also a good place to calculate the 
            fragrate. Remember that the time is now in seconds and that fragrate 
            stores 100 times the number of frags per minute. 
            <P>This is in <B>CG_ParseScores()</B>: <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>cg.scores[i].time = atoi( CG_Argv( i * 6 + 7 ) );
cg.scores[i].scoreFlags = atoi( CG_Argv( i * 6 + 8 ) );
powerups = atoi( CG_Argv( i * 6 + 9 ) );

<FONT color=#ff6060>// HypoThermia: fragrate based on minimum of 10 seconds
if (cg.scores[i].time &lt; 10)
   cg.scores[i].fragrate = 600 * cg.scores[i].score;
else
   cg.scores[i].fragrate = (6000 * cg.scores[i].score) / cg.scores[i].time;

// HypoThermia: correct time value back to minutes
cg.scores[i].time /= 60;</FONT>

if ( cg.scores[i].client &lt; 0 || cg.scores[i].client &gt;= MAX_CLIENTS ) {
   cg.scores[i].client = 0;
}
</PRE></FONT><BR>&nbsp; 
            <P>With all the information in place we now need to adapt the 
            scoreboard so it'll display the fragrate. First of all, though, 
            we'll add a system variable that stores the type of scoreboard we've 
            chosen to display: Back in <B>cg_local.h</B> we add a reference to a 
            global variable: <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>extern   vmCvar_t      cg_blood;
extern   vmCvar_t      cg_predictItems;
extern   vmCvar_t      cg_deferPlayers;
<FONT color=#ff6060>extern   vmCvar_t      cg_fragRateScoreboard;</FONT>
</PRE></FONT><BR>&nbsp; 
            <P>and the static declaration of this variable into 
            <B>cg_main.c</B>: <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>vmCvar_t   cg_deferPlayers;
vmCvar_t   cg_drawTeamOverlay;
vmCvar_t   cg_teamOverlayUserinfo;
<FONT color=#ff6060>vmCvar_t   cg_fragRateScoreboard;</FONT>
</PRE></FONT>
            <P>and finally link it into the list of client commands (still in 
            <B>cg_main.c</B>). Notice that we don't need to do any more: we 
            automatically get TAB completion in the console, and the variable is 
            saved from session to session by using the flag CVAR_ARCHIVE. <FONT 
            color=#ffffcc face="Verdana, Arial" size=3><PRE>{ &amp;cg_drawTeamOverlay, "cg_drawTeamOverlay", "0", CVAR_ARCHIVE },
{ &amp;cg_teamOverlayUserinfo, "teamoverlay", "0", CVAR_ROM | CVAR_USERINFO },
{ &amp;cg_stats, "cg_stats", "0", 0 },
<FONT color=#ff6060>{ &amp;cg_fragRateScoreboard, "cg_fragRateScoreboard", "0", CVAR_ARCHIVE },</FONT>
</PRE></FONT>
            <P>This variable has a default value of 0. When set to 1 the 
            fragrate will be displayed in the scoreboard. <BR>&nbsp; 
            <P>Finally we get to make the changes to the scoreboard display. We 
            need to convert the fragrate back into a "floating point" display 
            format, and to sort the scoreboard into the correct order. 
            <P>First the display of the scoreboard. Notice that the changes to 
            the "connecting" and "SPECT" formating strings realign the names 
            properly. We also have to make sure we don't overstep the formatting 
            limits, and handle the negative numbers properly. We also have to 
            handle the case where the decimal part is less that ten, otherwise 
            we'd get things like 5.9 instead of 5.09. 
            <P>I don't think anyone is going to reach 99.99 frags per minute so 
            we cap it there, nor are they going to get a suicide rate below 
            about 10 per minute. 
            <P>These changes are in <B>cg_scoreboard.c</B> in 
            <B>CG_DrawClientScore()</B>. <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>// draw the score line
if ( score-&gt;ping == -1 ) {
   Com_sprintf(string, sizeof(string),
      <FONT color=#ff6060>" connecting     %s"</FONT>, ci-&gt;name);
} else if ( ci-&gt;team == TEAM_SPECTATOR ) {
   Com_sprintf(string, sizeof(string),
      <FONT color=#ff6060>" SPECT%4i %4i %s"</FONT>, score-&gt;ping, score-&gt;time, ci-&gt;name);
<FONT color=#ff6060>} else if (cg_fragRateScoreboard.integer) {
   // HypoThermia: display fractional fragrate
   int whole,frac;
   char* fmt;   // format string used

   if (score-&gt;fragrate &lt; 0)
   {
      frac = ( -score-&gt;fragrate) % 100;
      whole = -( -score-&gt;fragrate - frac) / 100;
   }
   else if (score-&gt;fragrate &lt; 9999)
   {
      frac = score-&gt;fragrate % 100;
      whole = score-&gt;fragrate / 100;
   }
   else
   {
      whole = 99;
      frac = 99;
   }

   if (frac &lt; 10)
      fmt = "%2i.0%1i %4i %4i %s";
   else
      fmt = "%2i.%2i %4i %4i %s";

   Com_sprintf(string, sizeof(string),
      fmt, whole, frac, score-&gt;ping, score-&gt;time, ci-&gt;name);
}</FONT>
else {
   Com_sprintf(string, sizeof(string),
      "%5i %4i %4i %s", score-&gt;score, score-&gt;ping, score-&gt;time, ci-&gt;name);
}
</PRE></FONT>and a small modification to the highlight showing your 
            score so it doesn't leave a text overhang on the left: <FONT 
            color=#ffffcc face="Verdana, Arial" size=3><PRE>} else {
   hcolor[0] = 0.7;
   hcolor[1] = 0.7;
   hcolor[2] = 0.7;
}

hcolor[3] = fade * 0.7;
CG_FillRect( <FONT color=#ff6060>SB_SCORELINE_X</FONT>, y,
   640 - SB_SCORELINE_X - BIGCHAR_WIDTH, BIGCHAR_HEIGHT+1, hcolor );
</PRE></FONT>
            <P>Last of all we need to sort the scores. As the results are 
            already sorted by total frags, we need to re-sort it for fragrate. 
            I've only done this for standard deathmatch (TEAM_FREE), it doesn't 
            really make much sense for other game types. The changes go into 
            <B>CG_TeamScoreboard()</B> as this constructs each type of team for 
            the scoreboard. 
            <P>Instead of checking each item on the list and displaying only the 
            correct ones (as the original <B>CG_TeamScoreboard()</B> did), we 
            construct a list of items to be displayed. This list is sorted if 
            needed, and then displayed. The variable <B>count</B> has been 
            removed, it returns the number of lines drawn, and has been 
            superceded by <B>indexcount</B>. 
            <P>Although there is a sort being performed each frame the 
            scoreboard is drawn, it's a quick one (rarely more than 16 items), 
            and only moves pointers around in an array. <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>/*
=================
CG_TeamScoreboard
=================
*/
static int CG_TeamScoreboard( int y, team_t team, float fade, int maxClients, int lineHeight ) {
<FONT color=#ff6060>   int      i, j;
   score_t   *score;
   float   color[4];
   clientInfo_t   *ci;
   score_t * scorelist[MAX_CLIENTS];
   int indexcount;

   color[0] = color[1] = color[2] = 1.0;
   color[3] = fade;

   // HypoThermia: build an indexed array into given team type
   indexcount = 0;
   for ( i = 0; i &lt; cg.numScores &amp;&amp; indexcount &lt; maxClients; i++ )
   {
      score = &amp;cg.scores[i];
      if ( team != cgs.clientinfo[ score-&gt;client ].team )
         continue;

      scorelist[indexcount] = score;
      indexcount++;
   }

   // HypoThermia: sort the score by frag rate for FREE players only
   // use a quick and dirty sort because we're moving pointers around
   if ( team == TEAM_FREE &amp;&amp; cg_fragRateScoreboard.integer)
   {
      for ( i = 0; i &lt; indexcount - 1; i++ )
         for ( j = i + 1; j &lt; indexcount; j++ )
            if (scorelist[j]-&gt;fragrate &gt; scorelist[i]-&gt;fragrate)
            {
               score_t *t;
               t = scorelist[i];
               scorelist[i] = scorelist[j];
               scorelist[j] = t;
            }
   }

   for ( i = 0 ; i &lt; indexcount ; i++ ) {
      CG_DrawClientScore( y + lineHeight * i, scorelist[i], color, fade, lineHeight == SB_NORMAL_HEIGHT );
   }

   return indexcount;</FONT>
}
</PRE></FONT>
            <P>That's it! Compile the changes and try out the new scoreboard. 
            <BR>&nbsp; <FONT color=#e07f44>
            <H4>4. Following on</H4></FONT>
            <P>There are a number of changes that you might want to make. 
            Displaying the fragrate and total number of frags is easily done, 
            but the original scoreboard is too wide to do this. You'll have to 
            drop back to permanently using the scoreboard for large numbers of 
            players because of its smaller font. 
            <P>Of more interest is a game that relies only on fragrate to 
            determine the winner. This requires more server side modifications, 
            and the trick of storing 100 times the actual fragrate in an integer 
            may be useful. 
            <P>Finally you might want a fragrate on your HUD. This is a little 
            more involved as this tutorial uses information that is only sent 
            when the scoreboard is displayed. 
            <P></P></FONT></TD></TR></TBODY></TABLE><!-- END MAIN TABLE --></TD></TR></TBODY></TABLE>
<P><!-- BEGIN BOTTOM HEIRARCHY -->
<TABLE bgColor=#000000 border=0 cellPadding=0 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD><IMG src="score frag rate_files/ouricon.gif"></TD>
    <TD bgColor=#000000 width="100%"><FONT color=#eeeeee face="Verdana, Arial" 
      size=2><B><A href="http://www.planetquake.com/">PlanetQuake</A> | <A 
      href="http://www.planetquake.com/code3arena">Code3Arena</A> | <A 
      href="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> | <A 
      href="http://www.planetquake.com/code3arena/tutorials/tutorial16.shtml">&lt;&lt; 
      Prev</A> | Tutorial 17 | <A 
      href="http://www.planetquake.com/code3arena/tutorials/tutorial18.shtml">Next 
      &gt;&gt;</A> </B></FONT></TD></TR></TBODY></TABLE>
<P><!-- END BOTOTM HEIRARCHY --></P></BODY></HTML>
