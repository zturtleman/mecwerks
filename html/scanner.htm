<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=CAP/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?1469528296"></SCRIPT> 
<html>
<!-- #BeginTemplate "/Templates/model.dwt" --> 
<head>
<title>Document sans-titre</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../main.css">
</head>
<body bgcolor="#FFFFFF" link="#006699" vlink="#006699">
<table width="75%" border="0" cellspacing="0" cellpadding="0">
  <tr align="left" valign="top"> 
    <td height="465"> 
      <table width="100%" border="0">
        <tr bgcolor="#006699"> 
          <td> 
            <div align="left"><font color="#CCCCFF" face="Arial, Helvetica, sans-serif" size="4"><b>Urban 
              Software <font size="2">- UrbanCTF, UrbanDM, Earn A Weapon, CTG...</font></b></font></div>
          </td>
        </tr>
        <tr bgcolor="#CCCCFF" align="left" valign="middle"> 
          <td><!-- #BeginEditable "partie" --><FONT face="Tahoma, Verdana" size=2><B><FONT color=#006666>Player 
            Scanner - covers editing the client HUD and passing selected information 
            from the server to the client</FONT></B></FONT><!-- #EndEditable --></td>
        </tr>
      </table>
      <table width="100%" border="0">
        <tr align="left" valign="top"> 
          <td><!-- #BeginEditable "contenu" --> 
            <DIV align=left class="texte"> 
              <P>&nbsp;</P>
              <TABLE align=center border=0 width="75%" height="253">
                <TBODY> 
                <TR> 
                  <TD align=left colSpan=2 height=249 rowSpan=5 vAlign=top> 
                    <DIV align=left> 
                      <P><FONT color=#000000 face="Tahoma, Verdana" size=2><B>Date 
                        : </B></FONT><FONT face="Tahoma, Verdana" 
                  size=2>04/01/99</FONT><FONT color=#000000 
                  face="Tahoma, Verdana" size=2><B><BR>
                        Author(s) : </B></FONT><FONT face="Tahoma, Verdana" size=2><A 
                  href="mailto:Haggis@stainless.co.uk?subject=Scanner Tutorial">Haggis</A></FONT><FONT 
                  color=#000000 face="Tahoma, Verdana" size=2><B><BR>
                        Skill(s) : </B></FONT><FONT face="Tahoma, Verdana" 
                  size=2>Advanced</FONT><FONT color=#000000 face="Tahoma, Verdana" 
                  size=2><B><BR>
                        Source Project(s) : </B></FONT><FONT 
                  face="Tahoma, Verdana" size=2><I>Game, CGame</I></FONT><FONT 
                  color=#000000 face="Tahoma, Verdana" size=2><B><BR>
                        Revision : </B>1.1</FONT><FONT color=#000000 face="Tahoma, Verdana" size=2><B><BR>
                        Extra Files : </B><A href="Scanner_files/scanner.pk3">scanner.pk3</A></FONT></P>
                      <FONT color=#000000 face="Tahoma, Verdana" 
                  size=2></FONT></DIV>
                  </TD>
                  <TD height=43 width="2%">&nbsp;</TD>
                  <TD align=left rowSpan=5 vAlign=top width="66%" height="249"> 
                    <DIV align=left><IMG height=240 
                  src="Scanner_files/Scanner_shot.jpg" 
                  width=320></DIV>
                  </TD>
                </TR>
                <TR> 
                  <TD height=43 width="2%">&nbsp;</TD>
                </TR>
                <TR> 
                  <TD height=50 width="2%">&nbsp;</TD>
                </TR>
                <TR> 
                  <TD height=80 width="2%">&nbsp;</TD>
                </TR>
                <TR> 
                  <TD width="2%" height="17">&nbsp;</TD>
                </TR>
                </TBODY> 
              </TABLE>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> Well here goes 
                with my first tutorial. With this you should learn how to add 
                new files to the compiling process, add new items to the client 
                HUD and how to get the server to pass specific information to 
                the client. This tutorial will be quite long as it covers many 
                aspects of Q3 coding. The code for the scanner itself is based 
                on an original Q2 tutorial by <A href="mailto:damian.slee@virgin.net">YaYa 
                (-*-)</A>. If you do use this code or part thereof then can you 
                please credit those who have put their spare time and knowledge 
                into these tutorials, namely <A href="mailto:damian.slee@virgin.net">YaYa 
                (-*-)</A>, <A href="mailto:spk@captured.com">Spk</A> and myself 
                (<A href="mailto:Haggis@stainless.co.uk?subject=Scanner Tutorial">Haggis</A>). 
                As this is such a large tutorial, I suggest you read through the 
                it at least once to get an idea of what is going on. There are 
                some notes at the end of the tutorial which may help if you get 
                stuck with something. Now, lets start by adding an extra file. 
                </FONT></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=3><B><span class="bigtext">Adding 
                files to the build process</span><br>
                </B></FONT> <FONT face="Tahoma, Verdana" size=2>We will be adding 
                a new source file, cg_scanner.c, to the cgame module. First create 
                the new source file in the cgame folder and then open cgame.bat 
                in your cgame folder. Towards the end of the file you will see 
                something like this:</FONT></P>
              <P class=texte><br>
                <span class="code">&nbsp;&nbsp;&nbsp;%cc% ../cg_snapshot.c<br>
                &nbsp;&nbsp;&nbsp;@if errorlevel 1 goto quit<br>
                &nbsp;&nbsp;&nbsp;%cc% ../cg_view.c<br>
                &nbsp;&nbsp;&nbsp;@if errorlevel 1 goto quit<br>
                &nbsp;&nbsp;&nbsp;%cc% ../cg_weapons.c<br>
                &nbsp;&nbsp;&nbsp;@if errorlevel 1 goto quit<br>
                <br>
                &nbsp;&nbsp;&nbsp;q3asm -f ../cgame<br>
                &nbsp;&nbsp;&nbsp;:quit<br>
                &nbsp;&nbsp;&nbsp;cd ..</span><br>
              </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2>Now add the the 
                following lines so the file looks like this</FONT><br>
                <br>
                <span class="code">&nbsp;&nbsp;&nbsp;%cc% ../cg_snapshot.c<br>
                &nbsp;&nbsp;&nbsp;@if errorlevel 1 goto quit<br>
                &nbsp;&nbsp;&nbsp;%cc% ../cg_view.c<br>
                &nbsp;&nbsp;&nbsp;@if errorlevel 1 goto quit<br>
                &nbsp;&nbsp;&nbsp;%cc% ../cg_weapons.c<br>
                &nbsp;&nbsp;&nbsp;@if errorlevel 1 goto quit<br>
                <br>
                &nbsp;&nbsp;&nbsp;<span class="newcode">REM **** Haggis : add 
                cg_scanner.c to the compiling ****<br>
                &nbsp;&nbsp;&nbsp;%cc% ../cg_scanner.c<br>
                &nbsp;&nbsp;&nbsp;@if errorlevel 1 goto quit<br>
                &nbsp;&nbsp;&nbsp;REM ******************************************************<br>
                </span><br>
                &nbsp;&nbsp;&nbsp;q3asm -f ../cgame<br>
                &nbsp;&nbsp;&nbsp;:quit<br>
                &nbsp;&nbsp;&nbsp;cd ..</span><br>
              </P>
              <p><FONT face="Tahoma, Verdana" size=2>Now we need to add some information 
                so that q3asm knows how to build cg_scanner into the final qvm 
                file. Open up cgame.q3asm and scroll towards the bottom of the 
                file. It should look something like this:<br>
                </FONT><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;bg_misc<br>
                &nbsp;&nbsp;&nbsp;&nbsp;q_math<br>
                &nbsp;&nbsp;&nbsp;&nbsp;q_shared<br>
                <br>
                </span> 
              <p><font face="Tahoma, Verdana" size=2> Now add <I>cg_scanner</I> 
                to the end of the file so it looks like this<br>
                </font><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;bg_misc<br>
                &nbsp;&nbsp;&nbsp;&nbsp;q_math<br>
                &nbsp;&nbsp;&nbsp;&nbsp;q_shared<br>
                <span class="newcode">&nbsp;&nbsp;&nbsp;&nbsp;cg_scanner</span></span></p>
              <p><FONT face="Tahoma, Verdana" size=3><B><span class="bigtext">Sending 
                specific information to the client</span><br>
                </B></FONT> <FONT face="Tahoma, Verdana" size=2>Many thanks to 
                <A href="mailto:SpK@captured.com">Spk</A> for help with this section. 
                To keep the bandwidth low Q3 will only send "need to know" information 
                to the client. That is, the client should never need to know about 
                the position of an opponent player if they can't see them (you 
                cant shoot what you cant see, unless you've got the trust wall 
                piercing rail gun handy). This is no good for a scanner as the 
                blips on the screen will appear to freeze or dissapear when the 
                opponent is outside the clients PVS. To keep this information 
                up to date we can do one of two things:<br>
                </FONT> </p>
              <P class=texte><FONT face="Tahoma, Verdana" size=2>
                <ul>
                  <li>Set the server to send all the player information every 
                    frame whether they are visible or not.</li>
                  <li>Send only the player positions to the clients less frequently 
                    (say every 250 ms)<br>
                  </li>
                </ul>
                </FONT></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> The first one 
                is easily achieved by adding <FONT face="courier" size = 2 class="code">ent->r.svFlags 
                |= SVF_BROADCAST; </FONT>to the <FONT face="courier" size = 2 class="code">void 
                ClientBegin( int clientNum )</FONT> function in g_client.c. Place 
                it just before the call to <FONT face="courier" size = 2 class="code">ClientSpawn( 
                ent )</FONT>. However, this is not the way we want to go. It is 
                the easiest way to achieve the results but not the most efficient. 
                For this reason we will look at coding the second method.</FONT></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> First we need 
                to create a function to send information to the clients. The function 
                <FONT face="courier" size = 2>trap_SendServerCommand()</FONT> 
                will send a string of characters to the client which we can later 
                decode in cg_servercmds.c. Open up g_cmds.c and add the following 
                code to the end of the file </FONT></P>
              <P align=left class=texte><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                Haggis<br>
                &nbsp;&nbsp;&nbsp;&nbsp;/*<br>
                &nbsp;&nbsp;&nbsp;&nbsp;============================<br>
                &nbsp;&nbsp;&nbsp;&nbsp;G_SendCommandToClient<br>
                &nbsp;&nbsp;&nbsp;&nbsp;Send the given command to the specified 
                (or all) clients<br>
                &nbsp;&nbsp;&nbsp;&nbsp;============================<br>
                &nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;void G_SendCommandToClient (gentity_t 
                *to, char *cmd)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (to == NULL)<br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                send to all clients</span> </span><span class="code"><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trap_SendServerCommand 
                ( -1, cmd );<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                send to specified client</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trap_SendServerCommand 
                ( to-g_entities, cmd);<br>
                &nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                </span> </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> Now we need 
                to make this function available to all the files in the game module 
                so add the to the end of <b>g_local.h</b><br>
                </FONT><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;void G_SendCommandToClient(gentity *to, 
                char *cmd);<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span></span><br>
              </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> This is just 
                a wrapper function to the <FONT face="courier" size = 2 class="code">trap_SendServerCommand()</FONT>. 
                By doing this will make our code easier to read. It will send 
                the command string <FONT face="courier" size = 2>cmd</FONT> to 
                the specified entity or to all entities if the parameter <FONT face="courier" size = 2>to</FONT> 
                is set to <i>NULL</i>.<br>
                <br>
                Still in<b> g_local.h</b> find the <FONT face="courier" size = 2 class="code">level_locals_t</FONT> 
                structure at about line 290 and add this at the end of the structure 
                </FONT></P>
              <P align=left class=texte><span class="code">&nbsp;&nbsp;&nbsp;&nbsp; 
                &nbsp;&nbsp;&nbsp;...<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int bodyQueIndex; 
                <span class="comments">// dead bodies</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gentity_t *bodyQue[BODY_QUEUE_SIZE];<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="newcode"><span class="comments">// 
                Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int lastPlayerLocationTime; 
                // last time client positions were updated<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                Haggis</span></span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;} level_locals_t;</span><br>
              </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> This variable 
                will keep track of when we last sent to the clients any player 
                position information. The time between updates will be set in 
                a define in <b>bg_public.h</b>. Goto line 429 and add the following 
                : <br>
                </FONT><br>
                <span class="comments"><span class="code"><span class="comments">&nbsp;&nbsp;&nbsp;&nbsp;// 
                Time between location updates</span></span></span><span class="code"><br>
                &nbsp;&nbsp;&nbsp;&nbsp;#define TEAM_LOCATION_UPDATE_TIME 1000<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="newcode">#define PLAYER_LOCATION_UPDATE_TIME 
                250</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span></span><br>
              </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> As you can see 
                the time between updates will be 250ms. Open up <b>q_shared.h</b> 
                and add these to the end of the file, just before the <FONT face="courier" size = 2><span class="code">#endif</span><br>
                </FONT></FONT><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;typedef enum {<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AIGT_SINGLE_PLAYER, 
                <span class="comments">// Q3A single player mode</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AIGT_TEAM, <span class="comments">// 
                any team game</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AIGT_OTHER <span class="comments">// 
                anything else!</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;} aiGametype_t;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="newcode">#define kENTRY_EOL 
                0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//marks 
                the end of the list</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;#define kENTRY_INVALID 1 &nbsp;&nbsp;<span class="comments">//marks 
                a valid entry in the list</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;#define kENTRY_VALID 2 &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//marks 
                an invalid entry in the list</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;typedef struct&nbsp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int valid;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vec3_t pos;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;} playerpos_t;</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;#endif // __Q_SHARED_H<br>
                </span> </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> Now we can create 
                the function which will be called to send this information. Open 
                up <b>g_main.c</b> and add this to the end of the file :</FONT></P>
              <P class=texte> <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;playerpos_t g_playerOrigins[MAX_CLIENT]; 
                <span class="comments">//global storage for player positions</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;void CheckPlayerPostions(void)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i, valid_count;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gentity_t *loc, 
                *ent;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char cmd[16*MAX_CLIENT 
                + MAX_CLIENT]; <span class="comments">// make sure our command 
                string is</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                </span></span><span class="comments"><span class="code"><span class="comments">large 
                enough for all the data</span></span></span><span class="code"><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                do we need to update the positions yet?</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (level.time 
                - level.lastPlayerLocationTime > PLAYER_LOCATION_UPDATE_TIME)&nbsp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//store 
                the current time so we know when to update next</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;level.lastPlayerLocationTime 
                = level.time;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//for 
                each possible client</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valid_count 
                = 0;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for 
                (i = 0; i &lt; g_maxclients.integer; i++)&nbsp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//get 
                a pointer to the entity</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ent 
                = g_entities + i;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//see 
                if we have a valid entry</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
                (!ent->inuse)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//mark 
                as an invalid entry</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_playerOrigins[i].valid 
                = kENTRY_INVALID;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!ent->client)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_playerOrigins[i].valid 
                = kENTRY_INVALID;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
                if(ent->health &lt;= 0)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                g_playerOrigins[i].valid = kENTRY_INVALID;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//get 
                and store the client position</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorCopy( 
                ent->client->ps.origin, g_playerOrigins[i].pos);<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//mark 
                as valid entry</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_playerOrigins[i].valid 
                = kENTRY_VALID;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//increase 
                the valid counter</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valid_count++;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//build 
                the command string to send</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com_sprintf(cmd, 
                sizeof(cmd), "playerpos %i ", valid_count);<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=0; i&lt;g_maxclients.integer; 
                i++)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//if 
                weve got a valid entry then add the position to the command string</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(g_playerOrigins[i].valid 
                == kENTRY_VALID)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(cmd, 
                va(" %f,", g_playerOrigins[i].pos[0]));<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(cmd, 
                va("%f,", g_playerOrigins[i].pos[1]));<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(cmd, 
                va("%f", g_playerOrigins[i].pos[2]));<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//finally 
                broadcast the command</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;G_SendClientCommand(NULL, 
                cmd);<br>
                &nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span></span><br>
              </P>
              <P class=texte>&nbsp; </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> Now we need 
                to make this function available to all the other functions that 
                need it. Add this to the end of <b>g_local.h</b> so it now looks 
                like as follows.<br>
                </FONT><br>
                <span class="code">&nbsp;&nbsp;&nbsp;<span class="code">&nbsp;</span></span><span class="code"><span class="comments">// 
                Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;void G_SendCommandToClient(gentity *to, 
                char *cmd);<br>
                &nbsp;&nbsp;&nbsp;&nbsp;void CheckPlayerPostions(void);<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span></span><br>
              </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> Now we have 
                to find somewhere to call the funtion. Open <b>g_main.c</b> again 
                and in the funtion above the one you've just created (<FONT face="courier" size = 2 class="code">void 
                G_RunFrame(int leveltime)</FONT>) add the line as shown </FONT><br>
                <br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;end = trap_Milliseconds();<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;CheckPlayerPostions();<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// see if it is 
                time to do a tournement restart</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;CheckTournement();</span></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> That's a lot 
                of code we've just added so lets just take a minute to go through 
                it. The last thing we did was add the call to <FONT face="courier" size = 2 class="code">CheckPlayerPositions()</FONT> 
                to the <FONT face="courier" size = 2 class="code">G_RunFrame()</FONT> 
                function. This will ensure that our function will get called once 
                every frame.<BR>
                <BR>
                Now lets look at the new code. The defines are used for convenience 
                and readability and they allow us to mark the entries in the list 
                as either being valid or invalid. The <FONT face="courier" size = 2 class="code">cmd</FONT> 
                parameter at the start of the <FONT face="courier" size = 2 class="code">CheckPlayerPositions()</FONT> 
                function is allocated enough room for each client to send up to 
                3 float numbers as strings. Now we test whether its time to fill 
                out the <FONT face="courier" size = 2 class="code">g_playerOrigins</FONT> 
                structure or to return to the calling function. If it's time to 
                fill out the list of player positions then the loop will take 
                each of the clients available and see if it is in use. If it isn't 
                then an invalid entry marker is placed in the <FONT face="courier" size = 2 class="code">g_playerOrigins</FONT> 
                structure and nothing more is done for that entry. If it is a 
                valid entry (i.e. its in use by a client and has some health left) 
                then it is marked as a valid entry in the array and the position 
                is copied over. A total count of the valid entries is also incremented 
                here. </FONT></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> When the list 
                has been populated then we can start building the command string 
                to send to the clients. This is started by creating a string which 
                contains our commans keyword <FONT face="courier" size = 2 class="code">playerpos</FONT> 
                and the number of valid players found. We then go through the 
                <FONT face="courier" size = 2 class="code">g_playerOrigins</FONT> 
                structure to add the valid position entries to the string. Finaly 
                we use the function we created earlier, <FONT face="courier" size = 2 class="code">G_SendCommandToClient()</FONT>, 
                to send the command to all the clients. </FONT></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=3><B><span class="bigtext">Reciving 
                specific information at the client</span><br>
                </B></FONT> <FONT face="Tahoma, Verdana" size=2>Having sent all 
                this information to the client we now need to process the data 
                when its recived. The messages are processed in the <FONT face="courier" size = 2 class="code">void 
                CG_ServerCommand( void )</FONT> function in <b>cg_servercmds.c</b>. 
                We also need somewhere to store this information so open up <b>cg_local.h</b> 
                and add the following just after the <FONT face="courier" size = 2><span class="code">vmCvar_t</span> 
                : </font></font><br>
                <br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;extern vmCvar_t cg_predictItems;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;extern vmCvar_t cg_deferPlayers;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="newcode"><span class="comments">// 
                Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;extern playerpos_t cg_playerOrigins[MAX_CLIENTS];<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span></span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//<br>
                &nbsp;&nbsp;&nbsp;&nbsp;// cg_main.c<br>
                &nbsp;&nbsp;&nbsp;&nbsp;//</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;const char *CG_ConfigString( int index 
                );<br>
                </span></P>
              <FONT face="Tahoma, Verdana" size=2><FONT face="courier" size = 2> 
              <P class=texte><span class="code"><font face="Tahoma, Verdana" size=2 class="texte"> 
                This will allow any function within the cgame qvm to have access 
                to the player positions. Now add the following to the top of <b>cg_servercmd.c</b> 
                </FONT></span></P>
              <P align=left class=texte><span class="code"><br>
                &nbsp;&nbsp;&nbsp;&nbsp;#include "cg_local.h"<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;playerpos_t cg_playerOrigins[MAX_CLIENTS];<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//Haggis</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">/*<br>
                &nbsp;&nbsp;&nbsp;&nbsp;=================<br>
                &nbsp;&nbsp;&nbsp;&nbsp;CG_ParseScores<br>
                &nbsp;&nbsp;&nbsp;&nbsp;...</span></span></P>
              <P class=texte><font face="Tahoma, Verdana" size=2> This is where 
                the actual information about the palyer positions will be stored. 
                Still in <b>cg_servercmds.c</b> find the <FONT face="courier" size = 2 class="code">void 
                CG_ServerCommand( void )</FONT> function and add these variable 
                declarations to the start<br>
                </FONT><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;const char *cmd;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="newcode">int count;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;int i;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;const char *ptr;</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span></span></P>
              <P class=texte><font face="Tahoma, Verdana" size=2> At the end of 
                <FONT face="courier" size = 2 class="code">CG_ServerCommand()</FONT> 
                and add the following lines of code :</FONT></P>
              <P align=left class=code> &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                clientLevelShot is sent before taking a special screenshot for<br>
                &nbsp;&nbsp;&nbsp;&nbsp;// the menu system during development</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;if ( !strcmp( cmd, "clientLevelShot" ) 
                )&nbsp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cg.levelShot = 
                qtrue;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;}<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="newcode">if ( !strcmp( cmd, 
                "playerpos" ) )&nbsp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                -- expand the comma delimited string into the player positions 
                --</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//clear 
                out old list of positions</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset(cg_playerOrigins, 
                kENTRY_EOL, sizeof(cg_playerOrigins));<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//get 
                the number of entries in the list</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = atof(CG_Argv(1));<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=0;i&lt;count;i++)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//set 
                the string pointer to the correct set of parameters</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr 
                = CG_Argv(i+2);<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//read 
                in the first number</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cg_playerOrigins[i].pos[0] 
                = atof(ptr);<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//move 
                the ptr on until we come to a comma</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr 
                = strchr(ptr, ',');<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//skip 
                over the comma</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr++;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//read 
                in the next number</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cg_playerOrigins[i].pos[1] 
                = atof(ptr);<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//move 
                the ptr on until we come to a comma</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr 
                = srtchr(ptr, ',');<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//skip 
                over the comma</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr++;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//read 
                in the final number</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cg_playerOrigins[i].pos[2] 
                = atof(ptr);<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//mark 
                the entry as valid</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cg_playerOrigins[i].valid 
                = kENTRY_VALID;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;CG_Printf( "Unknown client game command: 
                %s\n", cmd );<br>
              </P>
              <P class=texte><font face="Tahoma, Verdana" size=2> What this does 
                is wait until the <FONT face="courier" size = 2 class="code">playerpos</FONT> 
                command is sent to the client and then starts processing the rest 
                of the command string. We clear the array of client positions 
                here with the <FONT face="courier" size = 2 class="code">kENTRY_EOL</FONT> 
                value. This will enusre that all the old data is removed and that 
                if we were to process this array before any data has been entered 
                then we shouldn't come accross any problems. To parse the comamnd 
                we first get the number of valid entries in the command string. 
                Then for each entry we extract the positional information into 
                the <FONT face="courier" size = 2 class="code">cg_playerOrigins</FONT> 
                structure. Finaly we add an entry which specifies the end of the 
                list.<br>
                <br>
                Right, that concludes the passing of information from the server 
                to the client now onto using this information for something useful... 
                </FONT></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=3><B><span class="bigtext">Implementing 
                the scanner</span><br>
                </B></FONT> The scanner will be updated and displayed totaly from 
                the client side of the code (i.e. all from within cgame). We will 
                create it so that the player can see the scanner only when they 
                are holding down a predefined key (by using +/- commands). To 
                start with please ensure you have downloaded the shaders (<A href="Scanner_files/scanner.pk3">scanner.pk3</A>) 
                and placed the file in your mod folder.<br>
                <br>
                First of all, set up a client variable which we can inspect to 
                determine whether or not to display the scanner. Open up <b>cg_local.h</b> 
                and add the following to the end of the <FONT face="courier" size = 2 class="code">cg_t</FONT> 
                structure (around line 514)<br>
                <br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char 
                testModelName[MAX_QPATH];<br>
                &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;qboolean testGun;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="newcode">int 
                scanner;</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">&nbsp;&nbsp;// 
                Haggis</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;} cg_t;</span></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2>Now we will add 
                the commands which will togle the state of the scanner. Open <b>cg_consolecmds.c</b> 
                and at about line 145 edit the commands array to look like the 
                one below :<br>
                </FONT><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;{ "tell_attacker", 
                CG_TellAttacker_f },<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{ "tcmd", CG_TargetCommand_f },<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{ "loaddefered", CG_LoadDeferredPlayers 
                },<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="newcode"><span class="comments">// 
                Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;{ "+scanner", CG_ScannerOn_f },<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{ "-scanner", CG_ScannerOff_f },<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span><br>
                </span>};</span></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> This will add 
                two commands to the client command list. If we bind a key to "+scanner" 
                then <FONT face="courier" size = 2>CG_ScannerOn_f</FONT> will 
                get called on the key press and <FONT face="courier" size = 2>CG_ScannerOff_f</FONT> 
                will get called on the key release. We will need to create the 
                two new functions so open up cg_weapons.c and add the following 
                to the end of the file </FONT></P>
              <p align=left class=texte><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="code"><span class="comments">// 
                Haggis<br>
                &nbsp;&nbsp;&nbsp;&nbsp;/*<br>
                &nbsp;&nbsp;&nbsp;&nbsp;=====================<br>
                &nbsp;&nbsp;&nbsp;&nbsp;CG_ScannerOn_f - turns on the scanner<br>
                &nbsp;&nbsp;&nbsp;&nbsp;=====================<br>
                &nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;void CG_ScannerOn_f( void )<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cg.scanner = 1;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;}<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">/*<br>
                &nbsp;&nbsp;&nbsp;&nbsp;=====================<br>
                &nbsp;&nbsp;&nbsp;&nbsp;CG_ScannerOff_f - turns off the scanner<br>
                &nbsp;&nbsp;&nbsp;&nbsp;=====================<br>
                &nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;void CG_ScannerOff_f( void )<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cg.scanner = 0;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;} <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span></span><br>
              </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> All these functions 
                do is set or clear the scanner variable in the <span class="code">cg</span> 
                structure whenever the user presses or releases the scanner key. 
                Don't forget to add the following to the end of <b>cg_local.h</b> 
                so that <b>cg_consolecmds.c</b> can find the new functions. While 
                were here we can also prototype the scanner drawing routine.<br>
                </FONT><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;void CG_ScannerOn_f( void );<br>
                &nbsp;&nbsp;&nbsp;&nbsp;void CG_ScannerOff_f( void );<br>
                &nbsp;&nbsp;&nbsp;&nbsp;void CG_DrawScanner( void );<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis</span></span></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> Almost there 
                now. As the scanner uses some graphics, and we don't want to load 
                them when we want to use them during the game. We have to pre-cache 
                them when all the other things for the level are being pre-cached. 
                This is a lot easier to do than it sounds. Just open <b>cg_local.h</b> 
                and add this to the end of the <FONT face="courier" size = 2 class="code">cgMedia_t</FONT> 
                structure at about line 705.<br>
                </FONT></P>
              <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sfxHandle_t countPrepareSound;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="newcode"><span class="comments">// 
                Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qhandle_t scannerShader;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qhandle_t scannerBlipShader;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qhandle_t scannerBlipUpShader;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qhandle_t scannerBlipDownShader;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                Haggis</span></span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;} cgMedia_t;</P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> And now we need 
                to add the code that actualy caches these shaders. Open up <b>cg_main.c</b> 
                and in the <FONT face="courier" size = 2 class="code">CG_RegisterGraphics</FONT> 
                function at about line 677 add the following</FONT> :<br>
                <br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;cgs.media.bloodMarkShader 
                = trap_R_RegisterShader( "bloodMark" );<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// Haggis<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="newcode">cgs.media.scannerShader 
                = trap_R_RegisterShader("Scanner");<br>
                &nbsp;&nbsp;&nbsp;&nbsp;cgs.media.scannerBlipShader = trap_R_RegisterShader("ScannerBlip");<br>
                &nbsp;&nbsp;&nbsp;&nbsp;cgs.media.scannerBlipUpShader = trap_R_RegisterShader("ScannerBlipUp");<br>
                &nbsp;&nbsp;&nbsp;&nbsp;cgs.media.scannerBlipDownShader = trap_R_RegisterShader("ScannerBlipDown");</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;// Haggis</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;// register the inline models<br>
                &nbsp;&nbsp;&nbsp;&nbsp;cgs.numInlineModels = trap_CM_NumInlineModels();</span><br>
              </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> That's all the 
                preperation done. At last we get to doing some code in <b>cg_scanner.c</b>. 
                Add the following code :<br>
                </FONT><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;#include "cg_local.h"<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;#define kSCANNER_UNIT 24<br>
                &nbsp;&nbsp;&nbsp;&nbsp;#define kSCANNER_RANGE 100<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">/*<br>
                &nbsp;&nbsp;&nbsp;&nbsp;=================<br>
                &nbsp;&nbsp;&nbsp;&nbsp;CG_DrawScanner<br>
                &nbsp;&nbsp;&nbsp;&nbsp;=================<br>
                &nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;void CG_DrawScanner( void )&nbsp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x,y;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w,h;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int sx,sy;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vec3_t v, norm, 
                dp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float len;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float height;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;playerpos_t *player;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;centity_t *scanner;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//dont 
                draw anything if the scanner is off</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cg.scanner 
                == 0)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = 30; <span class="comments">//offset 
                from left of screen</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = 30; <span class="comments">//offset 
                from top of scren</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w = 160; <span class="comments">//width 
                of scanner on screen</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h = w; <span class="comments">//height 
                of scanner on screen</span><br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//draw 
                the scanner</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CG_DrawPic( x, 
                y, w, h, cgs.media.scannerShader);<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//get 
                info about the scanner positon</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanner = &amp;cg_entities[cg.snap->ps.clientNum];<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//check 
                the stored player positions</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player = cg_playerOrigins;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(player->valid 
                != kENTRY_EOL)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//get 
                a vector from the scanner position to the current player</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorSubtract 
                (scanner->lerpOrigin, player->pos, v);<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//store 
                the height component</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height 
                = v[2];<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//remove 
                the height component from the vector</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[2] 
                = 0;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//calc 
                the distance to the player and scale it to the scanner scale</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len 
                = VectorLength( v ) / kSCANNER_UNIT;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//is 
                the player within range?</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(len 
                &lt; kSCANNER_RANGE)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//create 
                a vector pointing stright down</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm[0] 
                = 0;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm[1] 
                = 0;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm[2] 
                = -1;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//normalise 
                the vector to the player</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorNormalize( 
                v );<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//rotate 
                the player about the scanners view angle</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RotatePointAroundVector( 
                dp, norm, v, scanner->lerpAngles[1]);<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//scale 
                to fit current size of scanner</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorScale(dp,len*(w/2)/kSCANNER_RANGE,dp);<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                calc screen (x,y) (-4 = half dot width, so we can centre the graphic)</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sx 
                = (x + (w/2) + dp[1]) - 4;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sy 
                = (y + (h/2) + dp[0]) - 4;<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//draw 
                the dot</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(height 
                &lt; -32) <span class="comments">//player is above scanner</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CG_DrawPic( 
                sx, sy, 8, 8, cgs.media.scannerBlipUpShader);<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if 
                (height > 32) <span class="comments">//player is below scanner</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CG_DrawPic( 
                sx, sy, 8, 8, cgs.media.scannerBlipDownShader);<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CG_DrawPic( 
                sx, sy, 8, 8, cgs.media.scannerBlipShader);<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">//move 
                on to next entry in the array<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>player++;<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                &nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
              </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> Not forgetting 
                to add a call to display the scanner in <b>cg_draw.c</b>, function 
                <FONT face="courier" size = 2 class="code">CG_Draw2D()</FONT> 
                around line 1975<br>
                </FONT><br>
                <span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CG_DrawHoldableItem();<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CG_DrawReward();<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">// 
                Haggis<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="newcode">CG_DrawScanner();</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Haggis</span><br>
                &nbsp;&nbsp;&nbsp;&nbsp;}</span></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2>That's another 
                large chunk of code added so lets just go over it quickly. First 
                there is a set of defines we use to set up the scanner. We will 
                use the base unit of 24 quake units for each unit we display in 
                the scanner. The scanner has a range of 100 units which will equate 
                to 2400 quake units as the total range of the scanner. Adjust 
                this as you see fit. Once in the <FONT face="courier" size = 2 class="code">CG_DrawScanner</FONT> 
                code, the first thing to do is display the main graphic on screen. 
                The variables <span class="code">x,y,w</span> and <span class="code">h</span> 
                determine the size and position of the scanner which can be changed 
                to whatever you like. The player position structure is then processed 
                to find those players that are in range. If a player is within 
                range we calculate the position to draw them at. Finally a graphic 
                is chosen which will display whether the player is on the same 
                level, above or below the scanner position. </FONT></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> Phew! Thats 
                it. Now you can do the final compile to create your new <i>game.qvm</i> 
                and<i> cgqme.qvm</i> files. Place them in your mod folder along 
                with the <A href="Scanner_files/scanner.pk3">scanner.pk3</A> file 
                (you did download the pk3 didnt you?) and run Quake 3. Bind a 
                key to <span class="titre1">+scanner</span> and start a multiplayer 
                server. If all has gone well then you should see the scanner in 
                the top left of the screen with all the clients currently in the 
                game as pulsing blips. </FONT></P>
              <P class=texte><FONT face="Tahoma, Verdana" size=3><B><span class="bigtext">Room 
                for improvement</span><br>
                </B></FONT>There's plenty you can do to improve the scanner code. 
                Here's some suggestions:<br>
                <br>
                1) Remove the clients own position from the display. (Hint: nothing 
                needs to be done on the client side for this, just send the right 
                information)<br>
                2) Get the server to send player position information only if 
                a client has the scanner displayed.<br>
                3) Colour code the scanner blips for different situations (team 
                colours, etc...)<br>
                <br>
              </P>
              <P class=texte><FONT face="Tahoma, Verdana" size=3><B><span class="bigtext">Notes</span><br>
                </B></FONT> As I said to start with, this is a large tutorial 
                and you should really read through it to begin with and not just 
                copy and paste all the code blindly. This will help you understand 
                what is going on and will also help you identify any bugs which 
                may have cropped up through writing the tutorial or implementing 
                the code. I suggest you implement the scanner in the sections 
                described (adding new files, sending specific information, reciving 
                information then scanner implementation) and attempt to compile 
                at the end of each section. If you can't seem to get things to 
                work then start by checking and rechecking the code and then use 
                a liberal sprinkling of <span class="code">CG_printf()</span>'s 
                throughout your code to see if any values that you were expecting 
                don't get processed correctly. For example when implementing the 
                "+scanner" command you might want to add a couple of <span class="code">CG_printf()</span>'s 
                to display different message when the "+scanner" and the "-scanner" 
                commands are interpreted.</P>
              <P class=texte><FONT face="Tahoma, Verdana" size=2> If you do have 
                a problem, a comment or a question then mail me (<A href="mailto:Haggis@stainless.co.uk?subject=Scanner Tutorial">Haggis</A>) 
                but please ensure that the subject line contains the phrase "Scanner 
                Tutorial". If you do use this code in your mods then please give 
                credit where its due (that means <A href="mailto:Haggis@stainless.co.uk?subject=Scanner Tutorial">me</A>, 
                <A href="mailto:SpK@captured.com">Spk</A> and <A href="mailto:damian.slee@virgin.net">YaYa 
                (-*-)</A>). </FONT></P>
              <HR>
              <DIV align=center> 
                <P><FONT face="Tahoma, Verdana" size=3><FONT size=2>Tutorial by 
                  <A 
            href="mailto:Haggis@stainless.co.uk?subject=Scanner Tutorial">Haggis</A></FONT></FONT></P>
              </DIV>
              <P class=texte> 
              <BLOCKQUOTE> 
                <P>&nbsp;</P>
                <P> </P>
              </BLOCKQUOTE>
              <P></P>
              <P class=texte>&nbsp;</P>
              <P class=texte>&nbsp;</P>
              <P class=texte>&nbsp;</P>
              <P>&nbsp;</P>
              <P>&nbsp;</P>
              </font></font></DIV>
            <!-- #EndEditable --></td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</body>
<!-- #EndTemplate -->
</html>
