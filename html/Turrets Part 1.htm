<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?304539015"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.quakefiles.com/skunkworks/q3/turret1.html -->
<HTML><HEAD><TITLE>Turrets: Part 1</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type><LINK 
href="Turrets Part 1_files/skunk.css" rel=STYLESHEET type=text/css>
<META content="MSHTML 5.00.2614.3500" name=GENERATOR></HEAD>
<BODY text=white bgcolor="#000000">
<SCRIPT language=JavaScript>
<!--
var begin = new Date()
var startYear = new Date("January 1, 1970")
startYear.setYear(begin.getYear())
var random = (begin.getTime() - startYear.getTime())
document.write('<a href="http://ad.doubleclick.net/jump/quakefiles.com/skunkworks;sz=468x60;tile=1;ord=' + random + '">');
document.write('<img src="http://ad.doubleclick.net/ad/quakefiles.com/skunkworks;sz=468x60;tile=1;ord=' + random + '" height=60 width=468>' + '</a>');
document.write(' <A HREF="http://www.gamekey.com"><img src="http://www.gamekey.com/common/swatch.jpg"></a>');
document.write('</iframe>');
// -->
</SCRIPT>
<NOSCRIPT><A 
href="http://ad.doubleclick.net/jump/quakefiles.com/skunkworks;abr=!ie4;abr=!ie5;sz=468x60;tile=1"><IMG 
border=0 height=60 
src="Turrets Part 1_files/skunkworks;abr=!ie4;abr=!ie5;sz=468x60;tile=1.gif" 
width=468></A> <A href="http://www.gamekey.com/"><IMG 
src="Turrets Part 1_files/swatch.jpg"></A> </NOSCRIPT>
<CENTER>
<H1>Turrets: Part1</H1></CENTER>
<HR width="50%">

<P>Welcome to the first part of my tutorials on how to add auto defence turrets 
to quake 3</P>
<P>This series of tutorials will show you how to add user placeable turrets to 
quake 3. All the code will be added to <FONT class=file>g_cmds.c (game)</FONT> 
for now. I may get round to showing you how to add it in a new file in a later 
tutorial.</P>
<P>Some of the credit has to go to <A href="http://www.inolen.com/">Inolen</A> 
for coproduction the code base</P>
<HR width="10%">

<P>open up <FONT class=file>g_local.h (game)</FONT> Here we will add a new 
variable to store the turrets spawn location, and the direction it is to fire 
in</P>
<P>Find the code below in the file</P><PRE class=code>	gitem_t		*item;			// for bonus items

	qboolean	botDelayBegin;

};
</PRE>
<P>add the variable <FONT class=code>vec3_t turloc;</FONT> to make the code look 
like</P><PRE class=code>	gitem_t		*item;			// for bonus items

	qboolean	botDelayBegin;

// Fuzzysteve turret location
	vec3_t		turloc;
};
</PRE>
<P>Thats us done here</P>
<HR width="50%">

<P>Now open up <FONT class=file>g_cmds.c (game)</FONT> and scroll down to the 
bottom</P>
<P>Find the code below</P><PRE class=code>	else if (Q_stricmp (cmd, "gc") == 0)
		Cmd_GameCommand_f( ent );
	else if (Q_stricmp (cmd, "setviewpos") == 0)
		Cmd_SetViewpos_f( ent );
	else
		trap_SendServerCommand( clientNum, va("print \"unknown cmd %s\n\"", cmd ) );
}
</PRE>
<P>and modify it to match the code below</P><PRE class=code>	else if (Q_stricmp (cmd, "setturretlocation") == 0)
		Cmd_SetTurLoc_f( ent );
	else if (Q_stricmp (cmd, "spawnturret") == 0)
		Cmd_SpawnTurret_f( ent );
	else if (Q_stricmp (cmd, "setviewpos") == 0)
		Cmd_SetViewpos_f( ent );
	else
		trap_SendServerCommand( clientNum, va("print \"unknown cmd %s\n\"", cmd ) );
}
</PRE>
<P>Here we have modified the code so that if you enter <FONT 
class=command>\setturretlocation</FONT> or <FONT 
class=command>\spawnturret</FONT> a function will be called. the functions to be 
called don't exist yet. they are added in the next section</P>
<HR width="10%">

<P>Now , at the top of <FONT class=file>g_cmds.c (game)</FONT> paste the code 
below in, just after <FONT class=code>#include "g_local.h"</FONT>. I'll explain 
what things do after the code block</P><PRE class=code>
/*
=======================
Turret code. for spawning and seting the spawn location of turrets
=======================
*/

void turret_findenemy( gentity_t *ent){
	gentity_t *target;
	vec3_t	eorg,org;
	int		j,rad;

/*
This function goes throught the entity list and check the distance to every entity untill it finds one that fits these rules:

it's not the turret itself.
it's not the creator of the turret (ent-&gt;parent)
it's still alive;
it's within a certain distance of the turret (set by rad. rad is current;y set to 500 q3 units. if you change it here, you have to change it in turretthink)
it has to be a client (player or bot)

if it fits these rules, the entity found is set as the turrets enemy.
if no entity is found, enemy is set to NULL;

This function will be refined in a later tutorial
*/


	rad=500;
	VectorCopy(ent-&gt;r.currentOrigin,org);

	target = g_entities;

	for (; target &lt; &amp;g_entities[level.num_entities]; target++)
	{
		if (target==ent)
			continue;
		if (target==ent-&gt;parent)
			continue;
		if (target-&gt;health&lt;0)
			continue;
		if (!target-&gt;inuse)
			continue;
		for (j=0; j&lt;3; j++)
			eorg[j] = org[j] - (target-&gt;r.currentOrigin[j] + (target-&gt;r.mins[j] + target-&gt;r.maxs[j])*0.5);
		if (VectorLength(eorg) &gt; rad)
			continue;
		if(!target-&gt;client)
			continue;
		ent-&gt;enemy=target;
		return;
	}

	ent-&gt;enemy=NULL;
}



void turret_trackenemy( gentity_t *ent){
/*
Simple one this
it merely works out the angle to the enemy, then sets ent-&gt;turloc (in this case being used to store the angle (as a normalised difference vector)) to the enemy, and the turrets angles (ent-&gt;s.apos.trbase) to face the enemy
it then relinks the turret to finalise the changes
This is probably the final version.
*/

vec3_t dir;


VectorSubtract(ent-&gt;enemy-&gt;r.currentOrigin,ent-&gt;r.currentOrigin,dir);
VectorNormalize(dir);
VectorCopy(dir,ent-&gt;turloc);
vectoangles(dir,dir);
VectorCopy( dir,ent-&gt;s.apos.trBase );
trap_LinkEntity (ent);

}

void turret_fireonenemy( gentity_t *ent){
/*
Fires the plasma at the enemy. Doesn't check to see if it will hit, and doesn't lead the enemy at all.

The event is being added so you can see what is happening (the models and such are handled by cgame. the event just tells it to display them

ent-&gt;count is there to stop the gun firing as fast as the turret thinks. decrease the 200 to make it fire faster.

this function will be refined in a later tutorial
*/

fire_plasma( ent-&gt;parent, ent-&gt;r.currentOrigin, ent-&gt;turloc );
G_AddEvent( ent, EV_FIRE_WEAPON, 0 );
ent-&gt;count=level.time+200;
}


void turret_think( gentity_t *ent){
/*

/*
This function is called very regularly.
if the turret has no enemy, it tries to find one.
if the enemy is dead it tries to find a new one
if the enemy has moved out of range it tries to find a new one (the 500 is the number of quake units the enemy should be within)

The turret is then told to track onto the enemy
If a certain amount of time has passed since it last fired, it fires again

Very possible the final version
*/

vec3_t distance;



ent-&gt;nextthink=level.time+10;


if (!ent-&gt;enemy)
	turret_findenemy(ent);
if (!ent-&gt;enemy)
	return;
if (ent-&gt;enemy-&gt;health&lt;0)
	turret_findenemy(ent);
if (!ent-&gt;enemy)
	return;
VectorSubtract(ent-&gt;r.currentOrigin,ent-&gt;enemy-&gt;r.currentOrigin,distance);
if (VectorLength(distance)&gt;500)
	turret_findenemy(ent);

if(!ent-&gt;enemy)
	return;

turret_trackenemy(ent);
if (ent-&gt;count&lt;level.time)
turret_fireonenemy(ent);

}



void Cmd_SpawnTurret_f( gentity_t *ent ){
/*
This function spawns the turret at the location set.
I'll comment the individual lines
*/

	gentity_t *turret; 	// The object to hold the turrets details.

	turret=G_Spawn();
	turret-&gt;parent=ent;
	turret-&gt;eventTime=200; // makes the firing sequence go away after 200 milliseconds.
	turret-&gt;s.weapon=WP_PLASMAGUN; // which weapon will be fired (graphics only)
	turret-&gt;classname="turret";	// not really needed yet. it may be later.
	turret-&gt;s.modelindex = G_ModelIndex("models/weapons2/machinegun/machinegun.md3");
	turret-&gt;model = "models/weapons2/machinegun/machinegun.md3";
	turret-&gt;s.modelindex2 = G_ModelIndex("models/weapons2/machinegun/machinegun.md3");
// the three lines above set the model to be displayed. currently its just the machinegun.
	VectorSet( turret-&gt;r.mins, -15, -15, -15 );
	VectorSet( turret-&gt;r.maxs, 30, 30, 30);
// these two lines set the size of the turret. doesn't do anything as the turret is not solid, but this will change
	turret-&gt;think=turret_think; // what the turret does
	turret-&gt;nextthink=level.time+100; // when the turret will activate
	G_SetOrigin( turret, ent-&gt;turloc ); // sets where the turret is
	trap_LinkEntity (turret); // adds the finalized turret.

}


void Cmd_SetTurLoc_f( gentity_t *ent ){
/*
This just sets the variable holding the turrets location and prints it out on screen (for debugging. you can drop the trap servercommand line if you want)
*/

VectorCopy(ent-&gt;r.currentOrigin,ent-&gt;turloc);
trap_SendServerCommand( ent-g_entities, va("print \"Location Set. %f %f %f \n\"",ent-&gt;r.currentOrigin[0],ent-&gt;r.currentOrigin[1],ent-&gt;r.currentOrigin[2]));

}
</PRE>
<P>This code will allow a turret to be spawned which will fire plasma at anyone 
but the owner. Comments have been added for any bits of code which aren't 
obvious.</P>
<HR width="50%">

<P>This code should allow you to add very basic (and not particularly nice 
looking) turrets to the game. They will be refined in the other tutorials</P>
<HR width="50%">
<A href="http://www.quakefiles.com/skunkworks/q3/turret2.html">To the next 
tutorial in this series</A><BR><A 
href="http://www.quakefiles.com/skunkworks/q3/tutorial.html">Back to the 
tutorials</A><BR>
<ADDRESS><A href="mailto:problems@deathsdoor.com">Mail 
me</A></ADDRESS><BR><BR><BR></BODY></HTML>
