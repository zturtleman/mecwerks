<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257919375"></SCRIPT><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257919375"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257919375"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257919375"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial32.shtml"><< Prev</a> |
	Tutorial 33 |
	<a href="tutorial34.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>
  
   <!-- BEGIN LEFT NAVBAR MENU --> 
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;		
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->
	
	
	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top> 
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
TUTORIAL 33 - Popup Menus II
</font></b><br>by <b><a href="mailto:hypothermia@planetquake.com"><font color="#FF0000">H</font><font color="#FFFF00">y</font><font color="#CC33CC">p</font><font color="#3333FF">o</font><font color="#FFFFFF">Thermia</font></A></b></center><p>

<p>In this part we're going to take full advantage of the menu framework we've added in part I, 
and implement a fully featured bot command menu for use in Team DM and CTF games. There are a number
of useful functions here that show how to access parameters stored on or by the server.

<p>For the second part of this tutorial, you must have implemented all of the code 
in <a href="tutorial32.shtml">the first part</a>. You should pay particular attention to the parts of 
the code that have been commented as being required for this second part to work.

<p>The bot commands implemented here can all be found in the <b>BotCommands.htm</b> file 
in the <b>Docs/Help</b> directory under your Q3 install.

<p>This is a fairly large tutorial to digest, with a few subtleties in the coding.
The key points can be summarized:

<ul>
<p><li>Helper function for adding bots/players
<p><li>Helper function for getting items on the map
<p><li>Using submenus
<p><li>Implementing commands
<p><li>Commands based on earlier menu selections 
<p><li>Use of run-time sanity checking
</ul>

<p>&nbsp;

<font color="#E07F44"><H4>
1. About the menu structure
</H4></font>

<p>You'll get the greatest benefit from this tutorial if you know what to expect 
from this code. There's a lot of interaction between code, often by the use of pointers
to functions, and if you're not careful you might lose sight of the objectives and things 
that can be learnt.

<p>You can see the menu code in action by looking at my user interface mod, 
<a href="http://www.planetquake.com/uie/">UI Enhanced</a> (ok, ok, that was 
the last shameless plug!) Many of the final commands depend on the previous menu choices,
and this complicates things further.

<p>We'll start by looking at the help functions used to create some of the more complicated
menus. Then we'll build up the menu in groups of related commands.

<p>There's nothing special about how the commands are executed. They simply create the
required message text in the private team chat channel. The bots understand and respond
to them. Unfortunately the CTF bots are much less responsive, this is because they have 
a conflicting and over-riding urge to go get the flag!

<p>We're continuing making code modifications to <b>ui_ingame.c</b>. By default static data
and constants should be placed near the beginning so that all following functions can see
and use them without a forward declaration. You can also order all of these functions so that
no function declaration is needed, i.e. the function is defined before first use.

<p>&nbsp;

<font color="#E07F44"><H4>
2. Building a list of bots and/or players
</H4></font>

<p>One function covers all in this case. We're going to 
iterate over all the players on the server, and see if they pass one or more criterion
for acceptance or rejection.

<p>These are the flags that govern how bots and players are added to the list. Most are
self explanatory and can be used in limited combination. Use either <b>PT_FRIENDLY</b> 
or <b>PT_ENEMY</b> as needed. Use either <b>PT_BOTONLY</b> or <b>PT_PLAYERONLY</b>.

<p>The last two flags, <b>PT_EXCLUDEPARENT</b> and <b>PT_EXCLUDEGRANDPARENT</b>, 
need special explanation. Some menu commands only make sense when they exclude the
bot or player who will receive the command. &quot;Anarki follow Anarki&quot; is a good
example... its nonsense! Provided the sanity checks are passed, we can access these earlier
menus, compare and exclude their contents.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
#define PT_FRIENDLY 		1
#define PT_ENEMY 		2

#define PT_BOTONLY		4
#define PT_PLAYERONLY		8

#define PT_EXCLUDEPARENT	16
#define PT_EXCLUDEGRANDPARENT	32
</pre></font>

<p>&nbsp;


<p>To check the list of players we first grab all the details in the 
<b>CS_SERVERINFO</b> string. The player's team is identified for future
comparison.

<p>Bots can be identified by their use of a &quot;skill&quot; setting, while
the cleaned name string (colour codes are removed) is compared and rejected if required.
Note that we are in the middle of creating a menu, and the depth has count has already 
been increased. We need to take that into account when examining earlier menus.

<p>Provided the player name has passed, its added into the menu with the provided
sub-menu creation or event handling functions.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DynamicMenu_AddListOfPlayers
=================
*/
static void DynamicMenu_AddListOfPlayers( int type, 
	createHandler crh, eventHandler evh )
{
	uiClientState_t	cs;
	int		numPlayers;
	int		isBot;
	int		n;
	char	info[MAX_INFO_STRING];
	char 	name[64];
	int 	playerTeam, team;
	int 	depth;

	trap_GetConfigString( CS_SERVERINFO, info, sizeof(info) );
	numPlayers = atoi( Info_ValueForKey( info, "sv_maxclients" ) );

	trap_GetClientState( &cs );
	trap_GetConfigString( CS_PLAYERS 
		+ cs.clientNum, info, MAX_INFO_STRING );
	playerTeam = atoi(Info_ValueForKey(info, "t"));

	depth = s_dynamic.depth - 1;
	for( n = 0; n < numPlayers; n++ ) {
		trap_GetConfigString( CS_PLAYERS + n, 
			info, MAX_INFO_STRING );

		if (n == cs.clientNum)
			continue;

		isBot = atoi( Info_ValueForKey( info, "skill" ) );
		if( (type & PT_BOTONLY) && !isBot ) {
			continue;
		}

		if( (type & PT_PLAYERONLY) && isBot ) {
			continue;
		}

		team = atoi(Info_ValueForKey(info, "t"));
		if ((type & PT_FRIENDLY) && team != playerTeam)
			continue;

		if ((type & PT_ENEMY) && team == playerTeam)
			continue;

		Q_strncpyz(name, Info_ValueForKey(info, "n"), 64);
		Q_CleanStr(name);

		if (!name[0])
			continue;

		if (type & PT_EXCLUDEPARENT && depth >= 1)
		{
			// depth has been increased by init of (sub)menu
			if (!Q_stricmp(name, s_dynamic.data[
					s_dynamic.active[depth - 1]].text))
				continue;
		}

		if (type & PT_EXCLUDEGRANDPARENT && depth >= 2)
		{
			// depth has been increased by init of (sub)menu
			if (!Q_stricmp(name, s_dynamic.data[
					s_dynamic.active[depth - 2]].text))
				continue;
		}

		DynamicMenu_AddItem(name, 0, crh, evh);
	}
}
</pre></font>


<p>&nbsp;

<font color="#E07F44"><H4>
3. Building a list of items on the map
</H4></font>

<p>As quite a few of the bot commands are centered around items on the map, we need
a way to add a list of them to the menu. For greatest efficiency, we'd like to add those
that only appear on the map itself.

<p>Fortunately we can do this through the use of a system wide string set by the server. 
This string is also used to pre-load items when changing levels, so those of you who've looked
through the client code might recognize some of this.

<p>Some assumptions have been made about items. This is required because the only 
way to distinguish between the different health and armour items is by the 
amount of benefit they can give. If you've changed these values in <b>bg_misc.c</b> then
you'll have to update the values used here so they match.

<p>First we'll set up all of the data we'll be using, put this near the beginning of the changes
you've already made from the first part of the tutorial.

<p>Each item has a name used in the menu (<b>longname</b>), the name used to command the bots
(<b>shortname</b>), the item type identified in <b>bg_misc.h</b>, and a value that 
uniquely identifies it. The boolean <b>loaded</b> is <b>qtrue</b> if the item is on the map.

<p>The last parameter was originally intended to represent the CTF specific flags, but
I never used it in the end. You can put a gametype value here, and the object will only 
appear on the menu if that game type is running as well.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
typedef struct {
	const char* longname;
	const char* shortname;
	itemType_t type;
	int tag;
	qboolean loaded;

	int game;
} itemList_t;


// if you've changed the armour or mega strength values in
// bg_misc.c, then it won't be identified here
//
// The machine gun is excluded from the list because it
// is the default weapon, maps usually don't have it as
// available for pickup.
static itemList_t dm_itemList[] = {
	{ "Red Armour", "ra", IT_ARMOR, 100, qfalse, 0 },
	{ "Yel Armour", "ya", IT_ARMOR, 50, qfalse, 0 },
	{ "Mega", "mh", IT_HEALTH, 100, qfalse, 0},
//	{ "Machine G", "mg", IT_WEAPON, WP_MACHINEGUN, qfalse, 0 },
	{ "Shotgun", "sg", IT_WEAPON, WP_SHOTGUN, qfalse, 0 },
	{ "Grenade L", "gl", IT_WEAPON, WP_GRENADE_LAUNCHER, qfalse, 0 },
	{ "Rocket L", "rl", IT_WEAPON, WP_ROCKET_LAUNCHER, qfalse, 0 },
	{ "Plasma G", "pg", IT_WEAPON, WP_PLASMAGUN, qfalse, 0 },
	{ "Lightning", "lg", IT_WEAPON, WP_LIGHTNING, qfalse, 0 },
	{ "Railgun", "rg", IT_WEAPON, WP_RAILGUN, qfalse, 0 },
	{ "BFG10k", "bfg", IT_WEAPON, WP_BFG, qfalse, 0 },
	{ "Quad", "quad", IT_POWERUP, PW_QUAD, qfalse, 0 },
	{ "Regen", "regen", IT_POWERUP, PW_REGEN, qfalse, 0 },
	{ "Invis", "invis", IT_POWERUP, PW_INVIS, qfalse, 0 },
	{ "Btl Suit", "bs", IT_POWERUP, PW_BATTLESUIT, qfalse, 0 },
	{ "Haste", "haste", IT_POWERUP, PW_HASTE, qfalse, 0 }
};

static int dm_numMenuItems = sizeof(dm_itemList)/sizeof(dm_itemList[0]);
</pre></font>


<p>&nbsp;

<p>Now we'll actually add the items to the menu. We can specify that a particular item
is excluded (in this case grayed out), by its position on the list. Note that we sanity
check the addition of the menu item so we aren't graying out the wrong menu item.

<p>If you remember from the first part of the tutorial, I made a fuss about when and where
the menu grayed state was changed. Menu items are initialized without the flag when the
popup menu is created before first use. The grayed flag is removed when a sub-menu is closed.

<p>This creates a window in which we can add the <b>QMF_GRAYED</b> flag during the 
<b>DynamicMenu_AddItem()</b> phase, that exists for the duration of the sub-menu, but is removed
safely so the next sub-menu isn't affected. When data structures are re-used dynamically, you must
make sure that they're in a safe state for next use.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DynamicMenu_AddListOfItems
=================
*/
static void DynamicMenu_AddListOfItems( int exclude, createHandler crh, eventHandler evh )
{
	int i;
	int lastitem;

	for (i = 0; i < dm_numMenuItems; i++)
	{
		if (!dm_itemList[i].loaded)
			continue;

		if (dm_itemList[i].game && dm_itemList[i].game != s_dynamic.gametype)
			continue;

		if (!DynamicMenu_AddItem(dm_itemList[i].longname, i, crh, evh))
			continue;

		if (i == exclude)
		{
			// gray the item
			lastitem = s_dynamic.end[ s_dynamic.depth - 1] - 1;
			s_dynamic.item[lastitem].generic.flags |= QMF_GRAYED;
		}
	}
}
</pre></font>

<p>&nbsp;

<p>But before we can do this, we need to detect the presence of items on the map. This is done 
every time the menu is first created (you did uncomment the call to this function, didn't you?), 
so no assumption is made about its persistance in memory.

<p>The <b>CS_ITEMS</b> configuration string consists of an array of 1's and 0's, matching
the listed order of items in <b>bg_itemlist[]</b> in <b>bg_misc.c</b>. We just need to match
up the identifying parameters in our <b>dm_itemlist[]</b> to confirm that the item is present on
the map.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DynamicMenu_InitMapItems
=================
*/
static void DynamicMenu_InitMapItems( void )
{
	int		i, j;
	char	items[MAX_ITEMS+1];
	int 	type;

	for (i = 0; i < dm_numMenuItems; i++)
		dm_itemList[i].loaded = qfalse;

	trap_GetConfigString( CS_ITEMS, items, sizeof(items) );
	for ( i = 1; i < bg_numItems; i++)
	{
		if (items[i] != '1')
			continue;

		// locate item on our list
		type = bg_itemlist[i].giType;
		for (j = 0 ; j < dm_numMenuItems; j++)
		{
			if (dm_itemList[j].type != bg_itemlist[i].giType)
				continue;

			// mark as loaded if we've found the item
			if (type == IT_WEAPON || type == IT_POWERUP)
			{
				if (bg_itemlist[i].giTag == dm_itemList[j].tag)
				{
					dm_itemList[j].loaded = qtrue;
					break;
				}
				continue;
			}

			if (bg_itemlist[i].quantity == dm_itemList[j].tag)
			{
				dm_itemList[j].loaded = qtrue;
				break;
			}
		}
	}
}
</pre></font>

<p>&nbsp;

<font color="#E07F44"><H4>
4. Building up the menu
</H4></font>

<p>With two useful helper functions now in place, we can start work on 
creating the menu itself. I'll split this up into two parts to try and
make things easier to follow. 

<p>The code in this section is responsible for creating the menu, and 
each of the sub-menus. Once implemented, all that remains is to add
the code that will execute the commands. This is done in section 5.

<p>Refresh your memory about how <b>DynamicMenu_AddItem()</b> is used. The four arguments
are the displayed text string, a unique identifier, the function that will create 
a sub menu, and an event handler function that performs the selected task.

<p>It's important to note, for future reference, that many of the text strings here
are used as part of the command issued. It's therefore important that they're entered exactly
and not changed.

<p>Don't forget that to reduce compiler warnings and errors you should try and 
place functions before they're called.

<p>I've tried to order these menu commands in a way that matches frequent use.
Your mileage may vary.


<p>&nbsp;

<font color="#E07F44"><H4>
4.1 The primary menu
</H4></font>

<p>The enum should be placed near the start of the dynamic menu code additions,
it identifies the unique commands that pass through the same handler <b>DM_Command_Event()</b>. 

<p>The function <b>DynamicMenu_InitPrimaryMenu()</b> replaces the very simple one used in the first
part of the tutorial. You shouldn't replace the <b>DM_Close_Event()</b> as its also used here.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
enum {
	COM_WHOLEADER,
	COM_IAMLEADER,
	COM_QUITLEADER,
	COM_MYTASK
} commandId;


/*
=================
DynamicMenu_InitPrimaryMenu
=================
*/
static void DynamicMenu_InitPrimaryMenu( void )
{
	DynamicMenu_SubMenuInit();

	DynamicMenu_AddItem("Close!", 0, NULL, DM_Close_Event);
	DynamicMenu_AddItem("Everyone", 0, DM_CommandList_SubMenu, NULL);
	DynamicMenu_AddListOfPlayers(PT_FRIENDLY|PT_BOTONLY, 
		DM_CommandList_SubMenu, NULL);
	DynamicMenu_AddItem("Leader?", COM_WHOLEADER, NULL, DM_Command_Event);

	if (s_dynamic.gametype == GT_CTF)
	{
		DynamicMenu_AddItem("My task?", COM_MYTASK, NULL, DM_Command_Event);
	}

	DynamicMenu_AddItem("Lead", COM_IAMLEADER, NULL, DM_Command_Event);
	DynamicMenu_AddItem("Resign", COM_QUITLEADER, NULL, DM_Command_Event);

	DynamicMenu_FinishSubMenuInit();
}
</pre></font>

<p>&nbsp;


<font color="#E07F44"><H4>
4.2 The bot command list
</H4></font>

<p>This creates a list of commands for controlling the bot, each command being uniquely
identified by the enumeration.

<p>Two extra commands are added for CTF games - their use is self explanatory.

<p>The <b>Point+</b> command is slightly unusual, in that you then have to issue a second 
command. The bot will (in theory) lead and wait for you, rather than follow you around.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
enum {
	BC_NULL,
	BC_FOLLOW,
	BC_HELP,
	BC_GET,
	BC_PATROL,
	BC_CAMP,
	BC_HUNT,
	BC_DISMISS,
	BC_REPORT,
	BC_POINT,
	BC_GETFLAG,
	BC_DEFENDBASE
} botCommandId;


/*
=================
DM_CommandList_SubMenu
=================
*/
static void DM_CommandList_SubMenu( void )
{
	DynamicMenu_SubMenuInit();

	DynamicMenu_AddItem("Report", BC_REPORT, NULL, DM_BotCommand_Event);
	DynamicMenu_AddItem("Help", BC_HELP, DM_TeamList_SubMenu, NULL);

	if (s_dynamic.gametype == GT_CTF)
	{
		DynamicMenu_AddItem("Capture Flag", 
			BC_GETFLAG, NULL, DM_BotCommand_Event);
		DynamicMenu_AddItem("Defend Base", 
			BC_DEFENDBASE, NULL, DM_BotCommand_Event);
	}

	DynamicMenu_AddItem("Follow", BC_FOLLOW, DM_TeamList_SubMenu, NULL);
	DynamicMenu_AddItem("Get", BC_GET, DM_ItemList_SubMenu, NULL);
	DynamicMenu_AddItem("Patrol", BC_PATROL, DM_ItemPatrol_SubMenu, NULL);
	DynamicMenu_AddItem("Camp", BC_CAMP, DM_CampItemList_SubMenu, NULL);
	DynamicMenu_AddItem("Hunt", BC_HUNT, DM_EnemyList_SubMenu, NULL);
	DynamicMenu_AddItem("Point+", BC_POINT, NULL, DM_BotCommand_Event);
	DynamicMenu_AddItem("Dismiss", BC_DISMISS, NULL, DM_BotCommand_Event);

	DynamicMenu_FinishSubMenuInit();
}
</pre></font>

<p>&nbsp;


<font color="#E07F44"><H4>
4.3 Commands issued to bots using one target
</H4></font>

<p>These commands are used to build a single submenu that gives a valid
target. This might be an item, another team mate, or an enemy player.

<p>This first one provides a list of bots on the same team, excluding the bot that will receive 
the command. Note the special case that refers to the player (&quot;follow me&quot;).

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DM_TeamList_SubMenu
=================
*/
static void DM_TeamList_SubMenu( void )
{
	DynamicMenu_SubMenuInit();

	DynamicMenu_AddItem("me", 0, NULL, DM_BotPlayerTarget_Event);
	DynamicMenu_AddListOfPlayers(PT_FRIENDLY|PT_EXCLUDEGRANDPARENT, 
		NULL, DM_BotPlayerTarget_Event);

	DynamicMenu_FinishSubMenuInit();
}
</pre></font>

<p>&nbsp;

<p>Sets up a list of items that are on the map. The use of -1 in the exclude argument means
that all items will appear, none grayed out.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DM_ItemList_SubMenu
=================
*/
static void DM_ItemList_SubMenu( void )
{
	DynamicMenu_SubMenuInit();
	DynamicMenu_AddListOfItems(-1, NULL, DM_BotItemTarget_Event);
	DynamicMenu_FinishSubMenuInit();
}

</pre></font>

<p>&nbsp;

<p>Implementing the camp command, this is essentially the same as the item list,
with the addition of the &quot;camp here&quot; and &quot;camp there&quot; commands.
The use of <b>-1</b> for the <b>id</b> ends up using the menu text instead of finding
a special contracted form of the item name.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DM_CampItemList_SubMenu
=================
*/
static void DM_CampItemList_SubMenu( void )
{
	DynamicMenu_SubMenuInit();
	DynamicMenu_AddItem("here", -1, NULL, DM_BotItemTarget_Event);
	DynamicMenu_AddItem("there", -1, NULL, DM_BotItemTarget_Event);
	DynamicMenu_AddListOfItems(-1, NULL, DM_BotItemTarget_Event);
	DynamicMenu_FinishSubMenuInit();
}

</pre></font>

<p>&nbsp;

<p>We finish off with a submenu that lists enemy players. Used to create the 
list of targets for the hunt command.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DM_EnemyList_SubMenu
=================
*/
static void DM_EnemyList_SubMenu( void )
{
	DynamicMenu_SubMenuInit();
	DynamicMenu_AddListOfPlayers(PT_ENEMY, NULL, DM_BotPlayerTarget_Event);
	DynamicMenu_FinishSubMenuInit();
}
</pre></font>



<p>&nbsp;

<font color="#E07F44"><H4>
4.4 More complex commands requiring two targets
</H4></font>

<p>There's only one command that uses two targets: ordering a patrol between two items. The second
item list <b>DM_ItemPatrol2_SubMenu()</b> needs to exclude the item selected on the previous menu,
as it doesn't make sense to patrol between the same item.


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DM_ItemList2_SubMenu
=================
*/
static void DM_ItemPatrol2_SubMenu( void )
{
	int exclude;
	int index;
	int depth;

	DynamicMenu_SubMenuInit();

	depth = s_dynamic.depth - 1;
	index = s_dynamic.active[depth - 1];	// previous menu level
	exclude = s_dynamic.data[index].id;
	DynamicMenu_AddListOfItems(exclude, NULL, DM_BotItemItemTarget_Event);

	DynamicMenu_FinishSubMenuInit();
}



/*
=================
DM_ItemPatrol_SubMenu
=================
*/
static void DM_ItemPatrol_SubMenu( void )
{
	DynamicMenu_SubMenuInit();
	DynamicMenu_AddListOfItems(-1, DM_ItemPatrol2_SubMenu, NULL);
	DynamicMenu_FinishSubMenuInit();
}
</pre></font>




<p>&nbsp;

<font color="#E07F44"><H4>
5. Adding the menu functionality
</H4></font>

<p>With everything set for creating the menu, we now need to add the code that will
issue the commands to the bot(s). The method for doing this is very simple: just create
the command text as a player would type it, and send it into the team chat channel. The bots
will parse the command and (hopefully) respond to it.

<p>Although there is a lot of code here, most of it's sanity checking to make sure 
everything is behaving as expected. For a final and fully debugged product this code can be
commented out, but in the mean time it helped me catch some mistakes I'd made while
writing the code.

<p>The sanity checking falls into two parts. Ensuring that we're deep enough in the menu structure
for the rest of the code to access valid data (essential). And checking 
that the command matches the one we've written the function for (optional).

<p>&nbsp;



<font color="#E07F44"><H4>
5.1 Commands that have no target
</H4></font>

<p>Very straight forward, the command is a already fully formed as a simple string.
It's important that the strings match the ordering of the <b>COM_*</b> enums.


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
static char* commandString[] = {
	"Who is the leader", // COM_WHOLEADER
	"I am the leader",	// COM_IAMLEADER
	"I quit being the leader",	// COM_QUITLEADER
	"What is my job",	// COM_MYTASK
	0
};


/*
=================
DM_Command_Event

Issues a command without target
=================
*/
static void DM_Command_Event( int index )
{
	int depth;
	int cmd;
	const char* s;

	depth = DynamicMenu_IndexDepth(index);

	if (depth != s_dynamic.depth)
	{
		Com_Printf("Command_Event: index %i"
			" at wrong depth (%i)\n", index, depth);
		DynamicMenu_Close();
		return;
	}

	// validate command
	cmd = s_dynamic.data[index].id;
	switch (cmd) {
	case COM_WHOLEADER:
	case COM_IAMLEADER:
	case COM_QUITLEADER:
	case COM_MYTASK:
		break;
	default:
		Com_Printf("Command_Event: unknown command (%i)\n", cmd);
		DynamicMenu_Close();
		return;
	};

	// issue the command
	DynamicMenu_Close();
	trap_Cmd_ExecuteText( EXEC_APPEND, va("say_team \"%s\"\n", 
		commandString[cmd]));
}
</pre></font>

<p>&nbsp;



<font color="#E07F44"><H4>
5.2 Simple commands given to bots
</H4></font>

<p>Introducing the next level of complexity, we need to include the name of the bot
that the command is targetted at. The complete list of commands is introduced here,
even though this event handler only uses a few of them.

<p>You need to remember that <b>s_dynamic.depth</b> is a count of the number of menus open,
not an index into data arrays like <b>s_dynamic.active[]</b>. The menu structure is 
BotName|Command, so we need to use <b>active[s_dynamic.depth-2]</b> to get the bot name.


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
static char* botCommandStrings[] = {
	"", // BC_NULL
	"%s follow %s", // BC_FOLLOW
	"%s help %s", // BC_HELP
	"%s get %s", // BC_GET
	"%s patrol from %s to %s", // BC_PATROL
	"%s camp %s", // BC_CAMP
	"%s kill %s", // BC_HUNT
	"%s dismissed", // BC_DISMISS
	"%s report", // BC_REPORT
	"%s lead the way", // BC_POINT
	"%s get the flag",	// BC_GETFLAG
	"%s defend the base",	// BC_DEFENDBASE
	0
};


/*
=================
DM_BotCommand_Event

Issues a command to a bot
=================
*/
static void DM_BotCommand_Event( int index )
{
	int depth;
	int bot, cmd;
	const char* s;

	depth = DynamicMenu_IndexDepth(index);

	if (depth != s_dynamic.depth || depth < 2)
	{
		Com_Printf("BotCommand_Event: index %i"
			" at wrong depth (%i)\n", index, depth);
		DynamicMenu_Close();
		return;
	}

	// validate command
	cmd = s_dynamic.data[index].id;
	switch (cmd) {
	case BC_DISMISS:
	case BC_REPORT:
	case BC_POINT:
	case BC_GETFLAG:
	case BC_DEFENDBASE:
		break;
	default:
		Com_Printf("BotCommand_Event: unknown command (%i)\n", cmd);
		DynamicMenu_Close();
		return;
	};

	// get the parent bot name, insert into command string
	bot = s_dynamic.active[ depth - 2 ];
	s = va(botCommandStrings[cmd], s_dynamic.data[bot].text);

	// issue the command
	DynamicMenu_Close();
	trap_Cmd_ExecuteText( EXEC_APPEND, va("say_team \"%s\"\n", s));
}
</pre></font>

<p>&nbsp;



<font color="#E07F44"><H4>
5.3 Commands that have a single item as target
</H4></font>

<p>These are two variations on the same event code. The first 
<b>DM_BotPlayerTarget_Event()</b> uses the text drawn in the menu
to act as the target. The command is in the form 
BotName|Command|Target, and so we again use <b>active[]</b> to pull out
the previous choices.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DM_BotPlayerTarget_Event

Issues a command to a bot that needs a target
Assumes index is the object, parent is the command,
and parent of parent is the bot
=================
*/
static void DM_BotPlayerTarget_Event( int index)
{
	int depth;
	int bot, cmd;
	const char* s;

	depth = DynamicMenu_IndexDepth(index);

	if (depth != s_dynamic.depth || depth < 3)
	{
		Com_Printf("BotPlayerTarget_Event: index %i"
			" at wrong depth (%i)\n", index, depth);
		DynamicMenu_Close();
		return;
	}

	// validate command
	cmd = s_dynamic.data[s_dynamic.active[depth - 2]].id;
	switch (cmd) {
	case BC_FOLLOW:
	case BC_HELP:
	case BC_HUNT:
		break;
	default:
		Com_Printf("BotPlayerTarget_Event: unknown command id %i\n", cmd);
		DynamicMenu_Close();
		return;
	};

	// get the parent bot, insert it and item into command string
	bot = s_dynamic.active[ depth - 3 ];
	s = va(botCommandStrings[cmd], s_dynamic.data[bot].text, 
		s_dynamic.data[index].text);

	// issue the command
	DynamicMenu_Close();
	trap_Cmd_ExecuteText( EXEC_APPEND, va("say_team \"%s\"\n", s));
}
</pre></font>

<p>&nbsp;


<p>This second event handler works slightly differently. We've had to shorten 
the names of objects in <b>dm_ItemList[]</b> (section 3) to fit them within 
menu text limits. While these are still very human readable, the bots 
don't understand these contractions. Instead of pulling the menu text and inserting it
into a command, we need to use a name the bot does understand.

<p>This code is almost identical to <b>DM_PlayerItemTarget_Event</b>, especially when you
notice that <b>item==-1</b> gives the same result. I don't have a strong over-riding reason for
doing things this way. I chose to use the same event function for each command, and then
needed a special case where the menu text was used instead of the special. To merge
<b>DM_BotItemTarget_Event()</b> with <b>DM_BotPlayerTarget_Event()</b> would require 
modification to <b>DynamicMenu_AddListOfPlayers()</b>. You can do this if you think that is
a *better* way.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DM_BotItemTarget_Event

Issues a command to a bot that needs a target
Assumes index is the object, parent is the command,
and parent of parent is the bot
=================
*/
static void DM_BotItemTarget_Event( int index)
{
	int depth;
	int bot, cmd, item;
	const char* s;
	const char* item_str;

	depth = DynamicMenu_IndexDepth(index);

	if (depth != s_dynamic.depth || depth < 3)
	{
		Com_Printf("BotItemTarget_Event: index %i"
			" at wrong depth (%i)\n", index, depth);
		DynamicMenu_Close();
		return;
	}

	// validate command
	cmd = s_dynamic.data[s_dynamic.active[depth - 2]].id;
	switch (cmd) {
	case BC_GET:
	case BC_CAMP:
		break;
	default:
		Com_Printf("BotItemTarget_Event: unknown command id %i\n", cmd);
		DynamicMenu_Close();
		return;
	};

	// get the parent bot, insert it and item into command string
	bot = s_dynamic.active[ depth - 3 ];
	item = s_dynamic.data[index].id;
	if (item < 0)
		item_str = s_dynamic.data[index].text;
	else
		item_str = dm_itemList[item].shortname;

	s = va(botCommandStrings[cmd], s_dynamic.data[bot].text, item_str);

	// issue the command
	DynamicMenu_Close();
	trap_Cmd_ExecuteText( EXEC_APPEND, va("say_team \"%s\"\n", s));
}
</pre></font>

<p>&nbsp;




<font color="#E07F44"><H4>
5.4 Commands that need two targets
</H4></font>

<p>The last type of command is only used for giving a patrol command between two objects.
There's nothing here you haven't already seen, we just need to go deeper into the menu structure
in order to get all the parameters. The menu command looks like BotName|Command|Item|Item2.


<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
/*
=================
DM_BotItemItemTarget_Event

Issues a command to a bot that needs two targets
Assumes index and parent are the objects, grandparent
is the command, and great-grandparent is the bot
=================
*/
static void DM_BotItemItemTarget_Event( int index)
{
	int depth;
	int bot, cmd, item, item2;
	const char* s;

	depth = DynamicMenu_IndexDepth(index);

	if (depth != s_dynamic.depth || depth < 4)
	{
		Com_Printf("BotItemItemTarget_Event: index %i"
			" at wrong depth (%i)\n", index, depth);
		DynamicMenu_Close();
		return;
	}

	// validate command
	cmd = s_dynamic.data[s_dynamic.active[depth - 3]].id;
	switch (cmd) {
	case BC_PATROL:
		break;
	default:
		Com_Printf("BotItemItemTarget_Event: unknown command id %i\n", cmd);
		DynamicMenu_Close();
		return;
	};

	// get the parent bot, insert it and item into command string
	bot = s_dynamic.active[ depth - 4 ];
	item = s_dynamic.data[s_dynamic.active[depth - 2]].id;
	item2 = s_dynamic.data[index].id;
	s = va(botCommandStrings[cmd], s_dynamic.data[bot].text,
		dm_itemList[item].shortname, dm_itemList[item2].shortname);

	// issue the command
	DynamicMenu_Close();
	trap_Cmd_ExecuteText( EXEC_APPEND, va("say_team \"%s\"\n", s));
}
</pre></font>

<p>&nbsp;


<font color="#E07F44"><H4>
6. Tying up loose ends
</H4></font>

<p>There isn't much left to do now, the code should already compile and run as 
advertised.

<p>If you're going to include this code in your mod then there are two things that you might
want to look at. At the moment you can access a (broken) bot command menu through the in-game 
command menu or by pressing F3. 

<p>You could change the in-game menu so it moves to this popup menu
system instead. Changing the F3 key is also easily done. Instead of adding a custom command for
this menu, you can change the <b>ui_teamOrders</b> command, <b>UI_ConsoleCommands()</b> in
<b>ui_atoms.c</b>, to point to this menu system instead.

<p>With the new 1.25 source code release just around the corner, this might become 
&quot;obsolete&quot; very quickly. At the same time, it should easily port to the new 
source code and co-exist with the (promised) bot command menu system. I can't make promises
for code I haven't seen.

<p>Whether this code lasts as long as a mayfly, or proves useful in the 1.25 source code, I
don't know. In any case, enjoy!


      <p>              
    </td>			  
  </tr>
</table>
	<!-- END MAIN TABLE -->
				                
  </tr>
</table>
<p>

	<!-- BEGIN BOTTOM HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> |
	<a href="tutorial32.shtml"><< Prev</a> |
	Tutorial 33 |
	<a href="tutorial34.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTOTM HEIRARCHY -->

</body>
</html>
