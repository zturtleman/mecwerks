<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?257978312"></SCRIPT><!--INSERTADTHISPAGE -->

<html>
<head>
	<title>Code3Arena</title>
</head>

<body background="../images/bg.gif" bgcolor="#660000" text="white" link="#C05F00" vlink="#d16545">


	<!-- BEGIN BANNER AD TABLE -->
<table width="100%" border=0 cellpadding=5 cellspacing=0 align="center" background="../images/bg.gif">
  <tr>
   	 <td width=468 height=60 align="CENTER" valign="top" bgcolor=#000000>
 <center><SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257978312"></SCRIPT><NOSCRIPT><A HREF="http://ads.gamespy.com/cgi-bin/adclick.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257978312"><IMG SRC="http://ads.gamespy.com/cgi-bin/adserver.exe/SITE=PQ/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=IAB_FULL_BANNER?257978312"></A></NOSCRIPT><!--ACCIPITERADINSERT/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES--></center>
</td>
  </tr>
</table>
	<!-- END BANNER AD TABLE -->

<br>

	<!-- BEGIN LOGO IMAGE TABLE -->
<table width="100%" cellspacing="0" cellpadding="0" border="1" align="center" bgcolor=#000000>
  <tr>
     <td align="CENTER">
	  <img src="/code3arena/images/logo.gif" width="500" height="137" border="0" alt="Code3Arena">
</td>
  </tr>
</table>
	<!-- END LOGO IMAGE TABLE -->
<p>

	<!-- BEGIN TOP HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article1.shtml"><< Prev</a> |
	Article 2 |
	<a href="article3.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END TOP HEIRARCHY -->

	<!-- BEGIN MAIN TABLE HERE-->
<table width="100%" border=0 cellpadding=0 cellspacing=0 align=center bgcolor=#4B0202>
  <tr>
  
   <!-- BEGIN LEFT NAVBAR MENU --> 
    <td valign=top bgcolor="#000000">
<table width=150 bgcolor="#000000" valign=top border=0 cellpadding=10 cellspacing=0 >
  <tr>
	 <td bgcolor=#000000 valign=top>
      <p>
      <a href="/code3arena/index.shtml"><img src="/code3arena/images/minilogo.gif" width="150" height="80" border="0" alt="menu"></a>
	  <p><!-- C40B02 -->
	  <font face=arial color="#C05F00" size=2>
<strong>
<LI> <a href="/code3arena/index.shtml">Home/News</a>
<LI> <a href="/code3arena/modsource.shtml">ModSource</a>
<LI> <a href="/code3arena/compilers.shtml">Compiling</a>
<LI> <a href="/code3arena/help.shtml">Help!!!</a>
<LI> <a href="/code3arena/submission.shtml">Submission</a>
<LI> <a href="/code3arena/contributors.shtml">Contributors</a>
<LI> <a href="/code3arena/staff.shtml">Staff</a>
<LI> <a href="/code3arena/downloads.shtml">Downloads</a>
</strong>
<P>

	    <img src="/code3arena/images/tutorials.gif" width="80" height="25" border="0" alt="Tutorials">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/tutorials"> <  Index  ></a>
<BR> 1. <a href="/code3arena/tutorials/tutorial1.shtml">Mod making 101</a>
<BR> 2. <a href="/code3arena/tutorials/tutorial2.shtml">Up 'n running</a>
<BR> 3. <a href="/code3arena/tutorials/tutorial3.shtml">Hello, QWorld!</a>
<BR> 4. <a href="/code3arena/tutorials/tutorial4.shtml">Infinite Haste</a>
<BR> 5. <a href="/code3arena/tutorials/tutorial5.shtml">Armor Piercing Rails</a>
<BR> 6. <a href="/code3arena/tutorials/tutorial6.shtml">Bouncing Rockets</a>
<BR> 7. <a href="/code3arena/tutorials/tutorial7.shtml">Cloaking</a>
<BR> 8. <a href="/code3arena/tutorials/tutorial8.shtml">Ladders</a>
<BR> 9. <a href="/code3arena/tutorials/tutorial9.shtml">Favourite Server</a>
<BR> 10. <a href="/code3arena/tutorials/tutorial10.shtml">Flame Thrower</a>
<BR> 11. <a href="/code3arena/tutorials/tutorial11.shtml">Vortex Grenades</a>
<BR> 12. <a href="/code3arena/tutorials/tutorial12.shtml">Grapple</a>
<BR> 13. <a href="/code3arena/tutorials/tutorial13.shtml">Lightning Discharge</a>
<BR> 14. <a href="/code3arena/tutorials/tutorial14.shtml">Locational Damage</a>
<BR> 15. <a href="/code3arena/tutorials/tutorial15.shtml">Leg Shots</a>
<BR> 16. <a href="/code3arena/tutorials/tutorial16.shtml">Weapon Switching</a>
<BR> 17. <a href="/code3arena/tutorials/tutorial17.shtml">Scoreboard frag-rate</a>
<BR> 18. <a href="/code3arena/tutorials/tutorial18.shtml">Vortex Grenades II</a>
<BR> 19. <a href="/code3arena/tutorials/tutorial19.shtml">Vulnerable Missiles</a>
<BR> 20. <a href="/code3arena/tutorials/tutorial20.shtml">Creating Classes</a>
<BR> 21. <a href="/code3arena/tutorials/tutorial21.shtml">Scrolling Credits</a>
<BR> 22. <a href="/code3arena/tutorials/tutorial22.shtml">Weapon Dropping</a>
<BR> 23. <a href="/code3arena/tutorials/tutorial23.shtml">Anti-Gravity Boots</a>
<BR> 24. <a href="/code3arena/tutorials/tutorial24.shtml">HUD scoreboard</a>
<BR> 25. <a href="/code3arena/tutorials/tutorial25.shtml">Flashlight and laser</a>
<BR> 26. <a href="/code3arena/tutorials/tutorial26.shtml">Weapon Positioning</a>
<BR> 27. <a href="/code3arena/tutorials/tutorial27.shtml">Weapon Reloading</a>
<BR> 28. <a href="/code3arena/tutorials/tutorial28.shtml">Progressive Zooming</a>
<BR> 29. <a href="/code3arena/tutorials/tutorial29.shtml">Rotating Doors</a>
<BR> 30. <a href="/code3arena/tutorials/tutorial30.shtml">Beheading (headshot!)</a>
<BR> 31. <a href="/code3arena/tutorials/tutorial31.shtml">Alt Weapon Fire</a>
<BR> 32. <a href="/code3arena/tutorials/tutorial32.shtml">Popup Menus I</a>
<BR> 33. <a href="/code3arena/tutorials/tutorial33.shtml">Popup Menus II</a>
<BR> 34. <a href="/code3arena/tutorials/tutorial34.shtml">Cluster Grenades</a>
<BR> 35. <a href="/code3arena/tutorials/tutorial35.shtml">Homing Rockets</a>
<BR> 36. <a href="/code3arena/tutorials/tutorial36.shtml">Spreadfire Powerup</a>
<BR> 37. <a href="/code3arena/tutorials/tutorial37.shtml">Instagib gameplay</a>
<BR> 38. <a href="/code3arena/tutorials/tutorial38.shtml">Accelerating rockets</a>
<BR> 39. <a href="/code3arena/tutorials/tutorial39.shtml">Server only Instagib</a>
<BR> 40. <a href="/code3arena/tutorials/tutorial40.shtml">Advanced Grapple Hook</a>
<BR> 41. <a href="/code3arena/tutorials/tutorial41.shtml">Unlagging your mod</a>
</strong>
	  </font>
      <p><br>
	  
	  <img src="/code3arena/images/articles.gif" width="80" height="25" border="0" alt="Articles">
	  <font color="#C05F00" size=1>
<strong>
<BR> <a href="/code3arena/articles"> <  Index  > </a>
<BR> 1. <a href="/code3arena/articles/article1.shtml">Entities</A>
<BR> 2. <a href="/code3arena/articles/article2.shtml">Vectors</A>
<BR> 3. <a href="/code3arena/articles/article3.shtml">Good Coding</A>
<BR> 4. <a href="/code3arena/articles/article4.shtml">Compilers I</A>
<BR> 5. <a href="/code3arena/articles/article5.shtml">Compilers II</A>
<BR> 6. <a href="/code3arena/articles/article6.shtml">UI Menu Primer I</A>
<BR> 7. <a href="/code3arena/articles/article7.shtml">UI Menu Primer II</A>
<BR> 8. <a href="/code3arena/articles/article8.shtml">UI Menu Primer III</A>
<BR> 9. <a href="/code3arena/articles/article9.shtml">QVM Communication, Cvars, commands</A>
<BR> 10. <a href="/code3arena/articles/article10.shtml">Metrowerks CodeWarrior</A>
<BR> 11. <a href="/code3arena/articles/article11.shtml">1.27g code, bugs, batch</A>
</strong>
	  </font>
	  <p>
	  <!-- <hr color="#C0C0C0">  -->
	  <br>

	  <img src="/code3arena/images/links.gif" width="80" height="25" border="0" alt="Links">
	  <font color="#C05F00">
	  <small>
<li><a href="http://www.planetquake.com/quake3/files.shtml">Quake3 Files</a>
<li><a href="http://forums.planetquake.com/">Quake3 Forums</a>
<li><a href="http://dynamic.gamespy.com/~assim2/wwwshow.cgi?board=quake3">Q3A Editing Message Board</a>
<li><a href="http://www.planetquake.com/quake3/hosted/editing.shtml">Quake3 Editing</a>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/code3arena/images/feedback.gif" width="80" height="25" border="0" alt="Feedback">
	  <font color="#C05F00">
	  <small>
<li><a href="mailto:sumfuka@planetquake.com">SumFuka</A>
<li><a href="mailto:calrathan@captured.com">Calrathan</A>
<li><a href="mailto:hypothermia@planetquake.com">
	<font color="#FF0000">H</font><font color="#FFFF00">y</font><font
	color="#CC33CC">p</font><font color="#3333FF">o</font>Thermia
	</A>
<li><a href="mailto:warzone@planetquake.com">WarZone</A>
	  </small>
	  </font>
	  <p><br>
	  
	  <img src="/counter/count.exe?ft=3&df=code3arena.dat&dd=D">
	   <p><br><br><br>
	  <small>Site Design by:</small>
	  <br>
	  <a href="mailto:ladyice@planetice.org,jeh@planetjeh.com"><img src="/code3arena/images/icelogo_sm.jpg" width="88" height="31" border="0" align="middle" alt="ICEmosis Design"></a>
	
	  </font>
	  <br><br>
    </td>

  </tr>
</table>
    </td>
	<!-- END LEFT NAVBAR MENU -->
	<!-- BEGIN DIVIDER -->
	<td valign=top background="../images/bg.gif">
<table width=20 cellpadding=0 cellspacing=0 border=0 background="../images/bg.gif">
  <tr>
	<td background="../images/bg.gif">
	  &nbsp;		
	</td>
  </tr>
</table>
	</td>
    <!-- END DIVIDER -->
	
	
	<!-- MAIN TEXT AREA -->
	<td valign=top bgcolor=#000000>
<table width="100%" cellpadding=15 cellspacing=10 border=0 bgcolor=#000000 valign=top>
  <tr>
	<td valign=top> 
<font face="Verdana, Arial" size="2" color="#eeeeee">


<center><b><font color="#C05F00" size=5>
ARTICLE2 - VECTORS
</font></b><br>by <b><a href="mailto:sumfuka@planetquake.com">SumFuka</A></b></center><p>


Maths - Urgh, Eccch, YUCK ! But, like it or not, vectors are crucial to quake coding. Every time you fire a rocket, you need vectors. In fact, you could say that "if you don't wanna go down, you betta get up with da vecta".

<font color="#E07F44"><H4>
WHAT IS A VECTOR
</H4></font>

In a 3-dimensional world such as quake, a vector is simply three numbers - an x component, a y component and a z component. In <b>q_shared.h</b> at line 258 we can see the C code definition of <b>vec3_t</b> :

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	typedef float vec_t;
	typedef vec_t vec2_t[2];
	typedef vec_t vec3_t[3];
	typedef vec_t vec4_t[4];
	typedef vec_t vec5_t[5];
</pre></font>

If you're new to C, a <b>typedef</b> associates a complicated datatype with another name. Above, the first typedef states that a single dimensional vector type, <b>vec_t</b>, is a <b>float</b>ing point number (e.g. 23.4567, as opposed to integers like 23). The next <b>typedef</b>'s define 2,3,4 and 5 dimensional vector types. The most common vector type is the 3-dimenstional one, <b>vec3_t</b> - it is simply an array of three <b>vec_t</b>'s (in other words, an array of three <b>float</b>'s). These three floats represent what we call the <b>x</b>, <b>y</b> and <b>z</b> components.<P>


<font color="#E07F44"><H4>
THE ORIGIN
</H4></font>

Ok, the most basic vector is the <b>origin</b> vector. Let's write it down like this : <b>(0.0, 0.0, 0.0)</b>. The x, y and z components are all zero. Let's create an origin vector in C code.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	vec3_t origin;
	origin[0] = 0.0;
	origin[1] = 0.0;
	origin[2] = 0.0;
</pre></font>

Now let's create a vector to represent the position of player0, at (55.0, -23.0, 12.5).

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	vec3_t player0pos;
	player0pos[0] = 55.0;
	player0pos[1] = -23.0;
	player0pos[2] = 12.5;
</pre></font>

Now, where is player0 standing ? Well, that depends on something called...<P>


<font color="#E07F44"><H4>
THE CO-ORDINATE SYSTEM
</H4></font>

Let's assume that our quake map is three dimensional (and multi-levelled). A space map, for example. Let's also assume that the location (0.0, 0.0, 0.0) is right on top of a platform somewhere in the middle of the map, with bits of the map extending in directions both left and right, forwards and back, and up and down. But, what defines 'left-right', 'forwards-backwards' or 'up-down' ?<P>

Quake uses what we call a 'left handed 3d co-ordinate system'. This means, take your left hand and point your arm forwards. Point your thumb upwards, your index finger forwards and your middle finger directly to the right. Let's assume that we are standing at the origin in our space map, facing northwards.<P>

Now, your middle finger is pointing in the direction of positive x co-ordinates, your index finger is pointing to positive y co-ordinates, and your thumb is pointing to positive z co-ordinates.<P>

So, by holding out our 2 fingers and thumb (remember, LEFT hand!) imagine that we are sitting at the origin looking north. We can see that <b>player0pos</b> is a position to the right of us (x=55.0 is positive), behind us (y=-23.0 is negative) and above us (z=12.5 is positive).<P>

If we wanted to suddenly teleport player0 64 units eastwards and 64 units up into the air, how would we do it ? Maybe :

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	player0pos[0] += 64.0;
	player0pos[2] += 64.0;
</pre></font>

There is a better way to do this, however...<P>


<font color="#E07F44"><H4>
VELOCITY VECTORS
</H4></font>

Ok, all the vectors we've been working with so far have been <b>positional</b> vectors - an (x,y,z) position in the game world. There is also another use for vectors - to represent <b>velocity</b> (Note: <b>velocity</b> is different to <b>speed</b>, more later). How do we represent the velocity of rocket that is moving eastwards, and 45 degrees upwards, at 900 units/second ? A vector.<P>

This may be a little confusing, since the rocket will have a <b>position</b> and a <b>velocity</b>, and both are represented by <b>vec3_t</b>.

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	vec3_t rocketpos;
	vec3_t rocketvel;

	rocketpos[0] = 0.0;
	rocketpos[1] = 0.0;
	rocketpos[2] = 0.0;

	rocketvel[0] = 636.39;
	rocketvel[1] = 0.0;
	rocketvel[2] = 636.39;

	// now let's 'move' the rocket, assume one second has gone by.

	rocketpos[0] += rocketvel[0];
	rocketpos[1] += rocketvel[1];
	rocketpos[2] += rocketvel[2];

	// another second goes by... etc

	rocketpos[0] += rocketvel[0];
	rocketpos[1] += rocketvel[1];
	rocketpos[2] += rocketvel[2];
</pre></font>


The result: after 1 second our rocket is located at (636.39, 0, 636.39). But why did we use 636.39, not 900 ? Well the answer to that lies in the fact that if you move in two dimensions (in our case, eastwards and up) the total distance travelled is measured along the long side of a right-angled triangle, where the short sides of the triangle measure the distances moved in those two dimensions. And we know that the long side of a right-angled triangle is calculated from the good ol' <b>c = sqrt (a squared + b squared)</b>. So if a and b are 636.39, c works out to be... 900. In three dimensions the maths gets even stickier.<P>


<font color="#E07F44"><H4>
DIRECTIONS
</H4></font>

Rather than worry about getting 636.39 from 900, there's a better way to work with a velocity of 900 units/second eastwards and upwards at 45 degrees. We simply break it into two components - a <b>direction</b> and a <b>speed</b>.<P>

Now for some definitions, a <b>direction vector</b> is a vector in any direction where the length is precisely 1.0. For example, (1.0, 0.0, 0.0) or (0.707, 0.0, -0.707) etc. We call any vector with a length of precisely 1.0 a <b>normalized vector</b>.<P>

A <b>speed</b> is a linear quantity (NOT a vector!!). For example, 900.0, 0.0 or -450.0. A speed of 0.0 represents standing still whilst negative speeds represent moving backwards.<P>

Why is this easier ? Well, there is a simple equation that allows us to 'move' an entity through space - <b>endpos = startpos + speed * direction</b>. For example, let's model our rocket :

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	vec3_t rocketpos;
	vec3_t rocketdir;
	float rocketspeed;

	rocketpos[0] = 0.0;
	rocketpos[1] = 0.0;
	rocketpos[2] = 0.0;

	rocketdir[0] = 0.707;
	rocketdir[1] = 0.0;
	rocketdir[2] = 0.707;

	rocketspeed = 900.0;

	// now let's 'move' the rocket, assume one second has gone by.

	rocketpos[0] += rocketspeed * rocketdir[0];
	rocketpos[1] += rocketspeed * rocketdir[1];
	rocketpos[2] += rocketspeed * rocketdir[2];
</pre></font>

But again, why is this easier ? Well, firstly - quake provides us with several <b>direction</b> vectors at many points in the code. For example, we quite often see the <b>forward</b> vector. This vector is always pointing in the direction we are aiming. To fire a rocket ? Give it a veclocity of <b>forward</b> multipied by 900. To fire a railgun, trace along the <b>forward</b> vector for8192 units. Etc. As luck would have it, Carmack has given us a mini-library of...<P>


<font color="#E07F44"><H4>
VECTOR FUNCTIONS
</H4></font>

Since vectors are used so much in quake, it makes sense to define functions that take care of all the common vector manipulation tasks (copying, adding, multiplying, etc). Not only is it good practice to make use of these functions (since they're already written, DUH!), it's important to realize that the operators <b>+</b>, <b>*</b> etc CANNOT be used - this is because <b>vec3_t</b> is an array, and the common mathematical operators cannot be used on arrays in C (in the way we expect them too, anyway). For example,

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	// the stuff below is WRONG.
	vector_a *= 100.0;			// WRONG!
	vector_c  = vector_a + vector_b;	// WRONG!

	// we use functions to do addition, multiplication, etc.
	VectorScale (vector_a, 100.0, vector_a);	// CORRECT!
	VectorAdd (vector_a, vector_b, vector_c);	// CORRECT!
</pre></font>

Here's a complete list (from <b>q_shared.h</b> line 357) :

<UL>
<LI><b>VectorSubtract(a,b,c)</b> - subtract b from a, result is c
<LI><b>VectorAdd(a,b,c)</b> - add a to b, result is c
<LI><b>VectorCopy(a,b)</b> - copy a to b
<LI><b>VectorScale(v,s,o)</b> - make v s units long, result in o
<LI><b>VectorMA(v,s,b,o)</b> - make b s units long, add to v, result in o
<LI><b>VectorClear(a)</b> - too easy
<LI><b>VectorNegate(a,b)</b> - flip a, result in b
<LI><b>VectorSet(v,x,y,z)</b> - another easy one
<LI><b>Vector4Copy(a,b)</b> - used for 4 dimensional vectors
<LI><b>SnapVector(v)</b> - round a vector to integer values
</UL>

Got it all ? Notice how most of these functions take one, two or three parameters and save the output in a second, third or forth output parameter (the exceptions are <b>VectorClear()</b> and <b>VectorSet()</b> ). For example, calling <b>VectorSubtract(a,b,c)</b> will not modify <b>a</b> or <b>b</b> - the result will be places in vector <b>c</b>. (Unless of course, we say <b>VectorSubtract(a,b,a)</b>, which is quite ok to do).<P>


<font color="#E07F44"><H4>
VectorMA(v,s,b,o)
</H4></font>

You might be wondering what this function does. It's a useful function that combines a vector multiply and a vector addition. It's used all over the place so it's important to understand what it does. Let's go back to our "rocket moving eastwards and upwards at 900 units/second" example, using the vector functions...

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	vec3_t rocketpos;
	vec3_t rocketdir;
	float rocketspeed;

	VectorClear(rocketpos);
	VectorSet(rocketdir, 0.707, 0.0, 0.707);

	rocketspeed = 900.0;

	// now let's 'move' the rocket, assume one second has gone by.

	VectorMA(rocketpos, rocketspeed, rocketdir, rocketpos);
</pre></font>

Notice that we did *exactly* the same thing as before, but in half the amount of code. And it's much neater because we've used the vector functions. VectorMA is particularly useful - get to know it like an old girlfriend. Innit.


<font color="#E07F44"><H4>
PUTTING IT ALL TOGETHER
</H4></font>

Ok, let's throw all this into action. Open up <b>g_missile.c</b> and look at lines 390-393 :

<font face="Verdana, Arial" size="3" color="#ffffcc"><pre>
	VectorCopy( start, bolt->s.pos.trBase );
	VectorScale( dir, 900, bolt->s.pos.trDelta );
	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
	VectorCopy (start, bolt->r.currentOrigin);
</pre></font>

First, we assume that <b>start</b> is where the rocket is firing from (just in front of the player, at waist height). And <b>dir</b> is the direction that the player is facing (a normalized vector, right ?). And a rocket moves at 900 units/second.<P>

So the code simply does this :

<UL>
<LI>Copy the <b>start</b> vector to the bolt's <b>trBase</b>
<LI>Multiply the <b>dir</b> vecotr by 900 and leave the result in <b>trDelta</b>
<LI>Snap trDelta (convert from floats to integers)
<LI>Copy the <b>start</b> vector to the bolt's <b>currentOrigin</b>
</UL>

That's all there is to it. Have a look through some other functions like <b>fire_plasma</b> and <b>weapon_railgun_fire</b> - see if you can work out (for example) how fast does plasma move ? What is the range of the railgun ? Or the lightning gun ?<P>

If you can answer all those questions - congratulations, you're a vector geek !


      <p>              
    </td>			  
  </tr>
</table>
	<!-- END MAIN TABLE -->
				                
  </tr>
</table>
<p>

	<!-- BEGIN BOTTOM HEIRARCHY -->
<table width="100%" cellpadding=0 cellspacing=0 border=0 bgcolor="#000000">
  <tr>
    <td><img src="/code3arena/images/ouricon.gif"></td>
    <td width="100%" bgcolor=#000000>
	<font face="Verdana, Arial" size="2" color="#eeeeee"><b>
	<A HREF="http://www.planetquake.com">PlanetQuake</A> |
	<A HREF="http://www.planetquake.com/code3arena">Code3Arena</A> |
	<A HREF="http://www.planetquake.com/code3arena/articles">Articles</A> |
	<a href="article1.shtml"><< Prev</a> |
	Article 2 |
	<a href="article3.shtml">Next >></a>
	</b></font>
    </td>
  </tr>
</table>
<p>
	<!-- END BOTTOM HEIRARCHY -->

</body>
</html>
