<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0055)http://quakestyle.telefragged.com/quake3/tutorial13.htm -->
<HTML><HEAD><TITLE>Quake Style - Quake 3 Tutorials - Game Enhancements - (Re/De)generation of stats</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<STYLE type=text/css>BODY {
	FONT-FAMILY: verdana
}
TABLE {
	FONT-FAMILY: verdana
}
TR {
	FONT-FAMILY: verdana
}
TD {
	FONT-FAMILY: verdana
}
INPUT {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
TEXTAREA {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
SELECT {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
OPTION {
	FONT-FAMILY: verdana; FONT-SIZE: 10px
}
PRE {
	FONT-FAMILY: verdana; FONT-WEIGHT: bold
}
A {
	COLOR: #00ff00
}
A:hover {
	COLOR: white; TEXT-DECORATION: none
}
</STYLE>

<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY bgColor=black text=#ffff80><FONT size=1>
<DIV align=right>
<TABLE border=0 cellSpacing=0 cellborder="0">
  <TBODY>
  <TR>
    <TD align=middle><FONT size=1><B><FONT color=white>Quake Style - Quake 3 
      Tutorials</FONT><BR><FONT color=#bbcc77>Game Enhancements </FONT><FONT 
      color=#ff8000>- (Re/De)generation of stats</FONT><BR>How to add 
      regenerating or degenerating elements to your mod! 
  </B></FONT></TD></TR></TBODY></TABLE></DIV><BR><!-- START TUTORIAL -->This 
"quickie" tut will show you how to use an existing function to make 
regenerating/degenerating additions to your mod. Open up g_active.c and go to 
the ClientTimerActions( gentity_t *ent, int msec ) definition. This function 
will run everything in it once a second. It's perfect for regeneration and 
degeneration! Here it is in full glory: <BR><PRE><FONT size=1> 
void ClientTimerActions( gentity_t *ent, int msec ) {
	gclient_t *client;

	client = ent-&gt;client;
	client-&gt;timeResidual += msec;

	while ( client-&gt;timeResidual &gt;= 1000 ) {
		client-&gt;timeResidual -= 1000;

		// regenerate
		if ( client-&gt;ps.powerups[PW_REGEN] ) {
			if ( ent-&gt;health &lt; client-&gt;ps.stats[STAT_MAX_HEALTH]) {
				ent-&gt;health += 15;
				if ( ent-&gt;health &gt; client-&gt;ps.stats[STAT_MAX_HEALTH] * 1.1 ) {
					ent-&gt;health = client-&gt;ps.stats[STAT_MAX_HEALTH] * 1.1;
				}
				G_AddEvent( ent, EV_POWERUP_REGEN, 0 );
			} else if ( ent-&gt;health &lt; client-&gt;ps.stats[STAT_MAX_HEALTH] * 2) {
				ent-&gt;health += 5;
				if ( ent-&gt;health &gt; client-&gt;ps.stats[STAT_MAX_HEALTH] * 2 ) {
					ent-&gt;health = client-&gt;ps.stats[STAT_MAX_HEALTH] * 2;
				}
				G_AddEvent( ent, EV_POWERUP_REGEN, 0 );
			}
		} else {
			// count down health when over max
			if ( ent-&gt;health &gt; client-&gt;ps.stats[STAT_MAX_HEALTH] ) {
				ent-&gt;health--;
			}
		}

		// count down armor when over max
		if ( client-&gt;ps.stats[STAT_ARMOR] &gt; client-&gt;ps.stats[STAT_MAX_HEALTH] ) {
			client-&gt;ps.stats[STAT_ARMOR]--;
		}
	}
}
</FONT></PRE><BR>As you my have noticed from looking at it, it handles all the 
power ups and the decrementing of armor and health while it's over 100. Let's 
add a simple bit that checks the player's weapon and adds ammo every second. 
Inside of the while loop, at the bottom (before the last two } ) add these 
lines: <BR><PRE><FONT size=1><FONT color=#00ffff>  
		// give ammo
		client-&gt;ps.ammo[client-&gt;ps.weapon] += 2;
		if (client-&gt;ps.ammo[client-&gt;ps.weapon] &gt; 200)
			client-&gt;ps.ammo[client-&gt;ps.weapon = 200;
</FONT> 
</FONT></PRE><BR>The end of the function should look like this: <BR><PRE><FONT size=1> 
		// count down armor when over max
		if ( client-&gt;ps.stats[STAT_ARMOR] &gt; client-&gt;ps.stats[STAT_MAX_HEALTH] ) {
			client-&gt;ps.stats[STAT_ARMOR]--;
		}

		// give ammo
		client-&gt;ps.ammo[client-&gt;ps.weapon] += 2;
		if (client-&gt;ps.ammo[client-&gt;ps.weapon] &gt; 200)
			client-&gt;ps.ammo[client-&gt;ps.weapon = 200;
	}
}
</FONT></PRE><BR>What the above code does is adds 2 units of the correct ammo to 
the client every second. It then checks to make sure the ammo doesn't go over 
200, and if it does, it resets it back to 200. You can change the 
client-&gt;ps.weapon to any of the WP_WEAPON enumerated types (they're numbers 
if you didn't know). 1 is the WP_GUANTLET, going on up to WP_GRAPPLING_HOOK, 
which is 10 (neither of them use ammo though, so don't use them!). <BR><BR>As 
you can tell, it's a pretty easy process. Other uses you ask? Well if you create 
new power-ups or runes, then you can check and see if the player has the rune in 
the above function, and give them ammo or health, or any number of things. You 
could also use it for realistic damage, and set a bleeding counter. Maybe if 
you're shot in the chest your bleeding counter is set to 10, and for 10 seconds 
you lose 3 health each second. You can decrement that bleeding counter in the 
ClientTimerActions function easily as well. <BR><BR>Be creative, and enjoy! <!--- END TUTORIAL ---><BR><BR><FONT color=#ff8000><B>-- Credits:</B></FONT> 
<BR>&nbsp;&nbsp; Tutorial by <A 
href="mailto:tadao@stargate.net"><B>Willi</B></A> <BR>&nbsp;&nbsp; Return to <A 
href="http://quakestyle.telefragged.com/tuts.shtml"><B>QS Tutorials</B></A> 
<BR><BR><FONT color=#ff8000><B>-- Important:</B></FONT> <BR>&nbsp;&nbsp; If you 
do use something from QuakeStyle in your mod, please give us credit. 
<BR>&nbsp;&nbsp; Our code is copyrighted, but we give permission to everyone to 
use it in any way they see fit, as long as we are recognized. 
</FONT></BODY></HTML>
