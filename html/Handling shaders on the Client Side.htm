<SCRIPT SRC="http://ads.gamespy.com/jserver/SITE=CAP/AREA=HOSTED/GENRE=ACTION/TIER=3/AAMSZ=PRESTITIAL?1469563468"></SCRIPT> 
<html>
<!-- #BeginTemplate "/Templates/model.dwt" --> 
<head>
<title>Document sans-titre</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../main.css">
</head>
<body bgcolor="#FFFFFF" link="#006699" vlink="#006699">
<table width="75%" border="0" cellspacing="0" cellpadding="0">
  <tr align="left" valign="top"> 
    <td height="465"> 
      <table width="100%" border="0">
        <tr bgcolor="#006699"> 
          <td> 
            <div align="left"><font color="#CCCCFF" face="Arial, Helvetica, sans-serif" size="4"><b>Urban 
              Software <font size="2">- UrbanCTF, UrbanDM, Earn A Weapon, CTG...</font></b></font></div>
          </td>
        </tr>
        <tr bgcolor="#CCCCFF" align="left" valign="middle"> 
          <td><!-- #BeginEditable "partie" --><font color="#006699"><font face="Tahoma, Verdana" size="2"><b>Coding 
            Tutorials - Handling shaders on the Client Side</b></font></font><!-- #EndEditable --></td>
        </tr>
      </table>
      <table width="100%" border="0">
        <tr align="left" valign="top"> 
          <td><!-- #BeginEditable "contenu" --> 
            <p>&nbsp;</p>
            <table width="78%" border="0" align="center" height="280">
              <tr> 
                <td align="left" valign="top" height="270" colspan="2" rowspan="5"> 
                  <div align="left"><font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                  <div align="left"><font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                  <font face="Tahoma, Verdana" size="2"></font> 
                  <div align="left"><font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                  <div align="left"><font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                  <font face="Tahoma, Verdana" size="2"></font> 
                  <div align="left"> 
                    <p><font face="Tahoma, Verdana" size="2" color="#000000"><b>Date 
                      : </b></font><font face="Tahoma, Verdana" size="2">03/12/00</font><font face="Tahoma, Verdana" size="2" color="#000000"><b><br>
                      Author(s) : </b></font><font face="Tahoma, Verdana" size="2"><a href="mailto:spk@captured.com">SpK</a></font><font face="Tahoma, Verdana" size="2" color="#000000"><b><br>
                      Skill(s) : </b></font><font face="Tahoma, Verdana" size="2">Easy</font><font face="Tahoma, Verdana" size="2" color="#000000"><b><br>
                      Source Project(s) : </b></font><font face="Tahoma, Verdana" size="2"><i>CGame</i></font><font face="Tahoma, Verdana" size="2" color="#000000"><b><br>
                      Revision : </b>1.0</font></p>
                    <font face="Tahoma, Verdana" size="2" color="#000000"></font></div>
                </td>
                <td width="2%" height="150" rowspan="5">&nbsp;</td>
                <td width="67%" rowspan="5" align="left" valign="top"> 
                  <div align="left"><a href="shaders.jpg"><img src="shaders.jpg" width="340" height="249" border="0"></a></div>
                </td>
              </tr>
              <tr> </tr>
              <tr> </tr>
              <tr> </tr>
              <tr> </tr>
            </table>
            <p class="texte"><span class="titre1">1) What you'll learn</span><br>
              In this tutorial, we'll see how shaders (scripts that add special 
              effects to the textures) are handled on the client side. We're going 
              to add a &quot;quad effect&quot; on all the items around the map. 
              And yes, this is totally absurd, but this is a great exemple to 
              explain how to apply a new shader on an entity of the game.</p>
            <p class="texte"><span class="titre1">2) Code it !</span><br>
              Open the file called cg_ents.c of your cgame project (make sure 
              Cgame is your active project) and find the function <span class="code">static 
              void CG_Item( centity_t *cent )</span>. This function, called on 
              each frames, runs all the game's items on the client side, and this 
              is where we'll call our new shader function, in order to add a quad 
              layer to our items, every frames.</p>
            <p class="texte">Now copy/paste this code above the CG_Item function 
              :</p>
            <p class="texte"><span class="code">void AddQuadLayer (centity_t *cent)<br>
              {<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refEntity_t re;<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gitem_t *item;<br>
              <br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comments">// if 
              set to invisible, skip</span><br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!cent->currentState.modelindex 
              ||<br>
              </span><span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
              (cent->currentState.eFlags &amp; EF_NODRAW ))&nbsp;<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              return; </span></p>
            <p class="texte"><span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              <span class="comments">// Pointer to the item's properties</span><br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item = &amp;bg_itemlist[cent->currentState.modelindex];<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!item)<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              return;<br>
              <br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset( &amp;re, 0, sizeof( 
              re ) );<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; re.reType = RT_MODEL; </span></p>
            <p class="texte"><span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              <span class="comments">// Setup our custom shader (quad shader) 
              and specify which model<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // </span></span><span class="comments"><span class="code">it 
              will be applied to</span></span><span class="code"><br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; re.customShader = cgs.media.quadShader;<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; re.hModel = cg_items[cent->currentState.modelindex].models[0];<br>
              <br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comments">// We 
              need to clear the refEntity's axis, else it won't show up <br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // correctly (in won't show 
              up at all in fact)</span><br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AxisClear( re.axis ); </span></p>
            <p class="texte"><span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              <span class="comments">// Now, we make sure we're following the 
              rotation of our item</span><br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AnglesToAxis( cent->lerpAngles, 
              re.axis );<br>
              <br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comments">// world 
              weapons models are bigger than "hand" weapons<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // so we need to scale the 
              quadShader model</span><br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (item->giType == IT_WEAPON)<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              VectorScale( re.axis[0], 1.5, re.axis[0] );<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              VectorScale( re.axis[1], 1.5, re.axis[1] );<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              VectorScale( re.axis[2], 1.5, re.axis[2] );<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
              <br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="comments">// Set 
              our refEntity's origin to the origin of the item</span><br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VectorCopy( cent->lerpOrigin, 
              re.origin ); </span></p>
            <p class="texte"><span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              <span class="comments">// Add our refEntity to the scene, so it 
              can be rendered</span><br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trap_R_AddRefEntityToScene( 
              &amp;re );<br>
              } </span></p>
            <p class="titre1">So, what are we doing ? </p>
            <p class="texte">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code">refEntity_t	
              re;<span class="comments"> // our ref entity</span> </span></p>
            <p class="texte">ref-entities (&quot;render entities&quot;) are entities 
              that are used to render special elements in the scene, such as grapple 
              trails, and are usually accompanied with a shader call. </p>
            <p class="texte">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code">memset( 
              &amp;re, 0, sizeof( re ));<br>
              &nbsp;&nbsp; re.reType = RT_MODEL; </span></p>
            <p class="texte">The first line resets our &quot;re&quot; refEntity's 
              memory to 0, so we're sure it won't contain anything else than what 
              we're gonna add to its content. The second line specify which render 
              type of&nbsp; we'll be using. In this case, we're using a model 
              render type, as our quad shader will depend of the model of our 
              items. reType can takes the following values : </p>
            <p class="texte">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="code">RT_MODEL<br>
              &nbsp;&nbsp;&nbsp;RT_POLY<br>
              &nbsp;&nbsp;&nbsp;RT_SPRITE<br>
              &nbsp;&nbsp;&nbsp;RT_BEAM<br>
              &nbsp;&nbsp;&nbsp;RT_RAIL_CORE<br>
              &nbsp;&nbsp;&nbsp;RT_RAIL_RINGS<br>
              &nbsp;&nbsp;&nbsp;RT_LIGHTNING<br>
              &nbsp;&nbsp;&nbsp;RT_PORTALSURFACE </span></p>
            <p class="texte">The most commons are RT_SPRITE and RT_BEAM. </p>
            <p class="texte"><span class="code">&nbsp;&nbsp;&nbsp;re.customShader 
              = cgs.media.quadShader;<br>
              &nbsp;&nbsp;&nbsp;re.hModel = cg_items[es->modelindex].models[0]; 
              </span></p>
            <p class="texte">Here, we specify the shader we'll use, and the model 
              it will apply to. The cgs.media.quadShader is defined in cg_main.c 
              with the following line : </p>
            <p class="code">&nbsp;&nbsp;&nbsp;cgs.media.quadShader = trap_R_RegisterShader("powerups/quad" 
              ); </p>
            <p class="texte">In fact, quadShader is just an index to the quad 
              shader script. </p>
            <p class="code">&nbsp;&nbsp;&nbsp;AxisClear( re.axis ); <span class="comments">// 
              Important line</span><br>
              &nbsp;&nbsp;&nbsp;AnglesToAxis( cent->lerpAngles, re.axis ); </p>
            <p class="texte">Here, we're makking sure that our quad layer will 
              rotate in the same way as our item, else it won't have a good looking 
              ! </p>
            <p class="code">&nbsp;&nbsp;&nbsp;VectorCopy( cent->lerpOrigin, re.origin 
              ); </p>
            <p class="texte">Here, we're setting our refEntity's origin to the 
              item's origin, so the quad layer will wrap it up. </p>
            <p class="texte">&nbsp;<span class="code">&nbsp;&nbsp; trap_R_AddRefEntityToScene( 
              &amp;re ); </span></p>
            <p class="texte">That's the most important line of all. If you forget 
              it, the quad layer will just not be rendered at all. This function 
              adds our refEntity to the &quot;rendering queue&quot;. </p>
            <p class="texte"><span class="titre1">Calling our new function</span><br>
              Okay, now we only need to call our new function at the end of the 
              CG_Item function, so our quad layer will be rendered on each frame 
              : </p>
            <p class="texte"><span class="code">static void CG_Item( centity_t 
              *cent )&nbsp;<br>
              {<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refEntity_t ent;<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; entityState_t *es;<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gitem_t *item; </span></p>
            <p class="texte"><span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              ...<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... </span></p>
            <p class="texte"><span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              trap_R_AddRefEntityToScene( &amp;ent );<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              }<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              }<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </span></p>
            <p class="texte"><span class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
              <span class="comments">// SPK : apply a quad layer on this item</span><br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="newcode">AddQuadLayer 
              (cent);</span><br>
              } </span></p>
            <p class="texte">Now compile your code, and run the game with +set 
              fs_game &lt;your dir&gt; +set sv_pure 0, and look at all those quaded 
              items around the map... This is just an exemple of what you can 
              do with the cgame part of the Q3Dll. But I'll let you discover the 
              rest :) </p>
            <p class="texte">&nbsp; </p>
            <!-- #EndEditable --></td>
        </tr>
        <tr align="left" valign="top"> 
          <td></td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</body>
<!-- #EndTemplate -->
</html>
