<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0063)http://www.planetquake.com/code3arena/tutorials/tutorial9.shtml -->
<HTML><HEAD><TITLE>Code3Arena</TITLE>
<META content="text/html; charset=iso-8859-1" http-equiv=Content-Type>
<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY background=servercode_files/bg.gif link=#c05f00 text=white vLink=#d16545><!-- BEGIN BANNER AD TABLE -->
<TABLE align=center background=servercode_files/bg.gif border=0 cellPadding=5 
cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD align=middle bgColor=#000000 height=60 vAlign=top width=468>
      <CENTER><A 
      href="http://adclick.gamespy.com/cgi-bin/adclick.exe/CID=00001782346ae9d200000000/site=PQ/AAMSZ=IAB_FULL_BANNER/AREA=ARTICLES" 
      target=_top><IMG alt="Click for more information!" border=0 
      src="servercode_files/gspy_portal_banner4.gif"></A></CENTER></TD></TR></TBODY></TABLE><!-- END BANNER AD TABLE --><BR><!-- BEGIN LOGO IMAGE TABLE -->
<TABLE align=center bgColor=#000000 border=1 cellPadding=0 cellSpacing=0 
width="100%">
  <TBODY>
  <TR>
    <TD align=middle><IMG alt=Code3Arena border=0 height=137 
      src="servercode_files/logo.gif" width=500> </TD></TR></TBODY></TABLE><!-- END LOGO IMAGE TABLE -->
<P><!-- BEGIN TOP HEIRARCHY -->
<TABLE bgColor=#000000 border=0 cellPadding=0 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD><IMG src="servercode_files/ouricon.gif"></TD>
    <TD bgColor=#000000 width="100%"><FONT color=#eeeeee face="Verdana, Arial" 
      size=2><B><A href="http://www.planetquake.com/">PlanetQuake</A> | <A 
      href="http://www.planetquake.com/code3arena">Code3Arena</A> | <A 
      href="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> | <A 
      href="http://www.planetquake.com/code3arena/tutorials/tutorial8.shtml">&lt;&lt; 
      Prev</A> | Tutorial9 | <A 
      href="http://www.planetquake.com/code3arena/tutorials/tutorial10.shtml">Next 
      &gt;&gt;</A> </B></FONT></TD></TR></TBODY></TABLE>
<P><!-- END TOP HEIRARCHY --><!-- BEGIN MAIN TABLE HERE-->
<TABLE align=center bgColor=#4b0202 border=0 cellPadding=0 cellSpacing=0 
width="100%">
  <TBODY>
  <TR><!-- BEGIN LEFT NAVBAR MENU *** REMOVED *** --><!-- BEGIN DIVIDER *** REMOVED *** --><!-- MAIN TEXT AREA -->
    <TD bgColor=#000000 vAlign=top>
      <TABLE bgColor=#000000 border=0 cellPadding=15 cellSpacing=10 width="100%" 
      valign="top">
        <TBODY>
        <TR>
          <TD vAlign=top><FONT color=#eeeeee face="Verdana, Arial" size=2>
            <CENTER><FONT color=#c05f00 size=5><B>TUTORIAL 9 - Saving your 
            favourite server</B> </FONT><BR>by <A 
            href="mailto:quake3@eudoxus.demon.co.uk"><FONT 
            color=#ff0000>H</FONT><FONT color=#ffff00>y</FONT><FONT 
            color=#cc33cc>p</FONT><FONT color=#3333ff>o</FONT><FONT 
            color=#ffffff>Thermia</FONT></A></CENTER>
            <P>
            <P>This tutorial examines the server browser built into Quake3. As 
            it exists at the moment, you have to connect to a server before you 
            can add it to your list of favourites. Not very useful if the server 
            is full. 
            <P>We'll add a button to the browser that allows a server to be 
            added to the favourites list - easily and quickly. Along the way 
            we'll also fix a bug in the source code. <BR>&nbsp; <FONT 
            color=#e07f44>
            <H4>1. Understanding the server browser</H4></FONT>The server 
            browser is accessed by selecting a Multiplayer game from the main 
            menu. You can browse servers running on the Internet, MPlayer, 
            locally, or from your list of favourites. Servers that have been 
            queried are displayed in a listbox for selection. 
            <P>All of the server code is contained in the source file 
            ui/ui_servers2.c. Lets open it up and take a look. <BR>&nbsp; <FONT 
            color=#e07f44>
            <H4>1.1. Where to start</H4></FONT>The core data structure is 
            arenaservers_t. It carries the data required for each control, 
            intermediate data used while servers are being pinged, and the 
            results that are to be displayed in the browser. <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>typedef struct {
   menuframework_s   menu;

   menutext_s        banner;

   menulist_s        master;
   menulist_s        gametype;
   menulist_s        sortkey;
   menuradiobutton_s showfull;
   menuradiobutton_s showempty;

   menulist_s        list;
   menubitmap_s      mappic;
   menubitmap_s      arrows;
   menubitmap_s      up;
   menubitmap_s      down;
   menutext_s        status;
   menutext_s        statusbar;

   menubitmap_s      remove;
   menubitmap_s      back;
   menubitmap_s      refresh;
   menubitmap_s      specify;
   menubitmap_s      create;
   menubitmap_s      go;

   pinglist_t        pinglist[MAX_PINGREQUESTS];
   table_t           table[MAX_LISTBOXITEMS];
   char*             items[MAX_LISTBOXITEMS];
   int               numqueriedservers;
   int               *numservers;
   servernode_t      *serverlist;
   int               currentping;
   qboolean          refreshservers;
   int               nextpingtime;
   int               maxservers;
   int               refreshtime;
   char              favoriteaddresses[MAX_FAVORITESERVERS][MAX_ADDRESSLENGTH];
   int               numfavoriteaddresses;
} arenaservers_t;

static arenaservers_t   g_arenaservers;
</PRE></FONT>
            <P>Of immediate interest to us is the list of favourite servers 
            (favoriteaddresses[][] and numfavoriteaddresses). This data is 
            loaded from q3config.cfg by the function 
            ArenaServers_LoadFavorites() when the browser controls are 
            initialized in ArenaServers_MenuInit(). Any previously cached data 
            is used - there might have been changes to the configuration file 
            from elsewhere. <BR>&nbsp; <FONT color=#e07f44>
            <H4>1.2. Lists and lists of servers</H4></FONT>We'll also need to 
            know how the lists of server information are stored, and how they're 
            built for display in the browser listbox. <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>static servernode_t g_globalserverlist[MAX_GLOBALSERVERS];
static int g_numglobalservers;
static servernode_t g_localserverlist[MAX_LOCALSERVERS];
static int g_numlocalservers;
static servernode_t g_favoriteserverlist[MAX_FAVORITESERVERS];
static int g_numfavoriteservers;
static servernode_t g_mplayerserverlist[MAX_GLOBALSERVERS];
static int g_nummplayerservers;
</PRE></FONT>
            <P>Each of these arrays carries the information on the the servers 
            successfully pinged, and there is an associated variable to indicate 
            how full they are. When you change the server type the aliases 
            serverlist and numservers in g_arenaservers are updated to the 
            appropriate array and its' size. This means generic functions can be 
            written that automatically access the correct data list. The 
            handover is done in <FONT color=#ffffcc face="Verdana, Arial" 
size=3><PRE>void ArenaServers_SetType(int type)
</PRE></FONT>Notice also that the Delete button - only visible when 
            looking at favourite servers - is enabled and disabled in this 
            function. <BR>&nbsp; <FONT color=#e07f44>
            <H4>1.3. Other interesting stuff</H4></FONT>The update to the list 
            of servers displayed in the browser listbox is done by <FONT 
            color=#ffffcc face="Verdana, Arial" size=3><PRE>static void ArenaServers_UpdateMenu(void)
</PRE></FONT>It does all of the sorting and filtering, storing the 
            results in g_arenaservers.table[] for display. It also enables and 
            disables controls when the server refresh is starting or has 
            finished. 
            <P>Finally, when an event occurs in the browser - a button is pushed 
            for example - then an event message is sent to the message handler: 
            <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>static void ArenaServers_Event( void* ptr, int event )
</PRE></FONT><BR><FONT color=#e07f44>
            <H4>2. Designing the modification</H4></FONT>We need to update the 
            favourites list by adding server details from the other lists. A 
            "Save" control is needed to do this. In fact, since we don't need to 
            add something on the favourites list back to itself, we can place 
            the control as a button in the same place as the existing Delete 
            button. 
            <P>The modifications we need to make are: 
            <UL>
              <LI>Cache the button graphics, 
              <LI>add the "Save" button to the display, 
              <LI>ensure the save button behaves properly, 
              <LI>save the highlighted server to the list of favourites, 
              <LI>tie the button pressed event to the save. </LI></UL>Let's get to 
            it... <BR>&nbsp; <FONT color=#e07f44>
            <H4>3. Coding the changes</H4></FONT>
            <P>These coding changes assume a "virgin" installation of 
            ui/ui_servers2.c. All modifications are to this file only. 
            <BR>&nbsp; <FONT color=#e07f44>
            <H4>3.1. Adding the button</H4></FONT>
            <P>We'll start by getting the button graphics set up. The button 
            we're going to use is already available to us in the PAK0.PK3 file, 
            so we just need to define an alias near the start of the code, and a 
            unique identifier: <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>#define ART_REMOVE0 "menu/art/delete_0"
#define ART_REMOVE1 "menu/art/delete_1"
<FONT color=#ff6060>#define ART_SAVE0   "menu/art/save_0"
#define ART_SAVE1   "menu/art/save_1"</FONT>
</PRE></FONT>
            <P>The two values save_0 and save_1 are the art for normal and 
            selected states respectively. 
            <P>The identifier follows on in sequence to the existing controls: 
            <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>#define ID_CONNECT 22
#define ID_REMOVE 23
<FONT color=#ff6060>#define ID_SAVE 24</FONT>
</PRE></FONT>
            <P>The graphics then need to be loaded for display: <FONT 
            color=#ffffcc face="Verdana, Arial" size=3><PRE>/*
=================
ArenaServers_Cache
=================
*/
void ArenaServers_Cache( void ) {
<FONT color=#ff6060>   trap_R_RegisterShaderNoMip( ART_SAVE0);
   trap_R_RegisterShaderNoMip( ART_SAVE1);</FONT>
   trap_R_RegisterShaderNoMip( ART_BACK0 );
   trap_R_RegisterShaderNoMip( ART_BACK1 );
</PRE></FONT>
            <P>Adding the save button to the display isn't too difficult, first 
            we add the button details to arenaservers_t: <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>typedef struct {
   menuframework_s    menu;

   menutext_s         banner;

   menulist_s         master;
   menulist_s         gametype;
   menulist_s         sortkey;
   menuradiobutton_s  showfull;
   menuradiobutton_s  showempty;

   menulist_s         list;
<FONT color=#ff6060>   menubitmap_s       save;</FONT>
   menubitmap_s       mappic;
</PRE></FONT>
            <P>Then we copy the code for the existing delete button and make 
            make it refer to our new button: <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>/*
=================
ArenaServers_MenuInit
=================
*/
g_arenaservers.remove.width = 128;
g_arenaservers.remove.height = 64;
g_arenaservers.remove.focuspic = ART_REMOVE1;

<FONT color=#ff6060>g_arenaservers.save.generic.type = MTYPE_BITMAP;
g_arenaservers.save.generic.name = ART_SAVE0;
g_arenaservers.save.generic.flags = QMF_LEFT_JUSTIFY|QMF_PULSEIFFOCUS;
g_arenaservers.save.generic.callback = ArenaServers_Event;
g_arenaservers.save.generic.id = ID_SAVE;
g_arenaservers.save.generic.x = 440;
g_arenaservers.save.generic.y = 88;
g_arenaservers.save.width = 128;
g_arenaservers.save.height = 64;
g_arenaservers.save.focuspic = ART_SAVE1;</FONT>
</PRE></FONT>
            <P>We only had to change the generic.name, generic.id and focuspic. 
            The position and default flags stay the same. 
            <P>The button then needs to be registered for display. Again in 
            ArenaServers_MenuInit(): <FONT color=#ffffcc face="Verdana, Arial" 
            size=3><PRE>Menu_AddItem( &amp;g_arenaservers.menu, (void*) &amp;g_arenaservers.remove);
<FONT color=#ff6060>Menu_AddItem( &amp;g_arenaservers.menu, (void*) &amp;g_arenaservers.save);</FONT>
Menu_AddItem( &amp;g_arenaservers.menu, (void*) &amp;g_arenaservers.back);
</PRE></FONT><BR><FONT color=#e07f44>
            <H4>3.2. Setting the button behaviour</H4></FONT>
            <P>The save button only needs to be active when the server list is 
            no longer refreshing, and visible when the delete button isn't. We 
            make three changes to the state of the button in this function: 
            <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>/*
=================
ArenaServers_UpdateMenu
=================
*/

// all servers pinged - enable controls
<FONT color=#ff6060>g_arenaservers.save.generic.flags &amp;= ~QMF_GRAYED;</FONT>
g_arenaservers.master.generic.flags &amp;= ~QMF_GRAYED;
</PRE></FONT>
            <P>and: <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>// disable controls during refresh
<FONT color=#ff6060>g_arenaservers.save.generic.flags |= QMF_GRAYED;</FONT>
g_arenaservers.master.generic.flags |= QMF_GRAYED;
</PRE></FONT>
            <P>and: <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>// end of refresh - set control state
<FONT color=#ff6060>g_arenaservers.save.generic.flags |= QMF_GRAYED;</FONT>
g_arenaservers.master.generic.flags &amp;= ~QMF_GRAYED;
</PRE></FONT>
            <P>We then handle the hiding and showing of the button, this time in 
            four places in this function: <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>/*
=================
ArenaServers_SetType
=================
*/

case AS_LOCAL:
<FONT color=#ff6060>   g_arenaservers.save.generic.flags &amp;= ~(QMF_INACTIVE|QMF_HIDDEN);</FONT>
   g_arenaservers.remove.generic.flags |= (QMF_INACTIVE|QMF_HIDDEN);
</PRE></FONT>
            <P>and: <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>case AS_GLOBAL:
<FONT color=#ff6060>   g_arenaservers.save.generic.flags &amp;= ~(QMF_INACTIVE|QMF_HIDDEN);</FONT>
   g_arenaservers.remove.generic.flags |= (QMF_INACTIVE|QMF_HIDDEN);
</PRE></FONT>
            <P>and: <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>case AS_FAVORITES:
<FONT color=#ff6060>   g_arenaservers.save.generic.flags |= (QMF_INACTIVE|QMF_HIDDEN);</FONT>
   g_arenaservers.remove.generic.flags &amp;= ~(QMF_INACTIVE|QMF_HIDDEN);
</PRE></FONT>
            <P>and the fourth change: <FONT color=#ffffcc face="Verdana, Arial" 
            size=3><PRE>case AS_MPLAYER:
<FONT color=#ff6060>   g_arenaservers.save.generic.flags &amp;= ~(QMF_INACTIVE|QMF_HIDDEN);</FONT>
   g_arenaservers.remove.generic.flags |= (QMF_INACTIVE|QMF_HIDDEN);
</PRE></FONT>
            <P>If you test and run the code at this stage you should find that 
            the button is present and behaves, but has no functionality. 
            <BR>&nbsp; <FONT color=#e07f44>
            <H4>3.3. Implementing the button function</H4></FONT>
            <P>Our final two code changes link the events generated by the 
            button to the actual addition of the current server to the 
            favourites. 
            <P>We first modify the event handler to include a response to our 
            button: <FONT color=#ffffcc face="Verdana, Arial" size=3><PRE>/*
=================
ArenaServers_Event
=================
*/

case ID_REMOVE:
   ArenaServers_Remove();
   ArenaServers_UpdateMenu();
   break;

<FONT color=#ff6060>case ID_SAVE:
   ArenaServers_AddToFavorites();
   ArenaServers_SaveChanges();
   break;</FONT>
</PRE></FONT>
            <P>and finally add the new function that handles the event. Note 
            that, as a static function, we can avoid using a declaration for it 
            if we place the definition before it's first use. I placed it just 
            before the first function ArenaServers_MaxPing(). 
            <P>Notice that once we have adjusted the favourites list we save it 
            immediately to q3config.cfg file using ArenaServers_SaveChanges(). 
            We don't need to update the menu because we've been modifying a list 
            that isn't displayed at the moment. The behaviour of the button 
            outlined earlier guarantees this. <FONT color=#ff6060 
            face="Verdana, Arial" size=3><PRE>/*
=================
ArenaServers_AddToFavorites
=================
*/
static void ArenaServers_AddToFavorites(void)
{
   servernode_t* servernodeptr;
   int i;

   // check favourite server list isn't full
   if (g_numfavoriteservers == MAX_FAVORITESERVERS)
      return;

   // check we have a server list available
   if (!g_arenaservers.list.numitems)
      return;

   // check the server isn't on the favourites list already
   servernodeptr=g_arenaservers.table[g_arenaservers.list.curvalue].servernode;
   for (i=0; i &lt; g_numfavoriteservers; i++)
   if (!Q_stricmp(g_arenaservers.favoriteaddresses[i],servernodeptr-&gt;adrstr))
      return;

   // we already have a responsive server, no further sanity checks required
   strcpy(g_arenaservers.favoriteaddresses[g_numfavoriteservers],
      servernodeptr-&gt;adrstr);

   // copy over server details
   memcpy( &amp;g_favoriteserverlist[g_numfavoriteservers],
      servernodeptr,sizeof(servernode_t));

   g_numfavoriteservers++;
   g_arenaservers.numfavoriteaddresses = g_numfavoriteservers;
}
</PRE></FONT>
            <P>The function starts by performing some checks that the copying to 
            the favourite list can be done. Details on the currently selected 
            server node are stored in a pointer for easy access, and we check 
            for duplicates on the list of favourites. As the server is already 
            in the current display list we know it has recent details for us to 
            copy over. 
            <P>We have to update both the list of favourite servers stored in 
            g_arenaservers, and the array outside g_arenaservers that holds a 
            copy of the server details (if the server has been recently 
            browsed). 
            <P>Notice that there are no variables being changed that refer to 
            the current list being displayed. 
            <P>That's (almost) it! <BR>&nbsp; <FONT color=#e07f44>
            <H4>4. Fixing a bug in the source code</H4></FONT>Nobody's perfect. 
            If you've played around with the browser you might have noticed 
            there's a small problem in the code. 
            <P>Sometimes, after a favourite server has been deleted, you lose 
            another server and get a "phantom" one instead. It doesn't respond 
            to a refresh either. If you make a note of the values in 
            q3config.cfg before and after you might see that some of the IP 
            addresses are being corrupted. 
            <P>Lets fix this with a little detective work. 
            <P>The problem appears to be caused by deleting a server. It must be 
            in the values that are saved to q3config.cfg, and a quick look at 
            ArenaServers_SaveChanges() shows it must be tampering in 
            g_arenaservers.favoriteaddresses[]. 
            <P>The first place to start is in the function that does this work. 
            It's ArenaServers_Remove(). Here are the lines that modify 
            g_arenaservers.favouriteaddresses[]: <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>// delete address from master list
if (i &lt;= g_arenaservers.numfavoriteaddresses-1)
{
   if (i &lt; g_arenaservers.numfavoriteaddresses-1)
   {
      // shift items up
      memcpy( &amp;g_arenaservers.favoriteaddresses[i],
      &amp;g_arenaservers.favoriteaddresses[i+1],
      (g_arenaservers.numfavoriteaddresses - i - 1)*
      sizeof(MAX_ADDRESSLENGTH));
   }
   g_arenaservers.numfavoriteaddresses--;
}
</PRE></FONT>
            <P>Have you seen it? 
            <P>The last argument of the memcpy() function is the amount of 
            memory to move. As each address is stored in an array of size 
            MAX_ADDRESSLENGTH then using sizeof() will move too little memory. 
            <P>Adjust the final argument to this: <FONT color=#ffffcc 
            face="Verdana, Arial" size=3><PRE>(g_arenaservers.numfavoriteaddresses - i - 1)*<FONT color=#ff6060>MAX_ADDRESSLENGTH</FONT>
</PRE></FONT>
            <P>Done. Your server browser will now be working better than ever 
            before! 
            <P></P></FONT></TD></TR></TBODY></TABLE><!-- END MAIN TABLE --></TD></TR></TBODY></TABLE>
<P><!-- BEGIN BOTTOM HEIRARCHY -->
<TABLE bgColor=#000000 border=0 cellPadding=0 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD><IMG src="servercode_files/ouricon.gif"></TD>
    <TD bgColor=#000000 width="100%"><FONT color=#eeeeee face="Verdana, Arial" 
      size=2><B><A href="http://www.planetquake.com/">PlanetQuake</A> | <A 
      href="http://www.planetquake.com/code3arena">Code3Arena</A> | <A 
      href="http://www.planetquake.com/code3arena/tutorials">Tutorials</A> | <A 
      href="http://www.planetquake.com/code3arena/tutorials/tutorial8.shtml">&lt;&lt; 
      Prev</A> | Tutorial9 | <A 
      href="http://www.planetquake.com/code3arena/tutorials/tutorial10.shtml">Next 
      &gt;&gt;</A> </B></FONT></TD></TR></TBODY></TABLE>
<P><!-- END BOTTOM HEIRARCHY --></P></BODY></HTML>
