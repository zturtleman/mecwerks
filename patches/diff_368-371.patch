Index: make-macosx-ub.sh
===================================================================
--- make-macosx-ub.sh	(revision 368)
+++ make-macosx-ub.sh	(revision 371)
@@ -22,16 +22,16 @@
 	build/release-darwin-i386/$BASEDIR/cgamei386.dylib
 	build/release-darwin-x86_64/$BASEDIR/uix86_64.dylib
 	build/release-darwin-i386/$BASEDIR/uii386.dylib
-	build/release-darwin-x86_64/$BASEDIR/qagamex86_64.dylib
-	build/release-darwin-i386/$BASEDIR/qagamei386.dylib
+	build/release-darwin-x86_64/$BASEDIR/gamex86_64.dylib
+	build/release-darwin-i386/$BASEDIR/gamei386.dylib
 "
 MPACK_OBJ="
 	build/release-darwin-x86_64/$MPACKDIR/cgamex86_64.dylib
 	build/release-darwin-i386/$MPACKDIR/cgamei386.dylib
 	build/release-darwin-x86_64/$MPACKDIR/uix86_64.dylib
 	build/release-darwin-i386/$MPACKDIR/uii386.dylib
-	build/release-darwin-x86_64/$MPACKDIR/qagamex86_64.dylib
-	build/release-darwin-i386/$MPACKDIR/qagamei386.dylib
+	build/release-darwin-x86_64/$MPACKDIR/gamex86_64.dylib
+	build/release-darwin-i386/$MPACKDIR/gamei386.dylib
 "
 RENDER_OBJ="
 	build/release-darwin-x86_64/renderer_opengl1_smp_x86_64.dylib
Index: code/renderer/tr_font.c
===================================================================
--- code/renderer/tr_font.c	(revision 368)
+++ code/renderer/tr_font.c	(revision 371)
@@ -35,28 +35,19 @@
 // about 90% of the cgame presentation. A few areas of the CGAME were left uses the old 
 // fonts since the code is shared with standard Q3A.
 //
-// If you include this font rendering code in a commercial product you MUST include the
-// following somewhere with your product, see www.freetype.org for specifics or changes.
-// The Freetype code also uses some hinting techniques that MIGHT infringe on patents 
-// held by apple so be aware of that also.
-//
-// As of Q3A 1.25+ and Team Arena, we are shipping the game with the font rendering code
-// disabled. This removes any potential patent issues and it keeps us from having to 
+// Q3A 1.25+ and Team Arena were shipped with the font rendering code disabled, there was
+// a patent held by Apple at the time which FreeType MIGHT infringe on.
+// This removed any potential patent issues and it kept us (id Software) from having to 
 // distribute an actual TrueTrype font which is 1. expensive to do and 2. seems to require
-// an act of god to accomplish. 
+// an act of god to accomplish.
 //
 // What we did was pre-render the fonts using FreeType ( which is why we leave the FreeType
 // credit in the credits ) and then saved off the glyph data and then hand touched up the 
 // font bitmaps so they scale a bit better in GL.
 //
-// There are limitations in the way fonts are saved and reloaded in that it is based on 
-// point size and not name. So if you pre-render Helvetica in 18 point and Impact in 18 point
-// you will end up with a single 18 point data file and image set. Typically you will want to 
-// choose 3 sizes to best approximate the scaling you will be doing in the ui scripting system
-// 
 // In the UI Scripting code, a scale of 1.0 is equal to a 48 point font. In Team Arena, we
 // use three or four scales, most of them exactly equaling the specific rendered size. We 
-// rendered three sizes in Team Arena, 12, 16, and 20. 
+// rendered three sizes in Team Arena, 12, 16, and 20.
 //
 // To generate new font data you need to go through the following steps.
 // 1. delete the fontImage_x_xx.tga files and fontImage_xx.dat files from the fonts path.
@@ -66,7 +57,7 @@
 // 4. Exit the game and there will be three dat files and at least three tga files. The 
 //    tga's are in 256x256 pages so if it takes three images to render a 24 point font you 
 //    will end up with fontImage_0_24.tga through fontImage_2_24.tga
-// 5. In future runs of the game, the system looks for these images and data files when a s
+// 5. In future runs of the game, the system looks for these images and data files when a
 //    specific point sized font is rendered and loads them for use. 
 // 6. Because of the original beta nature of the FreeType code you will probably want to hand
 //    touch the font bitmaps.
@@ -94,7 +85,7 @@
 FT_Library ftLibrary = NULL;  
 #endif
 
-#define MAX_FONTS 6
+#define MAX_FONTS 12
 static int registeredFontCount = 0;
 static fontInfo_t registeredFont[MAX_FONTS];
 
@@ -138,9 +129,10 @@
 
 		glyphOut->height = height;
 		glyphOut->pitch = pitch;
-		glyphOut->top = (glyph->metrics.horiBearingY >> 6) + 1;
-		glyphOut->bottom = bottom;
 
+		glyphOut->top = _TRUNC(glyph->metrics.horiBearingY);// + 1;
+		glyphOut->left = _TRUNC(glyph->metrics.horiBearingX);// + 1;
+
 		return bit2;
 	} else {
 		ri.Printf(PRINT_ALL, "Non-outline fonts are not supported\n");
@@ -148,7 +140,7 @@
 	return NULL;
 }
 
-void WriteTGA (char *filename, byte *data, int width, int height) {
+static void WriteTGA (char *filename, byte *data, int width, int height) {
 	byte			*buffer;
 	int				i, c;
 	int             row;
@@ -196,7 +188,7 @@
 	ri.Free (buffer);
 }
 
-static glyphInfo_t *RE_ConstructGlyphInfo(unsigned char *imageOut, int *xOut, int *yOut, int *maxHeight, FT_Face face, const unsigned char c, qboolean calcHeight) {
+static glyphInfo_t *RE_ConstructGlyphInfo(int imageSize, unsigned char *imageOut, int *xOut, int *yOut, int *maxHeight, FT_Face face, const unsigned char c, qboolean calcHeight) {
 	int i;
 	static glyphInfo_t glyph;
 	unsigned char *src, *dst;
@@ -209,7 +201,7 @@
 		FT_Load_Glyph(face, FT_Get_Char_Index( face, c), FT_LOAD_DEFAULT );
 		bitmap = R_RenderGlyph(face->glyph, &glyph);
 		if (bitmap) {
-			glyph.xSkip = (face->glyph->metrics.horiAdvance >> 6) + 1;
+			glyph.xSkip = (face->glyph->metrics.horiAdvance >> 6); // + 1;
 		} else {
 			return &glyph;
 		}
@@ -237,12 +229,12 @@
 		scaled_height = glyph.height;
 
 		// we need to make sure we fit
-		if (*xOut + scaled_width + 1 >= 255) {
+		if (*xOut + scaled_width + 1 >= imageSize-1) {
 			*xOut = 0;
 			*yOut += *maxHeight + 1;
 		}
 
-		if (*yOut + *maxHeight + 1 >= 255) {
+		if (*yOut + *maxHeight + 1 >= imageSize-1) {
 			*yOut = -1;
 			*xOut = -1;
 			ri.Free(bitmap->buffer);
@@ -252,7 +244,7 @@
 
 
 		src = bitmap->buffer;
-		dst = imageOut + (*yOut * 256) + *xOut;
+		dst = imageOut + (*yOut * imageSize) + *xOut;
 
 		if (bitmap->pixel_mode == ft_pixel_mode_mono) {
 			for (i = 0; i < glyph.height; i++) {
@@ -277,13 +269,13 @@
 				}
 
 				src += glyph.pitch;
-				dst += 256;
+				dst += imageSize;
 			}
 		} else {
 			for (i = 0; i < glyph.height; i++) {
 				Com_Memcpy(dst, src, glyph.pitch);
 				src += glyph.pitch;
-				dst += 256;
+				dst += imageSize;
 			}
 		}
 
@@ -292,10 +284,10 @@
 
 		glyph.imageHeight = scaled_height;
 		glyph.imageWidth = scaled_width;
-		glyph.s = (float)*xOut / 256;
-		glyph.t = (float)*yOut / 256;
-		glyph.s2 = glyph.s + (float)scaled_width / 256;
-		glyph.t2 = glyph.t + (float)scaled_height / 256;
+		glyph.s = (float)*xOut / imageSize;
+		glyph.t = (float)*yOut / imageSize;
+		glyph.s2 = glyph.s + (float)scaled_width / imageSize;
+		glyph.t2 = glyph.t + (float)scaled_height / imageSize;
 
 		*xOut += scaled_width + 1;
 
@@ -338,57 +330,26 @@
 	return me.ffred;
 }
 
-void RE_RegisterFont(const char *fontName, int pointSize, fontInfo_t *font) {
-#ifdef BUILD_FREETYPE
-	FT_Face face;
-	int j, k, xOut, yOut, lastStart, imageNumber;
-	int scaledSize, newSize, maxHeight, left;
-	unsigned char *out, *imageBuff;
-	glyphInfo_t *glyph;
-	image_t *image;
-	qhandle_t h;
-	float max;
-	float dpi = 72;
-	float glyphScale;
-#endif
-	void *faceData;
-	int i, len;
-	char name[1024];
+/*
+===============
+R_LoadPreRenderedFont
+===============
+*/
+qboolean R_LoadPreRenderedFont( const char *datName, fontInfo_t *font ) {
+	void		*faceData;
+	int			len;
+	int			i;
 
-	if (!fontName) {
-		ri.Printf(PRINT_ALL, "RE_RegisterFont: called with empty name\n");
-		return;
-	}
-
-	if (pointSize <= 0) {
-		pointSize = 12;
-	}
-
-	// make sure the render thread is stopped
-	R_SyncRenderThread();
-
-	if (registeredFontCount >= MAX_FONTS) {
-		ri.Printf(PRINT_WARNING, "RE_RegisterFont: Too many fonts registered already.\n");
-		return;
-	}
-
-	Com_sprintf(name, sizeof(name), "fonts/fontImage_%i.dat",pointSize);
-	for (i = 0; i < registeredFontCount; i++) {
-		if (Q_stricmp(name, registeredFont[i].name) == 0) {
-			Com_Memcpy(font, &registeredFont[i], sizeof(fontInfo_t));
-			return;
-		}
-	}
-
-	len = ri.FS_ReadFile(name, NULL);
+	len = ri.FS_ReadFile(datName, NULL);
 	if (len == sizeof(fontInfo_t)) {
-		ri.FS_ReadFile(name, &faceData);
+		ri.FS_ReadFile(datName, &faceData);
 		fdOffset = 0;
 		fdFile = faceData;
 		for(i=0; i<GLYPHS_PER_FONT; i++) {
 			font->glyphs[i].height		= readInt();
 			font->glyphs[i].top			= readInt();
-			font->glyphs[i].bottom		= readInt();
+			readInt(); // read bottom. It wasn't used and has been replaced with left.
+			font->glyphs[i].left		= 0; // left wasn't saved in legacy fonts.
 			font->glyphs[i].pitch		= readInt();
 			font->glyphs[i].xSkip		= readInt();
 			font->glyphs[i].imageWidth	= readInt();
@@ -405,56 +366,95 @@
 		Com_Memcpy(font->name, &fdFile[fdOffset], MAX_QPATH);
 
 //		Com_Memcpy(font, faceData, sizeof(fontInfo_t));
-		Q_strncpyz(font->name, name, sizeof(font->name));
+		Q_strncpyz(font->name, datName, sizeof(font->name));
 		for (i = GLYPH_START; i < GLYPH_END; i++) {
 			font->glyphs[i].glyph = RE_RegisterShaderNoMip(font->glyphs[i].shaderName);
 		}
 		Com_Memcpy(&registeredFont[registeredFontCount++], font, sizeof(fontInfo_t));
-		return;
+		return qtrue;
 	}
 
-#ifndef BUILD_FREETYPE
-	ri.Printf(PRINT_WARNING, "RE_RegisterFont: FreeType code not available\n");
-#else
+	return qfalse;
+}
+
+#ifdef BUILD_FREETYPE
+/*
+===============
+R_LoadScalableFont
+===============
+*/
+qboolean R_LoadScalableFont( const char *name, int pointSize, fontInfo_t *font ) {
+	FT_Face		face;
+	int			j, k, xOut, yOut, lastStart, imageNumber;
+	int			scaledSize, newSize, maxHeight, left;
+	unsigned char *out, *imageBuff;
+	glyphInfo_t *glyph;
+	image_t		*image;
+	qhandle_t	h;
+	float		max;
+	int			imageSize;
+	float		dpi;
+	float		glyphScale;
+	void		*faceData;
+	int			i, len;
+	char		fontName[MAX_QPATH];
+	char		imageName[MAX_QPATH];
+	char		datName[MAX_QPATH];
+	char		strippedName[MAX_QPATH];
+
 	if (ftLibrary == NULL) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: FreeType not initialized.\n");
-		return;
+		return qfalse;
 	}
 
+	COM_StripExtension( name, strippedName, sizeof ( strippedName ) );
+
+	Q_strncpyz( fontName, name, sizeof ( fontName ) );
+	COM_DefaultExtension( fontName, sizeof ( fontName ), ".ttf" );
+
 	len = ri.FS_ReadFile(fontName, &faceData);
 	if (len <= 0) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: Unable to read font file '%s'\n", fontName);
-		return;
+		return qfalse;
 	}
 
 	// allocate on the stack first in case we fail
 	if (FT_New_Memory_Face( ftLibrary, faceData, len, 0, &face )) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: FreeType, unable to allocate new face.\n");
-		return;
+		return qfalse;
 	}
 
+	// scale dpi based on screen height
+	dpi = 72.0f * (glConfig.vidHeight / (float)SCREEN_HEIGHT);
 
 	if (FT_Set_Char_Size( face, pointSize << 6, pointSize << 6, dpi, dpi)) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: FreeType, unable to set face char size.\n");
-		return;
+		return qfalse;
 	}
 
 	//*font = &registeredFonts[registeredFontCount++];
 
+	// scale image size based on screen height, use the next higher power of two
+	for (imageSize = 256; imageSize < 256.0f * (glConfig.vidHeight / (float)SCREEN_HEIGHT); imageSize<<=1);
+
+	// do not exceed maxTextureSize
+	if (imageSize > glConfig.maxTextureSize) {
+		imageSize = glConfig.maxTextureSize;
+	}
+
 	// make a 256x256 image buffer, once it is full, register it, clean it and keep going 
 	// until all glyphs are rendered
-
-	out = ri.Malloc(1024*1024);
+	out = ri.Malloc(imageSize*imageSize*4);
 	if (out == NULL) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: ri.Malloc failure during output image creation.\n");
-		return;
+		return qfalse;
 	}
-	Com_Memset(out, 0, 1024*1024);
+	Com_Memset(out, 0, imageSize*imageSize*4);
 
 	maxHeight = 0;
 
 	for (i = GLYPH_START; i < GLYPH_END; i++) {
-		RE_ConstructGlyphInfo(out, &xOut, &yOut, &maxHeight, face, (unsigned char)i, qtrue);
+		RE_ConstructGlyphInfo(imageSize, out, &xOut, &yOut, &maxHeight, face, (unsigned char)i, qtrue);
 	}
 
 	xOut = 0;
@@ -465,14 +465,14 @@
 
 	while ( i <= GLYPH_END ) {
 
-		glyph = RE_ConstructGlyphInfo(out, &xOut, &yOut, &maxHeight, face, (unsigned char)i, qfalse);
+		glyph = RE_ConstructGlyphInfo(imageSize, out, &xOut, &yOut, &maxHeight, face, (unsigned char)i, qfalse);
 
 		if (xOut == -1 || yOut == -1 || i == GLYPH_END)  {
 			// ran out of room
 			// we need to create an image from the bitmap, set all the handles in the glyphs to this point
 			// 
 
-			scaledSize = 256*256;
+			scaledSize = imageSize*imageSize;
 			newSize = scaledSize * 4;
 			imageBuff = ri.Malloc(newSize);
 			left = 0;
@@ -495,24 +495,36 @@
 				imageBuff[left++] = ((float)out[k] * max);
 			}
 
-			Com_sprintf (name, sizeof(name), "fonts/fontImage_%i_%i.tga", imageNumber++, pointSize);
-			if (r_saveFontData->integer) { 
-				WriteTGA(name, imageBuff, 256, 256);
+			Com_sprintf(imageName, sizeof(imageName), "%s_%i_%i.tga", strippedName, imageNumber++, pointSize);
+			if(r_saveFontData->integer && !ri.FS_FileExists(imageName)) {
+				WriteTGA(imageName, imageBuff, imageSize, imageSize);
 			}
 
-			//Com_sprintf (name, sizeof(name), "fonts/fontImage_%i_%i", imageNumber++, pointSize);
-			image = R_CreateImage(name, imageBuff, 256, 256, qfalse, qfalse, GL_CLAMP_TO_EDGE);
-			h = RE_RegisterShaderFromImage(name, LIGHTMAP_2D, image, qfalse);
-			for (j = lastStart; j < i; j++) {
-				font->glyphs[j].glyph = h;
-				Q_strncpyz(font->glyphs[j].shaderName, name, sizeof(font->glyphs[j].shaderName));
-			}
-			lastStart = i;
-			Com_Memset(out, 0, 1024*1024);
+			image = R_CreateImage(imageName, imageBuff, imageSize, imageSize, qfalse, qfalse, GL_CLAMP_TO_EDGE);
+			h = RE_RegisterShaderFromImage(imageName, LIGHTMAP_2D, image, qfalse);
+			Com_Memset(out, 0, imageSize*imageSize*4);
 			xOut = 0;
 			yOut = 0;
 			ri.Free(imageBuff);
-			i++;
+
+			if(i == GLYPH_END)
+			{
+				for(j = lastStart; j <= GLYPH_END; j++)
+				{
+					font->glyphs[j].glyph = h;
+					COM_StripExtension(imageName, font->glyphs[j].shaderName, sizeof(font->glyphs[j].shaderName));
+				}
+				break;
+			}
+			else
+			{
+				for(j = lastStart; j < i; j++)
+				{
+					font->glyphs[j].glyph = h;
+					COM_StripExtension(imageName, font->glyphs[j].shaderName, sizeof(font->glyphs[j].shaderName));
+				}
+				lastStart = i;
+			}
 		} else {
 			Com_Memcpy(&font->glyphs[i], glyph, sizeof(glyphInfo_t));
 			i++;
@@ -527,26 +539,105 @@
 
 	registeredFont[registeredFontCount].glyphScale = glyphScale;
 	font->glyphScale = glyphScale;
+	Com_sprintf(datName, sizeof(datName), "%s_%i.dat", strippedName, pointSize);
+	Q_strncpyz(font->name, datName, sizeof(font->name));
 	Com_Memcpy(&registeredFont[registeredFontCount++], font, sizeof(fontInfo_t));
 
-	if (r_saveFontData->integer) {
-		ri.FS_WriteFile(va("fonts/fontImage_%i.dat", pointSize), font, sizeof(fontInfo_t));
+	if(r_saveFontData->integer && !ri.FS_FileExists(datName)) {
+		ri.FS_WriteFile(datName, font, sizeof(fontInfo_t));
 	}
 
 	ri.Free(out);
 
 	ri.FS_FreeFile(faceData);
+	return qtrue;
+}
 #endif
+
+/*
+==================
+R_GetFont
+
+Get already registered font or load a scalable font or a pre-rendered legacy font.
+==================
+*/
+static qboolean R_GetFont(const char *name, int pointSize, fontInfo_t *font) {
+	int			i;
+	char		strippedName[MAX_QPATH];
+	char		datName[MAX_QPATH];
+
+	COM_StripExtension( name, strippedName, sizeof ( strippedName ) );
+	Com_sprintf( datName, sizeof ( datName ), "%s_%i.dat", strippedName, pointSize );
+
+	for (i = 0; i < registeredFontCount; i++) {
+		if (Q_stricmp(datName, registeredFont[i].name) == 0) {
+			Com_Memcpy(font, &registeredFont[i], sizeof(fontInfo_t));
+			return qtrue;
+		}
+	}
+
+	if (registeredFontCount >= MAX_FONTS) {
+		ri.Printf(PRINT_WARNING, "RE_RegisterFont: Too many fonts registered already.\n");
+		return qfalse;
+	}
+
+#ifdef BUILD_FREETYPE
+	if ( R_LoadScalableFont( name, pointSize, font ) )
+		return qtrue;
+#endif
+
+	if ( R_LoadPreRenderedFont( datName, font ) )
+		return qtrue;
+
+	return qfalse;
 }
 
+/*
+===============
+RE_RegisterFont
+===============
+*/
+void RE_RegisterFont(const char *fontName, int pointSize, fontInfo_t *font) {
+	char		strippedName[MAX_QPATH];
 
+	if (!fontName) {
+		ri.Printf(PRINT_ALL, "RE_RegisterFont: called with empty name\n");
+		return;
+	}
 
+	if (pointSize <= 0) {
+		pointSize = 12;
+	}
+
+	// make sure the render thread is stopped
+	R_SyncRenderThread();
+
+	if ( R_GetFont( fontName, pointSize, font ) )
+		return;
+
+	COM_StripExtension( fontName, strippedName, sizeof ( strippedName ) );
+
+	// If there is no extension, assume this is loading one of the legacy fonts
+	if( !Q_stricmpn( strippedName, fontName, strlen( fontName ) ) ) {
+		if ( R_GetFont( "fonts/fontImage", pointSize, font ) )
+			return;
+	}
+
+#ifdef BUILD_FREETYPE
+	ri.Printf( PRINT_WARNING, "RE_RegisterFont: Failed to register font %s.\n", fontName );
+#else
+	ri.Printf(PRINT_WARNING, "RE_RegisterFont: Failed to register font %s (Note: FreeType code is not available).\n");
+#endif
+}
+
+
 void R_InitFreeType(void) {
 #ifdef BUILD_FREETYPE
 	if (FT_Init_FreeType( &ftLibrary )) {
 		ri.Printf(PRINT_WARNING, "R_InitFreeType: Unable to initialize FreeType.\n");
 	}
 #endif
+
 	registeredFontCount = 0;
 }
 
@@ -558,6 +649,7 @@
 		ftLibrary = NULL;
 	}
 #endif
+
 	registeredFontCount = 0;
 }
 
Index: code/qcommon/q_shared.h
===================================================================
--- code/qcommon/q_shared.h	(revision 368)
+++ code/qcommon/q_shared.h	(revision 371)
@@ -1400,7 +1400,7 @@
 typedef struct {
   int height;       // number of scan lines
   int top;          // top of glyph in buffer
-  int bottom;       // bottom of glyph in buffer
+  int left;         // left of glyph in buffer
   int pitch;        // width for copying
   int xSkip;        // x adjustment
   int imageWidth;   // width of actual image
Index: code/qcommon/files.c
===================================================================
--- code/qcommon/files.c	(revision 368)
+++ code/qcommon/files.c	(revision 371)
@@ -1318,6 +1318,7 @@
 			   !FS_IsExt(filename, ".menu", len) &&		// menu files
 			   !FS_IsExt(filename, ".game", len) &&		// menu files
 			   !FS_IsExt(filename, ".dat", len) &&		// for journal files
+			   !strstr(filename, "fonts") &&
 			   !FS_IsDemoExt(filename, len))			// demos
 			{
 				*file = 0;
Index: code/rend2/tr_font.c
===================================================================
--- code/rend2/tr_font.c	(revision 368)
+++ code/rend2/tr_font.c	(revision 371)
@@ -35,28 +35,19 @@
 // about 90% of the cgame presentation. A few areas of the CGAME were left uses the old 
 // fonts since the code is shared with standard Q3A.
 //
-// If you include this font rendering code in a commercial product you MUST include the
-// following somewhere with your product, see www.freetype.org for specifics or changes.
-// The Freetype code also uses some hinting techniques that MIGHT infringe on patents 
-// held by apple so be aware of that also.
-//
-// As of Q3A 1.25+ and Team Arena, we are shipping the game with the font rendering code
-// disabled. This removes any potential patent issues and it keeps us from having to 
+// Q3A 1.25+ and Team Arena were shipped with the font rendering code disabled, there was
+// a patent held by Apple at the time which FreeType MIGHT infringe on.
+// This removed any potential patent issues and it kept us (id Software) from having to 
 // distribute an actual TrueTrype font which is 1. expensive to do and 2. seems to require
-// an act of god to accomplish. 
+// an act of god to accomplish.
 //
 // What we did was pre-render the fonts using FreeType ( which is why we leave the FreeType
 // credit in the credits ) and then saved off the glyph data and then hand touched up the 
 // font bitmaps so they scale a bit better in GL.
 //
-// There are limitations in the way fonts are saved and reloaded in that it is based on 
-// point size and not name. So if you pre-render Helvetica in 18 point and Impact in 18 point
-// you will end up with a single 18 point data file and image set. Typically you will want to 
-// choose 3 sizes to best approximate the scaling you will be doing in the ui scripting system
-// 
 // In the UI Scripting code, a scale of 1.0 is equal to a 48 point font. In Team Arena, we
 // use three or four scales, most of them exactly equaling the specific rendered size. We 
-// rendered three sizes in Team Arena, 12, 16, and 20. 
+// rendered three sizes in Team Arena, 12, 16, and 20.
 //
 // To generate new font data you need to go through the following steps.
 // 1. delete the fontImage_x_xx.tga files and fontImage_xx.dat files from the fonts path.
@@ -66,7 +57,7 @@
 // 4. Exit the game and there will be three dat files and at least three tga files. The 
 //    tga's are in 256x256 pages so if it takes three images to render a 24 point font you 
 //    will end up with fontImage_0_24.tga through fontImage_2_24.tga
-// 5. In future runs of the game, the system looks for these images and data files when a s
+// 5. In future runs of the game, the system looks for these images and data files when a
 //    specific point sized font is rendered and loads them for use. 
 // 6. Because of the original beta nature of the FreeType code you will probably want to hand
 //    touch the font bitmaps.
@@ -94,7 +85,7 @@
 FT_Library ftLibrary = NULL;  
 #endif
 
-#define MAX_FONTS 6
+#define MAX_FONTS 12
 static int registeredFontCount = 0;
 static fontInfo_t registeredFont[MAX_FONTS];
 
@@ -138,9 +129,10 @@
 
 		glyphOut->height = height;
 		glyphOut->pitch = pitch;
-		glyphOut->top = (glyph->metrics.horiBearingY >> 6) + 1;
-		glyphOut->bottom = bottom;
 
+		glyphOut->top = _TRUNC(glyph->metrics.horiBearingY);// + 1;
+		glyphOut->left = _TRUNC(glyph->metrics.horiBearingX);// + 1;
+
 		return bit2;
 	} else {
 		ri.Printf(PRINT_ALL, "Non-outline fonts are not supported\n");
@@ -148,7 +140,7 @@
 	return NULL;
 }
 
-void WriteTGA (char *filename, byte *data, int width, int height) {
+static void WriteTGA (char *filename, byte *data, int width, int height) {
 	byte			*buffer;
 	int				i, c;
 	int             row;
@@ -196,7 +188,7 @@
 	ri.Free (buffer);
 }
 
-static glyphInfo_t *RE_ConstructGlyphInfo(unsigned char *imageOut, int *xOut, int *yOut, int *maxHeight, FT_Face face, const unsigned char c, qboolean calcHeight) {
+static glyphInfo_t *RE_ConstructGlyphInfo(int imageSize, unsigned char *imageOut, int *xOut, int *yOut, int *maxHeight, FT_Face face, const unsigned char c, qboolean calcHeight) {
 	int i;
 	static glyphInfo_t glyph;
 	unsigned char *src, *dst;
@@ -209,7 +201,7 @@
 		FT_Load_Glyph(face, FT_Get_Char_Index( face, c), FT_LOAD_DEFAULT );
 		bitmap = R_RenderGlyph(face->glyph, &glyph);
 		if (bitmap) {
-			glyph.xSkip = (face->glyph->metrics.horiAdvance >> 6) + 1;
+			glyph.xSkip = (face->glyph->metrics.horiAdvance >> 6); // + 1;
 		} else {
 			return &glyph;
 		}
@@ -237,12 +229,12 @@
 		scaled_height = glyph.height;
 
 		// we need to make sure we fit
-		if (*xOut + scaled_width + 1 >= 255) {
+		if (*xOut + scaled_width + 1 >= imageSize-1) {
 			*xOut = 0;
 			*yOut += *maxHeight + 1;
 		}
 
-		if (*yOut + *maxHeight + 1 >= 255) {
+		if (*yOut + *maxHeight + 1 >= imageSize-1) {
 			*yOut = -1;
 			*xOut = -1;
 			ri.Free(bitmap->buffer);
@@ -252,7 +244,7 @@
 
 
 		src = bitmap->buffer;
-		dst = imageOut + (*yOut * 256) + *xOut;
+		dst = imageOut + (*yOut * imageSize) + *xOut;
 
 		if (bitmap->pixel_mode == ft_pixel_mode_mono) {
 			for (i = 0; i < glyph.height; i++) {
@@ -277,13 +269,13 @@
 				}
 
 				src += glyph.pitch;
-				dst += 256;
+				dst += imageSize;
 			}
 		} else {
 			for (i = 0; i < glyph.height; i++) {
 				Com_Memcpy(dst, src, glyph.pitch);
 				src += glyph.pitch;
-				dst += 256;
+				dst += imageSize;
 			}
 		}
 
@@ -292,10 +284,10 @@
 
 		glyph.imageHeight = scaled_height;
 		glyph.imageWidth = scaled_width;
-		glyph.s = (float)*xOut / 256;
-		glyph.t = (float)*yOut / 256;
-		glyph.s2 = glyph.s + (float)scaled_width / 256;
-		glyph.t2 = glyph.t + (float)scaled_height / 256;
+		glyph.s = (float)*xOut / imageSize;
+		glyph.t = (float)*yOut / imageSize;
+		glyph.s2 = glyph.s + (float)scaled_width / imageSize;
+		glyph.t2 = glyph.t + (float)scaled_height / imageSize;
 
 		*xOut += scaled_width + 1;
 
@@ -338,57 +330,26 @@
 	return me.ffred;
 }
 
-void RE_RegisterFont(const char *fontName, int pointSize, fontInfo_t *font) {
-#ifdef BUILD_FREETYPE
-	FT_Face face;
-	int j, k, xOut, yOut, lastStart, imageNumber;
-	int scaledSize, newSize, maxHeight, left;
-	unsigned char *out, *imageBuff;
-	glyphInfo_t *glyph;
-	image_t *image;
-	qhandle_t h;
-	float max;
-	float dpi = 72;
-	float glyphScale;
-#endif
-	void *faceData;
-	int i, len;
-	char name[1024];
+/*
+===============
+R_LoadPreRenderedFont
+===============
+*/
+qboolean R_LoadPreRenderedFont( const char *datName, fontInfo_t *font ) {
+	void		*faceData;
+	int			len;
+	int			i;
 
-	if (!fontName) {
-		ri.Printf(PRINT_ALL, "RE_RegisterFont: called with empty name\n");
-		return;
-	}
-
-	if (pointSize <= 0) {
-		pointSize = 12;
-	}
-
-	// make sure the render thread is stopped
-	R_SyncRenderThread();
-
-	if (registeredFontCount >= MAX_FONTS) {
-		ri.Printf(PRINT_WARNING, "RE_RegisterFont: Too many fonts registered already.\n");
-		return;
-	}
-
-	Com_sprintf(name, sizeof(name), "fonts/fontImage_%i.dat",pointSize);
-	for (i = 0; i < registeredFontCount; i++) {
-		if (Q_stricmp(name, registeredFont[i].name) == 0) {
-			Com_Memcpy(font, &registeredFont[i], sizeof(fontInfo_t));
-			return;
-		}
-	}
-
-	len = ri.FS_ReadFile(name, NULL);
+	len = ri.FS_ReadFile(datName, NULL);
 	if (len == sizeof(fontInfo_t)) {
-		ri.FS_ReadFile(name, &faceData);
+		ri.FS_ReadFile(datName, &faceData);
 		fdOffset = 0;
 		fdFile = faceData;
 		for(i=0; i<GLYPHS_PER_FONT; i++) {
 			font->glyphs[i].height		= readInt();
 			font->glyphs[i].top			= readInt();
-			font->glyphs[i].bottom		= readInt();
+			readInt(); // read bottom. It wasn't used and has been replaced with left.
+			font->glyphs[i].left		= 0; // left wasn't saved in legacy fonts.
 			font->glyphs[i].pitch		= readInt();
 			font->glyphs[i].xSkip		= readInt();
 			font->glyphs[i].imageWidth	= readInt();
@@ -405,56 +366,95 @@
 		Com_Memcpy(font->name, &fdFile[fdOffset], MAX_QPATH);
 
 //		Com_Memcpy(font, faceData, sizeof(fontInfo_t));
-		Q_strncpyz(font->name, name, sizeof(font->name));
+		Q_strncpyz(font->name, datName, sizeof(font->name));
 		for (i = GLYPH_START; i < GLYPH_END; i++) {
 			font->glyphs[i].glyph = RE_RegisterShaderNoMip(font->glyphs[i].shaderName);
 		}
 		Com_Memcpy(&registeredFont[registeredFontCount++], font, sizeof(fontInfo_t));
-		return;
+		return qtrue;
 	}
 
-#ifndef BUILD_FREETYPE
-	ri.Printf(PRINT_WARNING, "RE_RegisterFont: FreeType code not available\n");
-#else
+	return qfalse;
+}
+
+#ifdef BUILD_FREETYPE
+/*
+===============
+R_LoadScalableFont
+===============
+*/
+qboolean R_LoadScalableFont( const char *name, int pointSize, fontInfo_t *font ) {
+	FT_Face		face;
+	int			j, k, xOut, yOut, lastStart, imageNumber;
+	int			scaledSize, newSize, maxHeight, left;
+	unsigned char *out, *imageBuff;
+	glyphInfo_t *glyph;
+	image_t		*image;
+	qhandle_t	h;
+	float		max;
+	int			imageSize;
+	float		dpi;
+	float		glyphScale;
+	void		*faceData;
+	int			i, len;
+	char		fontName[MAX_QPATH];
+	char		imageName[MAX_QPATH];
+	char		datName[MAX_QPATH];
+	char		strippedName[MAX_QPATH];
+
 	if (ftLibrary == NULL) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: FreeType not initialized.\n");
-		return;
+		return qfalse;
 	}
 
+	COM_StripExtension( name, strippedName, sizeof ( strippedName ) );
+
+	Q_strncpyz( fontName, name, sizeof ( fontName ) );
+	COM_DefaultExtension( fontName, sizeof ( fontName ), ".ttf" );
+
 	len = ri.FS_ReadFile(fontName, &faceData);
 	if (len <= 0) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: Unable to read font file '%s'\n", fontName);
-		return;
+		return qfalse;
 	}
 
 	// allocate on the stack first in case we fail
 	if (FT_New_Memory_Face( ftLibrary, faceData, len, 0, &face )) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: FreeType, unable to allocate new face.\n");
-		return;
+		return qfalse;
 	}
 
+	// scale dpi based on screen height
+	dpi = 72.0f * (glConfig.vidHeight / (float)SCREEN_HEIGHT);
 
 	if (FT_Set_Char_Size( face, pointSize << 6, pointSize << 6, dpi, dpi)) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: FreeType, unable to set face char size.\n");
-		return;
+		return qfalse;
 	}
 
 	//*font = &registeredFonts[registeredFontCount++];
 
+	// scale image size based on screen height, use the next higher power of two
+	for (imageSize = 256; imageSize < 256.0f * (glConfig.vidHeight / (float)SCREEN_HEIGHT); imageSize<<=1);
+
+	// do not exceed maxTextureSize
+	if (imageSize > glConfig.maxTextureSize) {
+		imageSize = glConfig.maxTextureSize;
+	}
+
 	// make a 256x256 image buffer, once it is full, register it, clean it and keep going 
 	// until all glyphs are rendered
-
-	out = ri.Malloc(1024*1024);
+	out = ri.Malloc(imageSize*imageSize*4);
 	if (out == NULL) {
 		ri.Printf(PRINT_WARNING, "RE_RegisterFont: ri.Malloc failure during output image creation.\n");
-		return;
+		return qfalse;
 	}
-	Com_Memset(out, 0, 1024*1024);
+	Com_Memset(out, 0, imageSize*imageSize*4);
 
 	maxHeight = 0;
 
 	for (i = GLYPH_START; i < GLYPH_END; i++) {
-		RE_ConstructGlyphInfo(out, &xOut, &yOut, &maxHeight, face, (unsigned char)i, qtrue);
+		RE_ConstructGlyphInfo(imageSize, out, &xOut, &yOut, &maxHeight, face, (unsigned char)i, qtrue);
 	}
 
 	xOut = 0;
@@ -465,14 +465,14 @@
 
 	while ( i <= GLYPH_END ) {
 
-		glyph = RE_ConstructGlyphInfo(out, &xOut, &yOut, &maxHeight, face, (unsigned char)i, qfalse);
+		glyph = RE_ConstructGlyphInfo(imageSize, out, &xOut, &yOut, &maxHeight, face, (unsigned char)i, qfalse);
 
 		if (xOut == -1 || yOut == -1 || i == GLYPH_END)  {
 			// ran out of room
 			// we need to create an image from the bitmap, set all the handles in the glyphs to this point
 			// 
 
-			scaledSize = 256*256;
+			scaledSize = imageSize*imageSize;
 			newSize = scaledSize * 4;
 			imageBuff = ri.Malloc(newSize);
 			left = 0;
@@ -495,24 +495,36 @@
 				imageBuff[left++] = ((float)out[k] * max);
 			}
 
-			Com_sprintf (name, sizeof(name), "fonts/fontImage_%i_%i.tga", imageNumber++, pointSize);
-			if (r_saveFontData->integer) { 
-				WriteTGA(name, imageBuff, 256, 256);
+			Com_sprintf(imageName, sizeof(imageName), "%s_%i_%i.tga", strippedName, imageNumber++, pointSize);
+			if(r_saveFontData->integer && !ri.FS_FileExists(imageName)) {
+				WriteTGA(imageName, imageBuff, imageSize, imageSize);
 			}
 
-			//Com_sprintf (name, sizeof(name), "fonts/fontImage_%i_%i", imageNumber++, pointSize);
-			image = R_CreateImage(name, imageBuff, 256, 256, qfalse, qfalse, GL_CLAMP_TO_EDGE);
-			h = RE_RegisterShaderFromImage(name, LIGHTMAP_2D, image, qfalse);
-			for (j = lastStart; j < i; j++) {
-				font->glyphs[j].glyph = h;
-				Q_strncpyz(font->glyphs[j].shaderName, name, sizeof(font->glyphs[j].shaderName));
-			}
-			lastStart = i;
-			Com_Memset(out, 0, 1024*1024);
+			image = R_CreateImage(imageName, imageBuff, imageSize, imageSize, qfalse, qfalse, GL_CLAMP_TO_EDGE);
+			h = RE_RegisterShaderFromImage(imageName, LIGHTMAP_2D, image, qfalse);
+			Com_Memset(out, 0, imageSize*imageSize*4);
 			xOut = 0;
 			yOut = 0;
 			ri.Free(imageBuff);
-			i++;
+
+			if(i == GLYPH_END)
+			{
+				for(j = lastStart; j <= GLYPH_END; j++)
+				{
+					font->glyphs[j].glyph = h;
+					COM_StripExtension(imageName, font->glyphs[j].shaderName, sizeof(font->glyphs[j].shaderName));
+				}
+				break;
+			}
+			else
+			{
+				for(j = lastStart; j < i; j++)
+				{
+					font->glyphs[j].glyph = h;
+					COM_StripExtension(imageName, font->glyphs[j].shaderName, sizeof(font->glyphs[j].shaderName));
+				}
+				lastStart = i;
+			}
 		} else {
 			Com_Memcpy(&font->glyphs[i], glyph, sizeof(glyphInfo_t));
 			i++;
@@ -527,26 +539,105 @@
 
 	registeredFont[registeredFontCount].glyphScale = glyphScale;
 	font->glyphScale = glyphScale;
+	Com_sprintf(datName, sizeof(datName), "%s_%i.dat", strippedName, pointSize);
+	Q_strncpyz(font->name, datName, sizeof(font->name));
 	Com_Memcpy(&registeredFont[registeredFontCount++], font, sizeof(fontInfo_t));
 
-	if (r_saveFontData->integer) {
-		ri.FS_WriteFile(va("fonts/fontImage_%i.dat", pointSize), font, sizeof(fontInfo_t));
+	if(r_saveFontData->integer && !ri.FS_FileExists(datName)) {
+		ri.FS_WriteFile(datName, font, sizeof(fontInfo_t));
 	}
 
 	ri.Free(out);
 
 	ri.FS_FreeFile(faceData);
+	return qtrue;
+}
 #endif
+
+/*
+==================
+R_GetFont
+
+Get already registered font or load a scalable font or a pre-rendered legacy font.
+==================
+*/
+static qboolean R_GetFont(const char *name, int pointSize, fontInfo_t *font) {
+	int			i;
+	char		strippedName[MAX_QPATH];
+	char		datName[MAX_QPATH];
+
+	COM_StripExtension( name, strippedName, sizeof ( strippedName ) );
+	Com_sprintf( datName, sizeof ( datName ), "%s_%i.dat", strippedName, pointSize );
+
+	for (i = 0; i < registeredFontCount; i++) {
+		if (Q_stricmp(datName, registeredFont[i].name) == 0) {
+			Com_Memcpy(font, &registeredFont[i], sizeof(fontInfo_t));
+			return qtrue;
+		}
+	}
+
+	if (registeredFontCount >= MAX_FONTS) {
+		ri.Printf(PRINT_WARNING, "RE_RegisterFont: Too many fonts registered already.\n");
+		return qfalse;
+	}
+
+#ifdef BUILD_FREETYPE
+	if ( R_LoadScalableFont( name, pointSize, font ) )
+		return qtrue;
+#endif
+
+	if ( R_LoadPreRenderedFont( datName, font ) )
+		return qtrue;
+
+	return qfalse;
 }
 
+/*
+===============
+RE_RegisterFont
+===============
+*/
+void RE_RegisterFont(const char *fontName, int pointSize, fontInfo_t *font) {
+	char		strippedName[MAX_QPATH];
 
+	if (!fontName) {
+		ri.Printf(PRINT_ALL, "RE_RegisterFont: called with empty name\n");
+		return;
+	}
 
+	if (pointSize <= 0) {
+		pointSize = 12;
+	}
+
+	// make sure the render thread is stopped
+	R_SyncRenderThread();
+
+	if ( R_GetFont( fontName, pointSize, font ) )
+		return;
+
+	COM_StripExtension( fontName, strippedName, sizeof ( strippedName ) );
+
+	// If there is no extension, assume this is loading one of the legacy fonts
+	if( !Q_stricmpn( strippedName, fontName, strlen( fontName ) ) ) {
+		if ( R_GetFont( "fonts/fontImage", pointSize, font ) )
+			return;
+	}
+
+#ifdef BUILD_FREETYPE
+	ri.Printf( PRINT_WARNING, "RE_RegisterFont: Failed to register font %s.\n", fontName );
+#else
+	ri.Printf(PRINT_WARNING, "RE_RegisterFont: Failed to register font %s (Note: FreeType code is not available).\n");
+#endif
+}
+
+
 void R_InitFreeType(void) {
 #ifdef BUILD_FREETYPE
 	if (FT_Init_FreeType( &ftLibrary )) {
 		ri.Printf(PRINT_WARNING, "R_InitFreeType: Unable to initialize FreeType.\n");
 	}
 #endif
+
 	registeredFontCount = 0;
 }
 
@@ -558,6 +649,7 @@
 		ftLibrary = NULL;
 	}
 #endif
+
 	registeredFontCount = 0;
 }
 
Index: code/ui/ui_main.c
===================================================================
--- code/ui/ui_main.c	(revision 368)
+++ code/ui/ui_main.c	(revision 371)
@@ -416,11 +416,12 @@
 				continue;
 			} else {
 				float yadj = useScale * glyph->top;
+				float xadj = useScale * glyph->left;
 				if (style == ITEM_TEXTSTYLE_SHADOWED || style == ITEM_TEXTSTYLE_SHADOWEDMORE) {
 					int ofs = style == ITEM_TEXTSTYLE_SHADOWED ? 1 : 2;
 					colorBlack[3] = newColor[3];
 					trap_R_SetColor( colorBlack );
-					Text_PaintChar(x + ofs, y - yadj + ofs, 
+					Text_PaintChar(x + xadj + ofs, y - yadj + ofs, 
 														glyph->imageWidth,
 														glyph->imageHeight,
 														useScale, 
@@ -432,7 +433,7 @@
 					trap_R_SetColor( newColor );
 					colorBlack[3] = 1.0;
 				}
-				Text_PaintChar(x, y - yadj, 
+				Text_PaintChar(x + xadj, y - yadj, 
 													glyph->imageWidth,
 													glyph->imageHeight,
 													useScale, 
@@ -455,7 +456,7 @@
   int len, count;
 	vec4_t newColor;
 	glyphInfo_t *glyph, *glyph2;
-	float yadj;
+	float yadj, xadj;
 	float useScale;
 	fontInfo_t *font = &uiInfo.uiDC.Assets.textFont;
 	if (scale <= ui_smallFont.value) {
@@ -486,11 +487,12 @@
 				continue;
 			} else {
 				yadj = useScale * glyph->top;
+				xadj = useScale * glyph->left;
 				if (style == ITEM_TEXTSTYLE_SHADOWED || style == ITEM_TEXTSTYLE_SHADOWEDMORE) {
 					int ofs = style == ITEM_TEXTSTYLE_SHADOWED ? 1 : 2;
 					colorBlack[3] = newColor[3];
 					trap_R_SetColor( colorBlack );
-					Text_PaintChar(x + ofs, y - yadj + ofs, 
+					Text_PaintChar(x + xadj + ofs, y - yadj + ofs, 
 														glyph->imageWidth,
 														glyph->imageHeight,
 														useScale, 
@@ -502,7 +504,7 @@
 					colorBlack[3] = 1.0;
 					trap_R_SetColor( newColor );
 				}
-				Text_PaintChar(x, y - yadj, 
+				Text_PaintChar(x + xadj, y - yadj, 
 													glyph->imageWidth,
 													glyph->imageHeight,
 													useScale, 
@@ -582,11 +584,12 @@
 				continue;
 			} else {
 	      float yadj = useScale * glyph->top;
+	      float xadj = useScale * glyph->left;
 				if (Text_Width(s, useScale, 1) + x > max) {
 					*maxX = 0;
 					break;
 				}
-		    Text_PaintChar(x, y - yadj, 
+		    Text_PaintChar(x + xadj, y - yadj, 
 			                 glyph->imageWidth,
 				               glyph->imageHeight,
 				               useScale, 
Index: code/client/cl_main.c
===================================================================
--- code/client/cl_main.c	(revision 368)
+++ code/client/cl_main.c	(revision 371)
@@ -3203,10 +3203,8 @@
 		hShader = re.RegisterShaderNoMip("menuback");
 	}
 
-	// XXX
-	int in_anaglyphMode = Cvar_VariableIntegerValue("r_anaglyphMode");
 	// if running in stereo, we need to draw the frame twice
-	if ( cls.glconfig.stereoEnabled || in_anaglyphMode) {
+	if ( cls.glconfig.stereoEnabled || Cvar_VariableIntegerValue( "r_anaglyphMode" ) ) {
 		CL_DrawLoadingScreenFrame( STEREO_LEFT, hShader );
 		CL_DrawLoadingScreenFrame( STEREO_RIGHT, hShader );
 	} else {
