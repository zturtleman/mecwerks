Index: code/server/sv_client.c
===================================================================
--- code/server/sv_client.c	(revision 371)
+++ code/server/sv_client.c	(revision 372)
@@ -1749,21 +1749,30 @@
 each of the backup packets.
 ==================
 */
-static void SV_UserMove( client_t *cl, msg_t *msg, qboolean delta, client_t *encoder ) {
+static void SV_UserMove( client_t *encoder, msg_t *msg, qboolean delta ) {
 	int			i, key;
 	int			cmdCount;
+	int			lc, localClientBits;
 	usercmd_t	nullcmd;
 	usercmd_t	cmds[MAX_PACKET_USERCMDS];
 	usercmd_t	*cmd, *oldcmd;
+	client_t	*cl;
 
 	if ( delta ) {
-		cl->deltaMessage = cl->messageAcknowledge;
+		encoder->deltaMessage = encoder->messageAcknowledge;
 	} else {
-		cl->deltaMessage = -1;
+		encoder->deltaMessage = -1;
 	}
 
+	localClientBits = MSG_ReadByte( msg );
 	cmdCount = MSG_ReadByte( msg );
 
+	if ( localClientBits == 0 ) {
+		// save time for ping calculation
+		encoder->frames[ encoder->messageAcknowledge & PACKET_MASK ].messageAcked = svs.time;
+		return;
+	}
+
 	if ( cmdCount < 1 ) {
 		Com_Printf( "cmdCount < 1\n" );
 		return;
@@ -1779,47 +1788,63 @@
 	// also use the last acknowledged server command in the key
 	key ^= MSG_HashKey(encoder->reliableCommands[ encoder->reliableAcknowledge & (MAX_RELIABLE_COMMANDS-1) ], 32);
 
-	Com_Memset( &nullcmd, 0, sizeof(nullcmd) );
-	oldcmd = &nullcmd;
-	for ( i = 0 ; i < cmdCount ; i++ ) {
-		cmd = &cmds[i];
-		MSG_ReadDeltaUsercmdKey( msg, key, oldcmd, cmd );
-		oldcmd = cmd;
-	}
+	for (lc = 0; lc < MAX_SPLITVIEW; ++lc) {
+		if (!(localClientBits & (1<<lc))) {
+			continue;
+		}
 
-	// save time for ping calculation
-	cl->frames[ cl->messageAcknowledge & PACKET_MASK ].messageAcked = svs.time;
+		Com_Memset( &nullcmd, 0, sizeof(nullcmd) );
+		oldcmd = &nullcmd;
+		for ( i = 0 ; i < cmdCount ; i++ ) {
+			cmd = &cmds[i];
+			MSG_ReadDeltaUsercmdKey( msg, key, oldcmd, cmd );
+			oldcmd = cmd;
+		}
 
-	// if this is the first usercmd we have received
-	// this gamestate, put the client into the world
-	if ( cl->state == CS_PRIMED ) {
-		SV_ClientEnterWorld( cl, &cmds[0] );
-		// the moves can be processed normaly
-	}
+		if (lc == 0) {
+			cl = encoder;
+		} else {
+			cl = encoder->localClients[lc-1];
+			if (!cl) {
+				Com_DPrintf( S_COLOR_YELLOW "WARNING: move cmd for non-existant local client %d from client %i\n", lc, (int) (encoder - svs.clients) );
+				continue;
+			}
+		}
 
-	if ( cl->state != CS_ACTIVE ) {
-		cl->deltaMessage = -1;
-		return;
-	}
+		// save time for ping calculation
+		cl->frames[ cl->messageAcknowledge & PACKET_MASK ].messageAcked = svs.time;
 
-	// usually, the first couple commands will be duplicates
-	// of ones we have previously received, but the servertimes
-	// in the commands will cause them to be immediately discarded
-	for ( i =  0 ; i < cmdCount ; i++ ) {
-		// if this is a cmd from before a map_restart ignore it
-		if ( cmds[i].serverTime > cmds[cmdCount-1].serverTime ) {
-			continue;
+		// if this is the first usercmd we have received
+		// this gamestate, put the client into the world
+		if ( cl->state == CS_PRIMED ) {
+			SV_ClientEnterWorld( cl, &cmds[0] );
+			// the moves can be processed normaly
 		}
-		// extremely lagged or cmd from before a map_restart
-		//if ( cmds[i].serverTime > svs.time + 3000 ) {
-		//	continue;
-		//}
-		// don't execute if this is an old cmd which is already executed
-		// these old cmds are included when cl_packetdup > 0
-		if ( cmds[i].serverTime <= cl->lastUsercmd.serverTime ) {
+
+		if ( cl->state != CS_ACTIVE ) {
+			cl->deltaMessage = -1;
 			continue;
 		}
-		SV_ClientThink (cl, &cmds[ i ]);
+
+		// usually, the first couple commands will be duplicates
+		// of ones we have previously received, but the servertimes
+		// in the commands will cause them to be immediately discarded
+		for ( i =  0 ; i < cmdCount ; i++ ) {
+			// if this is a cmd from before a map_restart ignore it
+			if ( cmds[i].serverTime > cmds[cmdCount-1].serverTime ) {
+				continue;
+			}
+			// extremely lagged or cmd from before a map_restart
+			//if ( cmds[i].serverTime > svs.time + 3000 ) {
+			//	continue;
+			//}
+			// don't execute if this is an old cmd which is already executed
+			// these old cmds are included when cl_packetdup > 0
+			if ( cmds[i].serverTime <= cl->lastUsercmd.serverTime ) {
+				continue;
+			}
+			SV_ClientThink (cl, &cmds[ i ]);
+		}
 	}
 }
 
@@ -2047,40 +2072,13 @@
 
 	// read the usercmd_t
 	if ( c == clc_move ) {
-		SV_UserMove( cl, msg, qtrue, cl );
+		SV_UserMove( cl, msg, qtrue );
 	} else if ( c == clc_moveNoDelta ) {
-		SV_UserMove( cl, msg, qfalse, cl );
+		SV_UserMove( cl, msg, qfalse );
 	} else if ( c != clc_EOF ) {
 		Com_Printf( "WARNING: bad command byte for client %i\n", (int) (cl - svs.clients) );
 	}
 //	if ( msg->readcount != msg->cursize ) {
 //		Com_Printf( "WARNING: Junk at end of packet for client %i\n", cl - svs.clients );
 //	}
-
-	// LocalClient move is included after normal move
-	if ( c != clc_EOF ) {
-		int i;
-
-		for (i = 0; i < MAX_SPLITVIEW-1; i++) {
-			c = MSG_ReadByte( msg );
-
-			if ( c == clc_EOF ) {
-				break;
-			}
-
-			if ( c == clc_moveLocal || c == clc_moveLocalNoDelta) {
-				int localClient = MSG_ReadByte( msg ); // localClient-1
-
-				if (localClient < 0 || localClient >= MAX_SPLITVIEW-1) {
-					Com_DPrintf( S_COLOR_YELLOW "WARNING: localClient byte out of range for client %i\n", (int) (cl - svs.clients) );
-					break;
-				} else if (!cl->localClients[localClient]) {
-					Com_DPrintf( S_COLOR_YELLOW "WARNING: localClient move for non-existant local client %d from client %i\n", localClient, (int) (cl - svs.clients) );
-					break;
-				} else {
-					SV_UserMove( cl->localClients[localClient], msg, (c == clc_moveLocal), cl );
-				}
-			}
-		}
-	}
 }
Index: code/qcommon/qcommon.h
===================================================================
--- code/qcommon/qcommon.h	(revision 371)
+++ code/qcommon/qcommon.h	(revision 372)
@@ -317,8 +317,6 @@
 
 // new commands, supported only by ioquake3 protocol but not legacy
 	clc_voip,   // not wrapped in USE_VOIP, so this value is reserved.
-	clc_moveLocal,			// [[usercmd_t] for an extra local client
-	clc_moveLocalNoDelta,	// [[usercmd_t] for an extra local client
 };
 
 /*
Index: code/client/cl_input.c
===================================================================
--- code/client/cl_input.c	(revision 371)
+++ code/client/cl_input.c	(revision 372)
@@ -958,8 +958,9 @@
 4	clc.serverCommandSequence
 <optional reliable commands>
 1	clc_move or clc_moveNoDelta
+1	local client bits
 1	command count
-<count * usercmds>
+<local clients * count * usercmds>
 
 ===================
 */
@@ -972,6 +973,7 @@
 	int			packetNum;
 	int			oldPacketNum;
 	int			count, key;
+	int			lc, localClientBits;
 
 	// don't send anything if playing back a demo
 	if ( clc.demoplaying || clc.state == CA_CINEMATIC ) {
@@ -1082,6 +1084,18 @@
 			MSG_WriteByte (&buf, clc_move);
 		}
 
+		// set bits
+		localClientBits = 0;
+		for (lc = 0; lc < MAX_SPLITVIEW; lc++) {
+			if ( cl.snap.valid && cl.snap.lcIndex[lc] == -1 ) {
+				continue;
+			}
+			localClientBits |= (1<<lc);
+		}
+
+		// write the local client bits
+		MSG_WriteByte( &buf, localClientBits );
+
 		// write the command count
 		MSG_WriteByte( &buf, count );
 
@@ -1090,48 +1104,20 @@
 		// also use the last acknowledged server command in the key
 		key ^= MSG_HashKey(clc.serverCommands[ clc.serverCommandSequence & (MAX_RELIABLE_COMMANDS-1) ], 32);
 
-		// write all the commands, including the predicted command
-		for ( i = 0 ; i < count ; i++ ) {
-			j = (cl.cmdNumber - count + i + 1) & CMD_MASK;
-			cmd = &cl.cmdss[0][j];
-			MSG_WriteDeltaUsercmdKey (&buf, key, oldcmd, cmd);
-			oldcmd = cmd;
-		}
+		for (lc = 0; lc < MAX_SPLITVIEW; lc++) {
+			if (!(localClientBits & (1<<lc))) {
+				continue;
+			}
 
-#ifdef LEGACY_PROTOCOL
-		if (!clc.compat)
-#endif
-		{
-			int lc;
+			Com_Memset( &nullcmd, 0, sizeof(nullcmd) );
+			oldcmd = &nullcmd;
 
-			for (lc = 1; lc < CL_MAX_SPLITVIEW; lc++) {
-				if (cl.snap.valid && cl.snap.lcIndex[lc] == -1) {
-					continue;
-				}
-
-				// begin a client move command
-				if ( cl_nodelta->integer || !cl.snap.valid || clc.demowaiting
-					|| clc.serverMessageSequence != cl.snap.messageNum ) {
-					MSG_WriteByte (&buf, clc_moveLocalNoDelta);
-				} else {
-					MSG_WriteByte (&buf, clc_moveLocal);
-				}
-
-				MSG_WriteByte (&buf, lc-1); // localClient-1
-
-				// write the command count
-				MSG_WriteByte( &buf, count );
-
-				Com_Memset( &nullcmd, 0, sizeof(nullcmd) );
-				oldcmd = &nullcmd;
-
-				// write all the commands, including the predicted command
-				for ( i = 0 ; i < count ; i++ ) {
-					j = (cl.cmdNumber - count + i + 1) & CMD_MASK;
-					cmd = &cl.cmdss[lc][j];
-					MSG_WriteDeltaUsercmdKey (&buf, key, oldcmd, cmd);
-					oldcmd = cmd;
-				}
+			// write all the commands, including the predicted command
+			for ( i = 0 ; i < count ; i++ ) {
+				j = (cl.cmdNumber - count + i + 1) & CMD_MASK;
+				cmd = &cl.cmdss[lc][j];
+				MSG_WriteDeltaUsercmdKey (&buf, key, oldcmd, cmd);
+				oldcmd = cmd;
 			}
 		}
 	}
